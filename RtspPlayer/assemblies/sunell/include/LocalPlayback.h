#ifdef RECORD_INTERFACE
#ifndef _LOCALPLAYBACK_H_
#define _LOCALPLAYBACK_H_

#include "RecordInfo.h"
#include "SNError.h"
#include "SNPlatOS.h"
#include "RecordDirInfo.h"
#include "RecordFileEx.h"
#include <vector>

class LocalRecordPlayer;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API LocalPlayback
{
public:
	LocalPlayback();
	~LocalPlayback(void);

public:
	/************************************************************************
	**概述：
	*		设置录像目录
	**输入：
	*		p_RecordDirInfoList：录像目录列表
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setRecordDirInfoList(const std::vector<RecordDirInfo> &p_objRecordDirInfoList);

	/************************************************************************
	**概述：
	*		设置视频拉伸模式
	**输入：
	*		p_bStretchMode：视频是否拉伸
	*		true：	拉伸视频以适应屏幕大小
	*		false：	不拉伸视频
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setStretchMode(const bool p_bStretchMode);

	/************************************************************************
	**概述：
	*		设置视频窗口自动缩放标志。
	**输入：
	*		p_bAutoResizeFlag：窗口自动缩放标志。
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		当p_AutoResizeFlag = true，表示窗口可以自动缩放，当视频窗口的大小改变时，视频画面会自动调整大小，
	*	此时调用resizeWindow将无效；反之当p_AutoResizeFlag = false，表示窗口不会自动缩放，此时可以调用
	*	resizeWindow改变窗口大小。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void setAutoResizeFlag(bool p_bAutoResizeFlag = true);

	/************************************************************************
	**概述：
	*		设置接收事件的窗口句柄、消息和自定义参数。
	**输入：
	*		p_hNotifyWnd：	指定接收消息的窗口句柄。LocalPlayback将发送消息到该句柄指定的窗口。若为NULL则表示不接收消息。
	*		
	*		p_nMessage：	指定Windows窗口消息ID。LocalPlayback将发送该消息到由p_hNotifyWnd指定的窗口。这个Windows窗口消息由用户自定义，
	*						Windows	下的WM_USER常量可以帮助用户为Windows窗口定义私有消息，定义方法如WM_USER+X, X是一个整型值。
	*		
	*		p_pParam：		指定发送消息时的携带的消息参数。该消息参数并不被LocalPlayback改变，LocalPlayback发送消息时只是简单地
	*						将该消息参数又发回给窗口。
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setNotifyWindow(const unsigned int p_nNotifyWnd, const unsigned int p_nMessage, const void * p_pParam);

	/************************************************************************
	**概述：
	*		设置视频的显示窗口，位置和大小。
	**输入：
	*		p_hDisplayWnd：	视频显示窗口的句柄。
	*		x：				指定在窗口中视频显示位置的x坐标，单位为像素。
	*		y：				指定在窗口中视频显示位置的y坐标，单位为像素。
	*		width：			指定在窗口中视频显示大小的宽度，单位为像素。
	*		height：		指定在窗口中视频显示大小的高度，单位为像素。
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setVideoWindow(const unsigned int p_hDisplayWnd, const int x, const int y, const int width, const int height);
	void setVideoWindow(const unsigned int p_hDisplayWnd);
	

public:
	/************************************************************************
	**概述：
	*		打开一个文件播放器
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若open方法成功，返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	************************************************************************/
	int open(const RecordInfo & p_objRecordInfo);

	/***********************************************************************
	**概述：
	*		打开ftp录像文件。
	**输入：
	*		p_RecordFile:ftp录像文件信息
	**输出：
	*		无
	**返回值：
	*		SN_SCUESS:	打开成功
	*		<0:			打开失败
	**功能描述：
	*		根据p_RecordFile打开ftp录像文件，返回值等于0则打开成功，否则打开失败。
	*		文件打开成功后用read不停的读取视频数据。
	************************************************************************/
	int open(const RecordFileEx &p_RecordFile);

	/************************************************************************
	**概述：
	*		关闭一个文件播放器
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		关闭一个文件播放器
	************************************************************************/
	void close();

public:
	/************************************************************************
	**概述：
	*		开始播放
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若open方法成功，返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	************************************************************************/
	int play();

	/************************************************************************
	**概述：
	*		暂停文件播放
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若open方法成功，返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	************************************************************************/
	int pause();

	/************************************************************************
	**概述：
	*		停止文件播放
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若open方法成功，返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	************************************************************************/
	int stop();

	/************************************************************************
	**概述：
	*		获取当前播放器的状态
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		当前播放器的状态
	**功能：
	*
	************************************************************************/
	int getPlayStatus();

	/************************************************************************
	**概述：
	*		播放下一帧。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int	playNextFrame();

	/************************************************************************
	**概述：
	*		播放上一帧。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int	playPreviousFrame();

public:
	/************************************************************************
	**概述：
	*		播放音频。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int	playSound();


	/************************************************************************
	**概述：
	*		停止播放音频。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int stopSound();

	/************************************************************************
	**概述：
	*		是否正在播放音频。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若正在播放音频，返回true;
	*		若停止播放音频，返回false;
	*************************************************************************/
	bool isOnSound();


	/************************************************************************
	**概述：
	*		设置音量。
	**输入：
	*		p_nVolume：音量
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int setVolume(const long p_nVolume);


	/************************************************************************
	**概述：
	*		获取音量。
	**输入：
	*		无
	**输出：
	*		p_nVolume：音量
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int getVolume(long & p_nVolume);

public:
	/************************************************************************
	**概述：
	*		重新设置视频在当前窗口的显示位置和大小。
	**输入：
	*		x：		在窗口中视频显示位置的x坐标，单位为像素。
	*		y：		在窗口中视频显示位置的y坐标，单位为像素。
	*		width：	在窗口中视频显示大小的宽度，单位为像素。
	*		height：在窗口中视频显示大小的高度，单位为像素。
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void resizeWindow(const int x, const int y, const int width, const int height);

	/************************************************************************
	**概述：
	*		刷新显示区域
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功
	*		其他：		失败
	**功能：
	*		刷新显示区域。当播放处于暂停状态时，如果产生了窗口切换，会使视频显示区域变灰，
	*		调用此接口使解码库重绘播放区域，消除灰色效果。
	************************************************************************/
	int refresh( );

public:
	/************************************************************************
	**概述：
	*		取得当前的播放时间位置(单位:秒)
	**输入：
	*		无
	**输出：
	*		p_pdblPosition,		返回当前的播放位置
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	**************************************************************************/
	int getPlayPosByTime(unsigned long & p_nPosition);

	/************************************************************************
	**概述：
	*		根据时间设置当前的播放位置(单位:秒)
	**输入：
	*		无
	**输出：
	*		p_dblPosition,		播放位置
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	**************************************************************************/
	int setPlayPosByTime(const unsigned long p_nPosition );

	/************************************************************************
	**概述：
	*		设置当前的播放速率
	**输入：
	*		p_pdRate：当前的播放速率，1.0为按正常速度播放
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	************************************************************************/
	int setRate (const float p_nRate );

	/************************************************************************
	**概述：
	*		获取当前的播放速率
	**输入：
	*		无
	**输出：
	*		p_pdRate,		当前的播放速率
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*
	************************************************************************/
	int getRate(float& p_nRate );

public:
	/************************************************************************
	**概述：
	*		获取当前视频显示的亮度。
	**输入：
	*		无
	**输出：
	*		p_nValue：获取到的视频显示亮度值，范围为0至100(包括0和100)。
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int setVideoBrightness(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取当前视频显示的亮度。
	**输入：
	*		无
	**输出：
	*		p_nValue：获取到的视频显示亮度值，范围为0至100(包括0和100)。
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int getVideoBrightness(int & p_nValue);

	/************************************************************************
	**概述：
	*		设置当前视频显示的对比度。
	**输入：
	*		p_nValue：要设置的视频显示的对比度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int setVideoContrast(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取当前视频显示的对比度。
	**输入：
	*		无
	**输出：
	*		p_nValue：获取到的视频显示对比度值，范围为0至100(包括0和100)
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int getVideoContrast(int & p_nValue);

	/************************************************************************
	**概述：
	*		设置当前视频显示的色调。
	**输入：
	*		p_nValue：要设置的视频显示的色调值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int setVideoHue(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取当前视频显示的色调。。
	**输入：
	*		无
	**输出：
	*		p_nValue：获取到的视频显示的色调值，范围为0至100(包括0和100)。
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int getVideoHue(int & p_nValue);

	
	/************************************************************************
	**概述：
	*		设置当前视频显示的饱和度。
	**输入：
	*		p_nValue：要设置的视频显示的饱和度值。
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int setVideoSaturation(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取当前视频显示的饱和度。
	**输入：
	*		无
	**输出：
	*		p_nValue：获取到的视频显示的饱和度值，范围为0至100(包括0和100)。
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	*************************************************************************/
	int getVideoSaturation(int & p_nValue);

	/***********************************************************************
	**概述：
	*		将亮度、对比度、饱和度和色调重置为默认值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	************************************************************************/
	int resetPictureAdjustFilter();

	/************************************************************************
	**概述：
	*		获得码流中原始图象大小。
	**输入：
	*		无。
	**输出：
	*		p_nWidth ：原始图象宽，单位：像素。
	*		p_nHeight：原始图象高，单位：像素。
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo:: formatMessage来获取错误信息。
	**功能：
	*		
	************************************************************************/
	int getPictureSize(int& p_nWidth, int& p_nHeight);

public:
	/************************************************************************
	**概述：
	*		快照当前播放的视频，并存储为一个BMP格式的图像文件。
	**输入：
	*		p_szFileName：存储图像文件的文件名，包含存储的完整路径，如：“C:\image\sample.bmp”。
	**输出：
	*		无
	**返回值：
	*		true： 快照成功，并保存图像文件成功；
	*		fales：快照失败。
	*************************************************************************/
	int snapShot(const char* p_szFileName);

//实时录像
	/************************************************************************
	**概述：
	*		设置录像文件名
	**输入：
	*		p_pszFileName:录像名
	**输出：
	*		无
	**返回值：
	*		
	*************************************************************************/
	void setRecordFile(const char* p_pszFileName);
	
	/************************************************************************
	**概述：
	*		设置录像格式
	**输入：
	*		p_nFileFormat:录像格式，（1：TS流，4：PS流,具体可查看RecorderParam.h定义）
	**输出：
	*		无
	**返回值：
	*		
	*************************************************************************/
	void setRecordFileFormat(const int p_nFileFormat);

	/************************************************************************
	**概述：
	*		设置设置录像头
	**输入：
	*		p_pszRecordFileHead:录像头
	*		p_nRecordFileLength:录像头长度
	**输出：
	*		无
	**返回值：
	*		
	*************************************************************************/
	void setRecordFileHead(const char* p_pszRecordFileHead, const int p_nRecordFileLength);

	/************************************************************************
	**概述：
	*		开始录像
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		
	*************************************************************************/
	int startRecord();

	/************************************************************************
	**概述：
	*		停止录像
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		
	*************************************************************************/
	void stopRecord();

	/************************************************************************
	**概述：
	*		获取录制状态。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		当前音视频录制的状态
	**功能：
	*		
	*************************************************************************/
	int getRecordStatus();

public:
	/************************************************************************
	**概述：
	*		放大显示视频图像。
	**输入：
	*		x：需要放大显示的区域的x坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		y：需要放大显示的区域的y坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		width：需要放大显示的区域的宽度。
	*		height：需要放大显示的区域的高度。
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		将用户划的区域放大显示
	************************************************************************/
	int zoomInVideo(const unsigned int x, const unsigned int y, const unsigned int width, const unsigned int height);

	/************************************************************************
	**概述：
	*		放大当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		按照一定的比率放大当前显示的视频图像
	************************************************************************/
	int zoomInVideo();

	/************************************************************************
	**概述：
	*		缩小当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		按照一定的比率缩小当前显示的视频图像
	************************************************************************/
	int zoomOutVideo();

	/************************************************************************
	**概述：
	*		恢复正常的视频图像显示。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void restoreVideo();

private:
	//拷贝构造函数
	LocalPlayback(const LocalPlayback& p_objObject)
	{
	}

	//赋值函数
	LocalPlayback& operator = (const LocalPlayback& p_objObject)
	{
		return *this;
	}

private:
	LocalRecordPlayer* 		m_pobjLocalRecordPlayer;
	bool					m_bIsOpen;
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif
#endif
