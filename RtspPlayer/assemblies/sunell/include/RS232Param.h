#ifndef _RS232PARAMETER_H_
#define _RS232PARAMETER_H_

#include "DomainConst.h"
#include <string.h>
#include "SNPlatOS.h"

#ifndef byte
typedef unsigned char byte;
#endif

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API RS232Param
{

public:
	RS232Param();
	~RS232Param();

	RS232Param(const RS232Param& p_objRS232Param);

public:
	/************************************************************************
	**概述：
	*		设置串口ID
	**输入：
	*		p_nComId：串口ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setComId(const int p_nComId);

	/************************************************************************
	**概述：
	*		获取串口ID
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		串口ID
	**功能：
	*    
	*************************************************************************/
	const int getComId() const;

	/************************************************************************
	**概述：
	*		设置串口功能
	**输入：
	*		p_nFunction：串口功能
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setFunction(int p_nFunction);


	/************************************************************************
	**概述：
	*		获取串口功能
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		串口功能
	**功能：
	*    
	*************************************************************************/
	const int getFunction() const;

	/************************************************************************
	**概述：
	*		设置波特率
	**输入：
	*		p_nBaudRate：波特率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setBaudRate(int p_nBaudRate);

	/************************************************************************
	**概述：
	*		获取波特率
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		波特率
	**功能：
	*    
	*************************************************************************/
	const int getBaudRate() const;

	/************************************************************************
	**概述：
	*		设置数据位
	**输入：
	*		p_nDataBits：数据位
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setDataBits(int p_nDataBits);

	/************************************************************************
	**概述：
	*		获取数据位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		数据位
	**功能：
	*    
	*************************************************************************/
	const int getDataBits() const;

	/************************************************************************
	**概述：
	*		设置停止位
	**输入：
	*		p_nStopBits：停止位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setStopBits(int p_nStopBits);

	/************************************************************************
	**概述：
	*		获取停止位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		停止位
	**功能：
	*    
	*************************************************************************/
	const int getStopBits() const;

	/************************************************************************
	**概述：
	*		设置奇偶校验类型
	**输入：
	*		p_nParity：奇偶校验类型
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setParity(int p_nParity);

	/************************************************************************
	**概述：
	*		获取奇偶校验类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		奇偶校验类型
	**功能：
	*    
	*************************************************************************/
	const int getParity() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objRS232Param：设备主机网络信息
	**输出：
	*		无
	**返回值：
	*		设备主机网络信息
	**功能：
	************************************************************************/
	RS232Param& operator =(const RS232Param& p_objRS232Param);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objRS232Param：RS232Param类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个RS232Param类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const RS232Param& p_objRS232Param);

private:
	int		m_nComId;							//串口ID

	int		m_nFunction;						//功能

	int		m_nBaudRate;						//波特率

	int		m_nDataBits;						//数据位

	int		m_nStopBits;						//停止位

	int		m_nParity;							//奇偶校验
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_RS232PARAMETER_H_
