#ifndef _REMOTE_SENSOR2_H_
#define _REMOTE_SENSOR2_H_

#include "SNPlatOS.h"

#include "DeviceInfoEx.h"
#include <map>
#include <string>
#include <vector>
class RemoteSensor;
struct ParameterUnit;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API RemoteSensor2
{
public:
	RemoteSensor2(void);
	~RemoteSensor2(void);

public:

	/************************************************************************
	**概述：
	*		设置DeviceInfo
	**输入：
	*		DeviceInfo 设备信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		当用不带参数的构造函数构造类时，在open之前必须调用该方法
	*************************************************************************/
	void setDeviceInfo(const DeviceInfo &p_objDeviceInfo);
	void setDeviceInfo(const DeviceInfoEx &p_objDeviceInfoEx);

	/************************************************************************
	**概述：
	*		设置与网络视频设备之间的网络传输的超时时间
	**输入：
	*		p_nTimeout：超时时间，以毫秒（ms）为单位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	void setTimeout(const int p_nTimeout);

	/************************************************************************
	**概述：
	*		建立和网络视频设备之间的远程串口会话
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若open方法成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int open();

	/************************************************************************
	**概述：
	*		打开前端调节
	**输入：
	*		p_objDeviceInfo ：设备信息
	*		p_nTimeOut		：超时时间，以毫秒为单位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	int open(const DeviceInfo &p_objDeviceInfo, const int p_nTimeOut);
	int open(const DeviceInfoEx &p_objDeviceInfoEx, const int p_nTimeOut);

	/************************************************************************
	**概述：
	*		关闭与网络视频设备的配置会话，并关闭打开的远程串口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		关闭与网络视频设备的配置会话
	*************************************************************************/
	void close();


	/************************************************************************
	**概述：
	*		设置亮度
	**输入：
	*		p_nValue：亮度 
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setBrightness(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取亮度
	**输入：
	*		无
	**输出：
	*		p_nValue：亮度 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getBrightness(int &p_nValue);

	/************************************************************************
	**概述：
	*		设置锐度
	**输入：
	*		p_nValue：色调 
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setSharpness(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取锐度
	**输入：
	*		无
	**输出：
	*		p_nValue：色调 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSharpness(int &p_nValue);

	/************************************************************************
	**概述：
	*		设置色调
	**输入：
	*		p_nValue：色调 
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setHue(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取色调
	**输入：
	*		无
	**输出：
	*		p_nValue：色调 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getHue(int &p_nValue);
	

	/************************************************************************
	**概述：
	*		设置对比度
	**输入：
	*		p_nValue：对比度 
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setContrast(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取对比度
	**输入：
	*		无
	**输出：
	*		p_nValue：对比度 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getContrast(int &p_nValue);


	/************************************************************************
	**概述：
	*		设置饱和度
	**输入：
	*		p_nValue：饱和度 
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setSaturation(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取饱和度
	**输入：
	*		无
	**输出：
	*		p_nValue：饱和度 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSaturation(int &p_nValue);


	/************************************************************************
	**概述：
	*		将参数恢复到出厂配置
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int resetParameters();

	/************************************************************************
	**概述：
	*		保存参数设置
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int save();

	/************************************************************************
	**概述：
	*		获取亮度取值范围
	**输入：
	*		无
	**输出：
	*		p_MinValue：最小值
	*		p_MaxValue: 最大值
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getBrightnessRange(int &p_MinValue,int &p_MaxValue);

	/************************************************************************
	**概述：
	*		获取锐度取值范围
	**输入：
	*		无
	**输出：
	*		p_MinValue：最小值
	*		p_MaxValue: 最大值
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSharpnessRange(int &p_MinValue,int &p_MaxValue);
	/************************************************************************
	**概述：
	*		获取对比度取值范围
	**输入：
	*		无
	**输出：
	*		p_MinValue：最小值
	*		p_MaxValue: 最大值
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getContrastRange(int &p_MinValue,int &p_MaxValue);
	/************************************************************************
	**概述：
	*		获取色度取值范围
	**输入：
	*		无
	**输出：
	*		p_MinValue：最小值
	*		p_MaxValue: 最大值
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getHueRange(int &p_MinValue,int &p_MaxValue);
	/************************************************************************
	**概述：
	*		获取饱和度取值范围
	**输入：
	*		无
	**输出：
	*		p_MinValue：最小值
	*		p_MaxValue: 最大值
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSaturationRange(int &p_MinValue,int &p_MaxValue);
	/************************************************************************
	**概述：
	*		获取镜像取值范围
	**输入：
	*		无
	**输出：
	*		p_MirrorList	镜像支持能力列表
	*		0：	关闭
	*		1： 水平镜像
	*		2： 垂直镜像
	*		3：	水平镜像+垂直镜像
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getMirrorRange(std::vector<int> &p_MirrorList);
	
	/************************************************************************
	**概述：
	*		设置镜像
	**输入：
	*		p_nValue：镜像 
	*		0：	关闭
	*		1： 水平镜像
	*		2： 垂直镜像
	*		3：	水平镜像+垂直镜像
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setMirror(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取镜像
	**输入：
	*		无
	**输出：
	*		p_nValue：镜像 
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getMirror(int &p_nValue);

	/************************************************************************
	**概述：
	*		获取场景模式取值范围
	**输入：
	*		无
	**输出：
	*		p_SceneModeList	场景模式支持能力列表
	*		0：	室内
	*		1： 室外
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSceneModeRange(std::vector<int> &p_SceneModeList);
	
	/************************************************************************
	**概述：
	*		设置场景模式
	**输入：
	*		p_nValue：场景模式
	*		0：	室内
	*		1： 室外
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setSceneMode(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取场景模式
	**输入：
	*		无
	**输出：
	*		p_nValue：场景模式
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getSceneMode(int &p_nValue);

	/************************************************************************
	**概述：
	*		获取背光补偿取值范围
	**输入：
	*		无
	**输出：
	*		p_BLCModeList	背光补偿支持能力列表
	*		0：	关闭
	*		1： 补偿画面中心（打开）
	*		2:	补偿画面上部
	*		3:	补偿画面下部
	*		4:	补偿画面左侧
	*		5:	补偿画面右侧
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getBLCModeRange(std::vector<int> &p_BLCModeList);
	
	/************************************************************************
	**概述：
	*		设置背光补偿
	**输入：
	*		p_nValue：场景模式
	*		0：	关闭
	*		1： 补偿画面中心（打开）
	*		2:	补偿画面上部
	*		3:	补偿画面下部
	*		4:	补偿画面左侧
	*		5:	补偿画面右侧
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setBLCMode(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取背光补偿
	**输入：
	*		无
	**输出：
	*		p_nValue：场景模式
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getBLCMode(int &p_nValue);

	/************************************************************************
	**概述：
	*		获取日夜模式取值范围
	**输入：
	*		无
	**输出：
	*		p_DNModeList	日夜模式支持能力列表
	*		0：	自动
	*		1： 日模式
	*		2:	夜模式
	*		3:	定时
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getDNModeRange(std::vector<int> &p_DNModeList);
	
	/************************************************************************
	**概述：
	*		设置日夜模式
	**输入：
	*		p_nValue：日夜模式
	*		0：	自动
	*		1： 日模式
	*		2:	夜模式
	*		3:	定时
	**输出：
	*		无
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int setDNMode(const int p_nValue);

	/************************************************************************
	**概述：
	*		获取日夜模式
	**输入：
	*		无
	**输出：
	*		p_nValue：日夜模式
	**返回值：
	*		若成功返回SN_SUCCESS;
	*		若失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	**功能：
	*		
	*************************************************************************/
	int getDNMode(int &p_nValue);
private:
	int base_open();
	int setParameterValue(const int p_nId,const int p_nValue);
	int getParameterValue(const int p_nId,int &p_nValue);

private:
	std::string createSensorParameterString(const std::map<int,int> &p_ParameterMap);
	std::string createSensorParameterString(int p_Id,int p_Value);
	bool parseSensorParameter(const std::string &p_ParameterList,std::map<int,int> &p_ParameterMap);
	bool parseSensorParameter(const std::string &p_Parameter,int &p_Id,int &p_Value);

	//拷贝构造函数
	RemoteSensor2(const RemoteSensor2& p_objObject)
	{
	}

	//赋值函数
	RemoteSensor2& operator = (const RemoteSensor2& p_objObject)
	{
		return *this;
	}
private:
	RemoteSensor*  m_pRemoteSensor;
	ParameterUnit* m_pParameterUnit;
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
#ifdef WIN32  
		#pragma pack(pop)
	#endif
#endif
/**********************************************************************/

#endif //_REMOTE_SENSOR2_H_
