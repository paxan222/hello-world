#ifndef _NETVIDEODEVICEINFO_H_
#define _NETVIDEODEVICEINFO_H_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"
#include "Version.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API NetVideoDeviceInfo
{

public:
	NetVideoDeviceInfo(void);
	~NetVideoDeviceInfo(void);

	//拷贝构造函数
	NetVideoDeviceInfo(const NetVideoDeviceInfo& p_objNetVideoDeviceInfo);
public:

	/************************************************************************
	**概述：
	*		设置网络视频设备的唯一标识符
	**输入：
	*		p_pszDeviceId：网络视频设备的唯一标识符
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的唯一标识符
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的唯一标识符
	**功能：
	*    
	*************************************************************************/
	const char* getDeviceId() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的设备类型
	**输入：
	*		p_nDeviceType：网络视频设备的设备类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setDeviceType(int p_nDeviceType);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备类型
	**功能：
	*    
	*************************************************************************/
	const int getDeviceType() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的主机IP地址
	**输入：
	*		p_pszLocalIp ：网络视频设备的主机IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setLocalIp(const char * p_pszLocalIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机IP地址
	**功能：
	*
	************************************************************************/
	const char * getLocalIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的主机IP地址
	**输入：
	*		p_pszLocalIp ：网络视频设备的主机IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setSubnetMask(const char * p_pszSubnetMask);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机子网掩码地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机子网掩码地址
	**功能：
	*
	************************************************************************/
	const char * getSubnetMask() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的主机网关地址
	**输入：
	*		p_pszGateway ：网络视频设备的主机网关地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setGateway(const char * p_pszGateway);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机网关地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机网关地址
	**功能：
	*
	************************************************************************/
	const char * getGateway() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的主机首选DNS
	**输入：
	*		p_pszPreferredDNSIp ：网络视频设备的主机首选DNS
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setPreferredDNSIp(const char * p_pszPreferredDNSIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机首选DNS
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机首选DNS
	**功能：
	*
	************************************************************************/
	const char * getPreferredDNSIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的控制端口
	**输入：
	*		p_nControlPort ：网络视频设备的控制端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setControlPort(unsigned short p_nControlPort);

	/************************************************************************
	**概述：
	*		获取络视频设备的控制端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		络视频设备的控制端口
	*功能：
	*
	************************************************************************/
	unsigned short getControlPort() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的HTTP端口
	**输入：
	*		p_nHTTPPort ：网络视频设备的HTTP端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setHttpPort(unsigned short p_nHttpPort);

	/************************************************************************
	**概述：
	*		获取网络视频设备的HTTP端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的HTTP端口
	*功能：
	*
	************************************************************************/
	unsigned short getHttpPort() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的版本信息
	**输入：
	*		p_objVersion：网络视频设备的版本信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setVersion(const Version& p_objVersion);

	/************************************************************************
	**概述：
	*		获取网络视频设备的版本信息
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的版本信息
	**功能：
	*    
	*************************************************************************/
	const Version& getVersion() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的设备型号
	**输入：
	*		p_pszManufacturerId：网络视频设备的设备型号
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerId(const char* p_pszManufacturerId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备型号
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备型号
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerId() const;


	/************************************************************************
	**概述：
	*		设置设置网络视频设备的厂商名称
	**输入：
	*		p_pszManufacturerName：设置网络视频设备的厂商名称
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerName(const char* p_pszManufacturerName);

	/************************************************************************
	**概述：
	*		获取设置网络视频设备的厂商名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		设置网络视频设备的厂商名称
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerName() const;

	/************************************************************************
	**概述：
	*		设置产品模组信息
	**输入：
	*		p_pszProductModel：产品模组信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductModel(const char* p_pszProductModel);

	/************************************************************************
	**概述：
	*		获得产品模组信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产品模组信息
	**功能：       
	*
	************************************************************************/
	const char* getProductModel() const;

	/************************************************************************
	**概述：
	*		设置保留位
	**输入：
	*		p_pszReserve4：设置保留位
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setReserve(const char* p_pszReserve);

	/************************************************************************
	**概述：
	*		获得保留位
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		保留位
	**功能：       
	*
	************************************************************************/
	const char* getReserve() const;


	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objNetVideoDeviceInfo：网络视频设备的主机网络信息
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机网络信息
	**功能：
	************************************************************************/
	NetVideoDeviceInfo& operator =(const NetVideoDeviceInfo& p_objNetVideoDeviceInfo);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objNetVideoDeviceInfo：NetVideoDeviceInfo类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个NetVideoDeviceInfo类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const NetVideoDeviceInfo& p_objNetVideoDeviceInfo);

private:
	char			m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];				//设备唯一标识
	
	int				m_nDeviceType;											//设备类型

	char			m_szLocalIp[CONST_MAXLENGTH_IP + 1];					//本地IP地址
	char			m_szSubnetMask[CONST_MAXLENGTH_IP + 1];					//子网掩码
	char			m_szGateway[CONST_MAXLENGTH_IP + 1];					//网关
	char			m_szPreferredDNSIp[CONST_MAXLENGTH_IP + 1];				//首选DNS
	
	unsigned short	m_nControlPort;											//网络视频设备的设备网络控制端口

	unsigned short	m_nHttpPort;											//网络视频设备的设备HTTP端口

	Version			m_objVersion;											//版本信息

	char			m_szManufacturerId[CONST_MAXLENGTH_MANUFACTURERID + 1];			//厂商ID
	char			m_szManufacturerName[CONST_MAXLENGTH_MANUFACTURERNAME + 1];		//厂商名称 
	char			m_szProductModel[CONST_MAXLENGTH_PRODUCTMODEL + 1];				//产品模组

	char			m_szReserve[CONST_MAXLENGTH_DEVICEPARAM_RESERVE + 1];

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif //_DEVICEACCESSCONFIG_H_

