#ifndef _ALARMDATA_H_
#define _ALARMDATA_H_
/*
#ifdef __cplusplus
extern "C" {
#endif
*/ 
#include "DomainConst.h"
#include "SNPlatOS.h"
#include "AlarmType.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API AlarmData
{
public:
	AlarmData();
	~AlarmData();
	AlarmData (const AlarmData &p_objAlarmData);

public:
	/************************************************************************
	**概述：
	*		设置网络视频设备报警源ID号
	**输入：
	*		  p_nAlarmSourceId ：网络视频设备报警源ID号（如果是磁盘报警，源ID为磁盘号；
	*							如果是移动侦测报警，源ID为摄像机编号；如果是I/O报警，源ID为报警输入设备ID号）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	void setAlarmSourceId(const int p_nAlarmSourceId);

	/************************************************************************
	**概述：
	*		获取网络视频设备报警源ID号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警源ID号
	**功能：
	*       
	**************************************************************************/
	const int getAlarmSourceId() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备报警源名称
	**输入：
	*		  p_pszAlarmSourceName ：网络视频设备报警源名称
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	bool setAlarmSourceName(const char* p_pszAlarmSourceName);

	/************************************************************************
	**概述：
	*		获取网络视频设备报警源名称
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警源名称
	**功能：
	*       
	**************************************************************************/
	const char* getAlarmSourceName() const;
	

	/************************************************************************
	**概述：
	*		设置报警时间
	**输入：
	*		  p_nAlarmTime：报警时间
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	void setAlarmTime(const long p_nAlarmTime);

	/************************************************************************
	**概述：
	*		获取报警时间
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警时间
	**功能：
	*       
	**************************************************************************/
	const long getAlarmTime() const;


	/************************************************************************
	**概述：
	*		设置报警类型
	**输入：
	*		  p_nAlarmType ：报警类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*     
	************************************************************************/
	void setAlarmType(const int p_nAlarmType);

	/************************************************************************
	**概述：
	*		获取报警类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警类型
	**功能：
	*       
	**************************************************************************/
	const int getAlarmType() const;


	/************************************************************************
	**概述：
	*		设置环境类型
	**输入：
	*		  p_nEventType ：环境类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	void setEventType(const int p_nEventType);

	/************************************************************************
	**概述：
	*		获取环境类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		环境类型
	**功能：
	*       
	**************************************************************************/
	const int getEventType() const;


	/************************************************************************
	**概述：
	*		设置报警代码
	**输入：
	*		  p_nAlarmCode ：报警代码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	void setAlarmCode(const int p_nAlarmCode);

	/************************************************************************
	**概述：
	*		获取报警代码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警代码
	**功能：
	*       
	**************************************************************************/
	const int getAlarmCode() const;


	/************************************************************************
	**概述：
	*		设置报警标志
	**输入：
	*		  p_nAlarmSourceId ：报警标志
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*      
	************************************************************************/
	void setAlarmFlag(const int p_nAlarmFlag);

	/************************************************************************
	**概述：
	*		获取报警标志
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警标志
	**功能：
	*       
	**************************************************************************/
	const int getAlarmFlag() const;


	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objAlarmData ：报警数据对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	AlarmData& operator = (const AlarmData &p_objAlarmData);

private:

	int		m_nAlarmSourceId;											//报警源ID号（如果是磁盘报警，源ID为磁盘号；如果是移动侦测报警，源ID为摄像机编号；如果是I/O报警，源ID为报警输入设备ID号）
	char	m_szAlarmSourceName[CONST_MAXLENGTH_ALARMSOURCENAME + 1];	//报警源名称

	long	m_nAlarmTime;												//报警时间

	int		m_nAlarmType;												//报警类型

	int		m_nEventType;												//环境类型

	int		m_nAlarmCode;												//报警代码

	int		m_nAlarmFlag;												//报警标志（1：报警产生，0：报警消除）
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif //_ALARMDATA_H_

