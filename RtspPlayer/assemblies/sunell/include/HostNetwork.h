#ifndef _HOSTNETWORK_H_
#define _HOSTNETWORK_H_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API HostNetwork
{

public:
	//适配器类型
	enum AdapterType
	{
		ADAPTER_TYPE_LOCAL				= 1,	//本地连接
		ADAPTER_TYPE_PPPOE				= 2,	//PPPoE连接
		ADAPTER_TYPE_WIFI				= 3		//WiFi连接
	};

public:
	HostNetwork(void);
	~HostNetwork(void);

	//拷贝构造函数
	HostNetwork(const HostNetwork& p_objHostNetwork);

public:
	/************************************************************************
	** 概述：
	*		设置适配器类型
	**输入：
	*		p_nAdapterType：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setAdapterType(const int p_nAdapterType);

	/************************************************************************
	**概述：
	*		获取适配器类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		适配器类型
	************************************************************************/
	const int getAdapterType()  const;

	/************************************************************************
	** 概述：
	*		设置IP协议类型
	**输入：
	*		p_nIPProtoVer：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setIPProtoVer(const int p_nIPProtoVer);

	/************************************************************************
	**概述：
	*		获取IP协议类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		IP协议类型
	************************************************************************/
	const int getIPProtoVer()  const;

	/****************************************************************************
	**概述：
	*		设置网络视频设备的唯一标识符
	**输入：
	*		p_pszDeviceId ：网络视频设备的唯一标识符，字符串，最大长度为CONST_MAXLENGTH_DEVICEID字节,
	*						结尾以‘\0’结束。
	**输出：
	*		无
	**返回值：
	*		true： 成功
	*		false：失败 
	**功能：
	*		若输入p_pszDeviceId长度<=CONST_MAXLENGTH_DEVICEID，返回true.
	*		若输入p_pszDeviceId为NULL或其长度>CONST_MAXLENGTH_DEVICEID，返回false.
	*****************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/****************************************************************************
	**概述：
	*		获取网络设备的唯一标识符
	**输入：
	*		无
	**输出：
	*		无
	*返回值：
	*		网络设备的唯一标识符，字符串类型 
	**功能：
	*		
	*****************************************************************************/
	const char* getDeviceId() const;

	/************************************************************************
	**概述：
	*		设置网口编号
	**输入：
	*		p_nNetId：网口编号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setNetId(const int p_nNetId);

	/************************************************************************
	**概述：
	*		获取网口编号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网口编号
	**功能：
	*
	************************************************************************/
	const int getNetId() const;

	/************************************************************************
	**概述：
	*		设置是否自动获取IP地址
	**输入：
	*		p_bFlag：是否自动获取IP地址标识（false：不自动获取，true：自动获取）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setAutoGetIpFlag(bool p_bFlag);

	/************************************************************************
	**概述：
	*		获取是否自动获取IP地址标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		自动获取IP地址标识
	**功能：
	*
	************************************************************************/
	bool getAutoGetIpFlag() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的主机IP地址
	**输入：
	*		p_nLocalIp ：网络视频设备的主机IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setLocalIp(const char * p_pszLocalIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机IP地址
	**功能：
	*
	************************************************************************/
	const char * getLocalIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的子网掩码
	**输入：
	*		p_nLocalSubnetMask ：网络视频设备的子网掩码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setLocalSubnetMask(const char * p_pszLocalSubnetMask);

	/************************************************************************
	**概述：
	*		获取网络视频设备的子网掩码
	**输入：
	*		无
	**输出：
	**		无
	**返回值：
	*		网络视频设备的子网掩码
	**功能：
	*
	************************************************************************/
	const char * getLocalSubnetMask() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的默认网关地址
	**输入：
	*		p_pszGateway ：网络视频设备的默认网关地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setGateway(const char * p_pszGateway);

	/************************************************************************
	**概述：
	*		获取网络视频设备的默认网关地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的默认网关地址
	**功能：
	*
	************************************************************************/
	const char * getGateway() const;

	/************************************************************************
	**概述：
	*		设置是否自动获取DNS服务器IP地址
	**输入：
	*		p_bFlag：自动获取DNS服务器IP地址标识（false：不自动获取，true：自动获取）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setAutoGetDNSFlag(bool p_bFlag);

	/************************************************************************
	**概述：
	*		获取自动获取DNS服务器IP地址标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		自动获取DNS服务器地址标识
	*功能：
	*
	************************************************************************/
	bool getAutoGetDNSFlag() const;

	/************************************************************************
	**概述：
	*		设置首选的DNS服务器IP地址
	**输入：
	*		p_nPrimaryDNSIp：首选的DNS服务器IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setPrimaryDNSIp(const char * p_pszPrimaryDNSIp);

	/************************************************************************
	**概述：
	*		获取首选的DNS服务器IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		首选的DNS服务器IP地址
	**功能：
	*
	************************************************************************/
	const char * getPrimaryDNSIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的备用或辅助的DNS服务器IP地址
	**输入：
	*		p_nSpareDNSIp：备用或辅助的DNS服务器IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setSpareDNSIp(const char * p_pszSpareDNSIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的备用或辅助的DNS服务器IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的备用或辅助的DNS服务器IP地址
	**功能：
	*
	************************************************************************/
	const char * getSpareDNSIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的控制端口
	**输入：
	*		p_nControlPort ：网络视频设备的控制端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setControlPort(unsigned short p_nControlPort);

	/************************************************************************
	**概述：
	*		获取络视频设备的控制端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		络视频设备的控制端口
	*功能：
	*
	************************************************************************/
	unsigned short getControlPort() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的注册端口
	**输入：
	*		p_nRegisterPort ：网络视频设备的注册端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setRegisterPort(unsigned short p_nRegisterPort);

	/************************************************************************
	**概述：
	*		获取网络视频设备的注册端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的注册端口
	**功能：
	*
	************************************************************************/
	unsigned short getRegisterPort() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的HTTP端口
	**输入：
	*		p_nHTTPPort ：网络视频设备的HTTP端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setHttpPort(unsigned short p_nHttpPort);

	/************************************************************************
	**概述：
	*		获取网络视频设备的HTTP端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的HTTP端口
	*功能：
	*
	************************************************************************/
	unsigned short getHttpPort() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objHostNetwork：网络视频设备的主机网络信息
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机网络信息
	**功能：
	************************************************************************/
	HostNetwork& operator =(const HostNetwork& p_objHostNetwork);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objHostNetwork：HostNetwork类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个HostNetwork类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const HostNetwork& p_objHostNetwork);

	/****************************************************************************
	**概述：
	*		复位
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		将成员变量恢复默认值
	*****************************************************************************/
	void reset();

private:
		char			m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];				//网络视频设备的设备ID

		int				m_nNetId;												//网口编号

		bool			m_bAutoGetIpFlag;										//自动获取IP地址(true：自动获取，false：不自动获取)
		char			m_szDhcpIp[CONST_MAXLENGTH_IP+1];						//DHCP IP
		char			m_szLocalIp[CONST_MAXLENGTH_IP + 1];					//本地IP地址
		char			m_szLocalSubnetMask[CONST_MAXLENGTH_IP + 1];			//子网掩码
		char			m_szGateway[CONST_MAXLENGTH_IP + 1];					//网关

		bool			m_bAutoGetDNSFlag;										//自动获取DNS服务器IP地址(true：自动获取，false：不自动获取)
		char			m_szPrimaryDNSIp[CONST_MAXLENGTH_IP + 1];				//首选DNS服务器IP地址
		char			m_szSpareDNSIp[CONST_MAXLENGTH_IP + 1];					//备用DNS服务器IP地址

		unsigned short	m_nControlPort;											//网络视频设备的设备网络控制端口,此参数无效
		unsigned short	m_nRegisterPort;										//网络视频设备的设备注册端口,此参数无效
		unsigned short	m_nHttpPort;											//网络视频设备的设备HTTP端口,此参数无效

		int				m_nIPProtoVer;											//IP协议类型

		int				m_nAdapterType;											//适配器类型
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_HOSTNETWORK_H_

