#ifndef _ENCODER_ABILITY_
#define _ENCODER_ABILITY_

#include "SNPlatOS.h"
#include <vector>
using namespace std;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

/************************************************************************
**概述：编码器能力信息类
*	包含：视频格式,最大码率,最小码率,最大码率,最小码率,最大视频质量值,最小视频质量值,码率类型列表
************************************************************************/

class SN_DLL_API EncoderAbility
{
public:
	EncoderAbility(void);
	~EncoderAbility(void);

public:
	/************************************************************************
	**概述：
	*		设置视频格式编号
	**输入：
	*		p_nImageFormatId：	视频格式编号
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setImageFormatId(const int p_nImageFormatId);

	/************************************************************************
	**概述：
	*		获取视频格式编号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频格式编号
	*************************************************************************/
	const int getImageFormatId() const;


	/************************************************************************
	**概述：
	*		设置最大码率
	**输入：
	*		p_nMaxFrameRate		最大码率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxFrameRate(const int p_nMaxFrameRate);

	/************************************************************************
	**概述：
	*		获取最大码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大码率
	*************************************************************************/
	const int getMaxFrameRate() const;


	/************************************************************************
	**概述：
	*		设置最小帧率
	**输入：
	*		p_nMinFrameRate		最小帧率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinFrameRate(const int p_nMinFrameRate);

	/************************************************************************
	**概述：
	*		获取最小帧率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小帧率
	*************************************************************************/
	const int getMinFrameRate() const;


	/************************************************************************
	**概述：
	*		设置最大码率
	**输入：
	*		p_nMaxBitRate		最大码率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxBitRate(const int p_nMaxBitRate);

	/************************************************************************
	**概述：
	*		获取最大码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大码率
	*************************************************************************/
	const int getMaxBitRate() const;


	/************************************************************************
	**概述：
	*		设置最小码率
	**输入：
	*		p_nMinBitRate		最小码率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinBitRate(const int p_nMinBitRate);

	/************************************************************************
	**概述：
	*		获取最小码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小码率
	*************************************************************************/
	const int getMinBitRate() const;


	/************************************************************************
	**概述：
	*		最大视频质量值
	**输入：
	*		p_nMaxQuality		最大视频质量值
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxQuality(const int p_nMaxQuality);

	/************************************************************************
	**概述：
	*		获取最大视频质量值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大视频质量值
	*************************************************************************/
	const int getMaxQuality() const;
	

	/************************************************************************
	**概述：
	*		设置最小视频质量值
	**输入：
	*		p_nMinQuality		最小视频质量值
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinQuality(const int p_nMinQuality);

	/************************************************************************
	**概述：
	*		获取最小视频质量值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小视频质量值
	*************************************************************************/
	const int getMinQuality() const;


	/************************************************************************
	**概述：
	*		添加一个码率类型
	**输入：
	*		p_nBitRateType		码率类型
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void addBitRateType(const int p_nBitRateType);

	/************************************************************************
	**概述：
	*		获取码率类型列表
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		码率类型列表
	*************************************************************************/
	const vector<int> &getBitRateTypeList() const;


	/************************************************************************
	**概述：
	*		设置视频制式
	**输入：
	*		p_nVideoSystem：视频制式
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setVideoSystem(const int p_nVideoSystem);

	/************************************************************************
	**概述：
	*		获取视频制式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频制式
	*************************************************************************/
	const int getVideoSystem() const;


	/************************************************************************
	**概述：
	*		设置高度
	**输入：
	*		p_nHeight：高度
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setHeight(const int p_nHeight);

	/************************************************************************
	**概述：
	*		获取高度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		高度
	*************************************************************************/
	const int getHeight() const;


	/************************************************************************
	**概述：
	*		设置宽度
	**输入：
	*		p_nWidth：宽度
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setWidth(const int p_nWidth);

	/************************************************************************
	**概述：
	*	获取宽度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		宽度
	*************************************************************************/
	const int getWidth() const;


	/************************************************************************
	**概述：
	*		设置编码类型
	**输入：
	*		p_nEncoderType：编码类型
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setEncoderType(const int p_nEncoderType);

	/************************************************************************
	**概述：
	*		获取编码类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码类型
	*************************************************************************/
	const int getEncoderType() const;

	bool operator < (const EncoderAbility& p_objEncoderAbility) const;

	bool operator == (const EncoderAbility& p_objEncoderAbility) const;

private:
	int m_nImageFormatId;				//视频格式
	int m_nMaxFrameRate;				//最大帧率
	int m_nMinFrameRate;				//最小帧率
	int m_nMaxBitRate;					//最大码率
	int m_nMinBitRate;					//最小码率
	int m_nMaxQuality;					//最大视频质量值
	int m_nMinQuality;					//最小视频质量值
	vector<int> m_objBitRateTypeList;	//码率类型列表

	int m_nVideoSystem;					//制式
	int m_nHeight;						//高度
	int m_nWidth;						//宽度
	int m_nEncoderType;					//编码类型
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_ENCODER_ABILITY_
