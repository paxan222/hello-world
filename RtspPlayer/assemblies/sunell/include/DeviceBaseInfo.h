#ifndef _DEVICEBASEINFO_H_
#define _DEVICEBASEINFO_H_

#include "DomainConst.h"
#include "os_define.h"
#include "Version.h"
#include "SNPlatOS.h"
#include "CameraDevice.h"
#include <vector>
using namespace std;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API DeviceBaseInfo
{
public:
	enum State
	{
		STATE_OFFLINE						=0x0000000000000001,		//不在线
		STATE_ONLINE_UNUSABLE				=0x0000000000000002,		//在线不可用
		STATE_ONLINE_USABLE					=0x0000000000000004,		//在线可用
		STATE_DELETE						=0x0000000000010000,		//删除
		STATE_ADD							=0x0000000000020000,		//增加
		DEVICE_IP_CHANGED					=0x0000000000040000,		//设备IP改变
		DEVICE_PORT_CHANGED					=0x0000000000080000,		//设备端口改变
		DEVICE_NAME_CHANGED					=0x0000000000100000,		//设备名字改变
		DEVICE_USERNAME_OR_PASSWORD_CHANGED =0x0000000000200000,		//设备用户名或者密码改变
		CAMERA_DEVICE_CHANGED				=0x0000000000400000			//所管理的摄像机设备改变
	};

	DeviceBaseInfo(void);
	~DeviceBaseInfo(void);

	//拷贝构造函数
	DeviceBaseInfo(const DeviceBaseInfo &p_objDeviceBaseInfo);

public:

	/************************************************************************
	**概述：
	*		设置网络视频设备的唯一标识符
	**输入：
	*		p_pszDeviceId：网络视频设备的唯一标识符
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的唯一标识符
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的唯一标识符
	**功能：
	*    
	*************************************************************************/
	const char* getDeviceId() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备名称
	**输入：
	*		p_pszDeviceName：网络视频设备名称
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*		若传入p_pszDeviceName为NULL，返回false
	*		若传入p_pszDeviceName长度大于CONST_MAXLENGTH_DEVICENAME，返回false
	*		若设置成功，返回true
	*************************************************************************/
	bool setDeviceName(const char* p_pszDeviceName);

	/************************************************************************
	**概述：
	*		获取网络视频设备名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备名称
	**功能：
	*    
	*************************************************************************/
	const char* getDeviceName() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的设备类型
	**输入：
	*		p_nDeviceType：网络视频设备的设备类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setDeviceType(int p_nDeviceType);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备类型
	**功能：
	*    
	*************************************************************************/
	const int getDeviceType() const;

	/************************************************************************
	**概述：
	*		设置登录设备的用户ID（用户名）
	**输入：
	*		p_pszUserID: 登录设备的用户ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置登录设备的用户ID
	************************************************************************/
	void setUserID(const char* p_pszUserID);

	/************************************************************************
	**概述：
	*		获取登录设备的用户ID（用户名）
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		登录设备的用户ID
	**功能：
	*		获取登录设备的用户ID
	**************************************************************************/
	const char* getUserID() const;

	/************************************************************************
	**概述：
	*		设置设备的登录密码
	**输入：
	*		p_pszPassword: 设备的登录密码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置设备的登录密码
	************************************************************************/
	void setPassword(const char* p_pszPassword);

	/************************************************************************
	**概述：
	*		获取设备的登录密码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备的登录密码
	**功能：
	*		获取设备的登录密码
	**************************************************************************/
	const char* getPassword() const;


	/************************************************************************
	** 概述：
	*		设置IP协议类型
	**输入：
	*		p_nIPProtoVer：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setIPProtoVer(const int p_nIPProtoVer);

	/************************************************************************
	**概述：
	*		获取IP协议类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		IP协议类型
	************************************************************************/
	const int getIPProtoVer()  const;

	/************************************************************************
	**概述：
	*		设置 报警中心的地址
	**输入：
	*		p_pszDeviceIP ：报警中心的IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	bool setDeviceIP(const char* p_nDeviceIP);

	/************************************************************************
	**概述：
	*		获取 报警中心的IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警中心的IP地址
	**功能：
	*
	************************************************************************/
	const char* getDeviceIP() const;

	/************************************************************************
	**概述：
	*		设置报警中心的端口
	**输入：
	*		p_nDevicePort ：报警中心的端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setDevicePort(const unsigned short p_nDevicePort);

	/************************************************************************
	**概述：
	*		获取报警中心的端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警中心的端口
	**功能：
	*
	************************************************************************/
	const unsigned short getDevicePort() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的设备型号
	**输入：
	*		p_pszManufacturerId：网络视频设备的设备型号
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerId(const char* p_pszManufacturerId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备型号
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备型号
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerId() const;


	/************************************************************************
	**概述：
	*		设置设置网络视频设备的厂商名称
	**输入：
	*		p_pszManufacturerName：设置网络视频设备的厂商名称
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerName(const char* p_pszManufacturerName);

	/************************************************************************
	**概述：
	*		获取设置网络视频设备的厂商名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		设置网络视频设备的厂商名称
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerName() const;

	/************************************************************************
	**概述：
	*		设置产品模组信息
	**输入：
	*		p_pszProductModel：产品模组信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductModel(const char* p_pszProductModel);

	/************************************************************************
	**概述：
	*		获得产品模组信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产品模组信息
	**功能：       
	*
	************************************************************************/
	const char* getProductModel() const;


	/************************************************************************
	**概述：
	*		设置产品描述信息
	**输入：
	*		p_pszProductDescription：产品描述信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductDescription(const char* p_pszProductDescription);

	/************************************************************************
	**概述：
	*		获得产品描述信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产品描述信息
	**功能：       
	*
	************************************************************************/
	const char* getProductDescription() const;


	/************************************************************************
	**概述：
	*		设置硬件模组信息
	**输入：
	*		p_pszHardwareModel：硬件模组信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setHardwareModel(const char* p_pszHardwareModel);

	/************************************************************************
	**概述：
	*		获得硬件模组信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		硬件模组信息
	**功能：       
	*
	************************************************************************/
	const char* getHardwareModel() const;


	/************************************************************************
	**概述：
	*		设置硬件描述信息
	**输入：
	*		p_pszHardwareDescription：硬件描述信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setHardwareDescription(const char* p_pszHardwareDescription);

	/************************************************************************
	**概述：
	*		获得硬件描述信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		硬件描述信息
	**功能：       
	*
	************************************************************************/
	const char* getHardwareDescription() const;


	/************************************************************************
	**概述：
	*		设置MAC地址
	**输入：
	*		p_pszMACAddress：MAC地址
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setMACAddress(const char* p_pszMACAddress);

	/************************************************************************
	**概述：
	*		获得MAC地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		MAC地址
	**功能：       
	*
	************************************************************************/
	const char* getMACAddress() const;


	/************************************************************************
	**概述：
	*		设置机器条形码
	**输入：
	*		p_pszBarCode：机器条形码
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setBarCode(const char* p_pszBarCode);

	/************************************************************************
	**概述：
	*		获得机器条形码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		机器条形码
	**功能：       
	*
	************************************************************************/
	const char* getBarCode() const;


	/************************************************************************
	**概述：
	*		设置生产时间
	**输入：
	*		p_pszProductionTime：生产时间
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductionTime(const char* p_pszProductionTime);

	/************************************************************************
	**概述：
	*		获得生产时间
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		生产时间
	**功能：       
	*
	************************************************************************/
	const char* getProductionTime() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的版本信息
	**输入：
	*		p_objVersion：网络视频设备的版本信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setVersion(const Version& p_objVersion);

	/************************************************************************
	**概述：
	*		获取网络视频设备的版本信息
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的版本信息
	**功能：
	*    
	*************************************************************************/
	const Version& getVersion() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的摄像机数
	**输入：
	*		p_nCameraNum：网络视频设备的摄像机数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setCameraNum(const int p_nCameraNum);

	/************************************************************************
	**概述：
	*		获取网络视频设备的摄像机数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的摄像机数
	**功能：
	*    
	*************************************************************************/
	const int getCameraNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的报警输入通道数
	**输入：
	*		AlarmInNum：网络视频设备的报警输入通道数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setAlarmInNum(const int p_nAlarmInNum);

	/************************************************************************
	**概述：
	*		获取设置网络视频设备的报警输入通道数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		设置网络视频设备的报警输入通道数
	**功能：
	*    
	*************************************************************************/
	const int getAlarmInNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的报警输出通道数
	**输入：
	*		p_nAlarmOutNum：网络视频设备的报警输出通道数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setAlarmOutNum(const int p_nAlarmOutNum);

	/************************************************************************
	**概述：
	*		获取网络视频设备的报警输出通道数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的报警输出通道数
	**功能：
	*    
	*************************************************************************/
	const int getAlarmOutNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的RS485串口的个数
	**输入：
	*		p_nRS485Num：RS485串口的个数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setRS485Num(const int p_nRS485Num);

	/************************************************************************
	**概述：
	*		获得网络视频设备的RS485串口的个数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		RS485串口的个数
	**功能：       
	*
	************************************************************************/
	const int getRS485Num() const ;

	void setCameraDeviceList(const vector<CameraDevice>& p_objCameraDevcieList);
	vector<CameraDevice>* getCameraDeviceList()const;

	/************************************************************************
	**概述：
	*		设置设备状态
	**输入：
	*	p_nState：设备状态
	**输出：
	*	无
	**返回值：
	*	无
	**功能：
	*       
	************************************************************************/
	void setState(const UINT64 p_nState);

	/************************************************************************
	**概述：
	*		获取设备状态
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备状态
	**功能：
	* 		
	************************************************************************/
	const UINT64 getState() const;

	/************************************************************************
	*概述：
	*		赋值函数
	**输入：
	*		p_objDeviceBaseInfo：设备概要信息
	**输出：
	*		无
	**返回值：
	*		设备概要信息
	**功能：
	*
	*************************************************************************/
	DeviceBaseInfo& operator = (const DeviceBaseInfo& p_objDeviceBaseInfo);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objDeviceBaseInfo：DeviceBaseInfo类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个DeviceBaseInfo类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const DeviceBaseInfo& p_objDeviceBaseInfo);

private:
	char				m_szDeviceId[CONST_MAXLENGTH_UUID + 1];								//设备唯一标识
	char				m_szDeviceName[CONST_MAXLENGTH_DEVICENAME + 1];							//设备名称
	int					m_nDeviceType;															//设备类型

	char				m_szDeviceIP[CONST_MAXLENGTH_DEVICE_ADDR + 1];									//设备IP地址
	unsigned short		m_nDevicePort;															//设备端口
	int					m_nIPProtoVer;															//IP协议类型
	char				m_szUserID[CONST_MAXLENGTH_USERID + 1];									//登陆设备的用户ID
	char				m_szPassword[CONST_MAXLENGTH_PASSWORD + 1];								//登陆设备的密码

	char				m_szManufacturerId[CONST_MAXLENGTH_MANUFACTURERID + 1];					//设备型号
	char				m_szManufacturerName[CONST_MAXLENGTH_MANUFACTURERNAME + 1];				//设备生产厂家
	char				m_szProductModel[CONST_MAXLENGTH_PRODUCTMODEL + 1];						//产品模组
	char				m_szProductDescription[CONST_MAXLENGTH_PRODUCTDESCRIPTION + 1];			//产品描述
	char				m_szHardwareModel[CONST_MAXLENGTH_HARDWAREMODEL + 1];					//硬件模组
	char				m_szHardwareDescription[CONST_MAXLENGTH_HARDWAREDESCRIPTION + 1];		//硬件描述
	char				m_szMACAddress[CONST_MAXLENGTH_MACADDRESS + 1];							//MAC地址
	char				m_szBarCode[CONST_MAXLENGTH_BARCODE + 1];								//机器条形码
	char				m_szProductionTime[CONST_MAXLENGTH_PRODUCTIONTIME + 1];					//生产时间
	Version				m_objVersion;															//版本信息

	int					m_nCameraNum;															//通道数（摄像机数）
	int					m_nAlarmInNum;															//报警输入个数
	int					m_nAlarmOutNum;															//报警输出个数
	int					m_nRS485Num;															//RS485串口个数

	vector<CameraDevice>		m_objCameraDevcieList;											//摄像机参数
	UINT64						m_nState;														//设备状态，0：不在线；1：在线不可用；2：在线可用，请查看DeviceStateInfoEx State枚举
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_DEVICEBASEINFO_H_
