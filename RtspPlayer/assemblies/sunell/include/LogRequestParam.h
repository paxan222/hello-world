#ifndef _LOGREQUESTPARAM_H_
#define _LOGREQUESTPARAM_H_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API LogRequestParam
{
public:
	//查询方式
	enum SelectMode
	{
		SELECT_MODE_ALL		= 0,		//查询所有
		SELECT_MODE_TYPE	= 1,		//按类型查询
		SELECT_MODE_TIME 	= 2			//按时间查询
	};
public:

	LogRequestParam();

	~LogRequestParam();

	//拷贝构造函数
	LogRequestParam(const LogRequestParam &p_objLogRequestParam);

public:
	/************************************************************************
	**概述：设置设备ID
	*
	**输入：
	*		p_pszDeviceId ：设备ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备ID
	************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：获取设备ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备ID
	**功能：       
	*		获取设备ID
	************************************************************************/
	const char* getDeviceId() const;


	/************************************************************************
	**概述：设置设备IP
	*
	**输入：
	*		p_pszDeviceIp ：设备IP
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备IP
	************************************************************************/
	bool setDeviceIp(const char * p_pszDeviceIp);

	/************************************************************************
	**概述：获取设备IP
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备IP
	**功能：       
	*		获取设备IP
	************************************************************************/
	const char * getDeviceIp() const;


	/************************************************************************
	**概述：设置摄像机ID
	*
	**输入：
	*		p_nCameraId ：摄像机ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置摄像机ID
	************************************************************************/
	void setCameraId(const int p_nCameraId);

	/************************************************************************
	**概述：获取摄像机ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		摄像机ID
	**功能：       
	*		获取摄像机ID
	************************************************************************/
	const int getCameraId() const;


	/************************************************************************
	**概述：设置用户名
	*
	**输入：
	*		p_pszUserName ：用户名
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置用户名
	************************************************************************/
	bool setUserName(const char * p_pszUserName);

	/************************************************************************
	**概述：获取用户名
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		用户名
	**功能：       
	*		获取用户名
	************************************************************************/
	const char* getUserName() const;


	/************************************************************************
	**概述：
	*		设置查询方式
	**输入：
	*		p_nSelectMode：要设置的查询方式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	void setSelectMode(const int p_nSelectMode);

	/************************************************************************
	**概述：
	*		获取查询方式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		查询方式
	**功能：       
	************************************************************************/
	const int getSelectMode() const;


	/************************************************************************
	**概述：
	*		设置主类型
	**输入：
	*		p_nMajorType：要设置的主类型(具体值定义请参考LogType.h)
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	void setMajorType(const int p_nMajorType);

	/************************************************************************
	**概述：
	*		获取主类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		主类型(具体值定义请参考LogType.h)
	**功能：       
	************************************************************************/
	const int getMajorType() const;


	/************************************************************************
	**概述：
	*		设置次类型
	**输入：
	*		p_nMinorType 要设置的次类型(具体值定义请参考LogType.h)
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	void setMinorType(const int p_nMinorType);

	/************************************************************************
	**概述：
	*		获取次类型
	**输入：
	*		无
	**输出：
	*		无
	**返返回值：
	*		次类型(具体值定义请参考LogType.h)
	**功能：       
	**************************************************************************/
	const int getMinorType() const ;


	/************************************************************************
	**概述：
	*		设置开始时间
	**输入：
	*		p_nStartTime：开始时间
	**输出：
	*		无
	**返返回值：
	*		无
	**功能：       
	**************************************************************************/
	void setStartTime(const unsigned long p_nStartTime);

	/************************************************************************
	**概述：
	*		获取开始时间
	**输入：
	*		无
	**输出：
	*		无
	**返返回值：
	*		开始时间
	**功能：       
	**************************************************************************/
	const unsigned long getStartTime() const;


	/************************************************************************
	**概述：
	*		设置结束时间
	**输入：
	*		p_nEndTime：结束时间
	**输出：
	*		无
	**返返回值：
	*		无
	**功能：       
	**************************************************************************/
	void setEndTime(const unsigned long p_nEndTime);

	/************************************************************************
	**概述：
	*		获取结束时间
	**输入：
	*		无
	**输出：
	*		无
	**返返回值：
	*		结束时间
	**功能：       
	**************************************************************************/
	const unsigned long getEndTime() const;


	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objLogRequestParam：日志查询对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	LogRequestParam &operator =(const LogRequestParam &p_objLogRequestParam);

	/************************************************************************
	**概述：
	*		定义“==”操作符
	**输入：
	*		p_objLogRequestParam：日志查询对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	bool operator == (const LogRequestParam &p_objLogRequestParam);

private:
	char			m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];		//设备ID

	char			m_szDeviceIp[CONST_MAXLENGTH_IP + 1];				//设备IP

	int				m_nCameraId;									//摄像机ID号

	char			m_szUserName[CONST_MAXLENGTH_USERNAME + 1];		//用户名

	int				m_nSelectMode;									//查询方式

	int				m_nMajorType;									//主类型

	int				m_nMinorType;									//次类型

	unsigned long	m_nStartTime;									//开始时间
	
	unsigned long	m_nEndTime;										//结束时间
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_LOGREQUESTPARAM_H_
