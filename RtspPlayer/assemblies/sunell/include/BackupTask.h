#ifndef _BACKUP_TASK_
#define _BACKUP_TASK_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"
#include "ScheduleTimeSegment.h"
#include "RecordBackupCondition.h"
#include <vector>

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API BackupTask
{
public:
	enum 
	{
		BACKUP_TASK_TYPE_LOCAL = 1, //本地备份
		BACKUP_TASK_TYPE_REMOTE = 2 //远程备份
	};
public:
	BackupTask(void);
	~BackupTask(void);
	BackupTask(const BackupTask &p_BackupTask);

public:

	/************************************************************************
	**概述：设置任务ID
	*
	**输入：
	*		p_nTaskId ：任务ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置任务ID
	************************************************************************/
	void setTaskId(const int p_nTaskId);

	/************************************************************************
	**概述：获取任务ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		任务ID
	**功能：       
	*		获取任务ID
	************************************************************************/
	const int getTaskId() const;
	/************************************************************************
	**概述：设置摄像机ID
	*
	**输入：
	*		p_nCameraId ：摄像机ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置摄像机ID
	************************************************************************/
	void setCameraId(const int p_nCameraId);

	/************************************************************************
	**概述：获取摄像机ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		摄像机ID
	**功能：       
	*		获取摄像机ID
	************************************************************************/
	const int getCameraId() const;

	/************************************************************************
	**概述：设置创建时间
	*
	**输入：
	*		p_nCreateTime ：创建时间
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置创建时间
	************************************************************************/
	void setCreateTime(const unsigned int p_nCreateTime);

	/************************************************************************
	**概述：获取创建时间
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		创建时间
	**功能：       
	*		获取创建时间
	************************************************************************/
	const unsigned int getCreateTime() const;

	/************************************************************************
	**概述：设置类型
	*
	**输入：
	*		p_nType ：类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置类型
	************************************************************************/
	void setType(const int p_nType);

	/************************************************************************
	**概述：获取类型
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		类型
	**功能：       
	*		获取类型
	************************************************************************/
	const int getType() const;

	/************************************************************************
	**概述：设置文件大小
	*
	**输入：
	*		p_nFileSize ：文件大小
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置文件大小
	************************************************************************/
	void setFileSize(const int p_nFileSize);

	/************************************************************************
	**概述：获取文件大小
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		文件大小
	**功能：       
	*		获取文件大小
	************************************************************************/
	const int getFileSize() const;
	
	/************************************************************************
	**概述：设置端口
	*
	**输入：
	*		p_nDevicePort：端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置端口
	************************************************************************/
	void setDevicePort(const unsigned short p_nDevicePort);

	/************************************************************************
	**概述：获取端口
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		端口
	**功能：       
	*		获取端口
	************************************************************************/
	const unsigned short getDevicePort() const;

	/************************************************************************
	**概述：设置备份路径
	*
	**输入：
	*		p_pszBackupPath ：备份路径
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置备份路径
	************************************************************************/
	bool setBackupPath(const char * p_pszBackupPath);

	/************************************************************************
	**概述：获取备份路径
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		备份路径
	**功能：       
	*		获取备份路径
	************************************************************************/
	const char* getBackupPath() const;

	/************************************************************************
	**概述：设置用户名
	*
	**输入：
	*		p_pszUserName ：用户名
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置用户名
	************************************************************************/
	bool setUserName(const char * p_pszUserName);

	/************************************************************************
	**概述：获取用户名
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		用户名
	**功能：       
	*		获取用户名
	************************************************************************/
	const char* getUserName() const;

	/************************************************************************
	**概述：设置用户名
	*
	**输入：
	*		p_pszPassWord：密码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置密码
	************************************************************************/
	bool setPassWord(const char * p_pszPassWord);

	/************************************************************************
	**概述：获取密码
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		密码
	**功能：       
	*		获取密码
	************************************************************************/
	const char* getPassWord() const;

	/************************************************************************
	**概述：设置设备Id
	*
	**输入：
	*		p_pszDeviceId ：设备Id
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备Id
	************************************************************************/
	bool setDeviceId(const char * p_pszDeviceId);

	/************************************************************************
	**概述：获取设备Id
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备Id
	**功能：       
	*		获取设备Id
	************************************************************************/
	const char* getDeviceId() const;
	
	/************************************************************************
	**概述：设置设备Ip
	*
	**输入：
	*		p_pszDeviceIp ：设备Ip
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备Ip
	************************************************************************/
	bool setDeviceIp(const char * p_pszDeviceIp);
	
	/************************************************************************
	**概述：获取设备Ip
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备Ip
	**功能：       
	*		获取设备Ip
	************************************************************************/
	const char* getDeviceIp() const;

	/************************************************************************
	**概述：设置备份时间列表
	*
	**输入：
	*		p_BackupTimeSegmentList ：备份时间列表
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		
	************************************************************************/
	void setBackupTimeSegmentList(const RecordBackupCondition &p_BackupTimeSegmentList);
	
	/************************************************************************
	**概述：获取备份时间列表
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		备份时间列表
	**功能：       
	*		
	************************************************************************/
	const RecordBackupCondition& getBackupTimeSegmentList() const;
	

	/************************************************************************
	**概述：设置多个时间段共用一个文件的标记
	*
	**输入：
	*		p_isCommonFile：true （共用）
	*						false（单独使用）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		
	************************************************************************/
	void setisCommonFile(bool p_isCommonFile);
	
	/************************************************************************
	**概述：获取多个时间段共用一个文件的标记
	*
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		true （共用）
	*		false（单独使用）
	**功能：
	*		
	************************************************************************/
	const bool getisCommonFile() const;
	
	/************************************************************************
	**概述：获取备份器使用人名称
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		使用人名称
	**功能：       
	*		获取使用人名称
	************************************************************************/
	const char* getBackupUserName() const;

	/************************************************************************
	**概述：设置备份器使用人名称
	*
	**输入：
	*		p_pszDeviceIp ：备份器使用人名称
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置备份器使用人名称
	************************************************************************/
	bool setBackupUserName(const char * p_szBackupUserName);


	/************************************************************************
	**概述：设置任务是否结束标示
	*
	**输入：
	*		p_isFinish：true （结束）
	*					false（未结束）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		
	************************************************************************/
	void setFinish(bool p_isFinish);

	/************************************************************************
	**概述：获取任务是否结束标示
	*
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		true （结束）
	*		false（未结束）
	**功能：
	*		
	************************************************************************/
	const bool isFinish() const;

	void setBackupDiskType(const int p_nType);

	const int getBackupDiskType() const;

	void setBackupFileType(const int p_nFileType); 
	const int getBackupFileType() const;

	void setSubDirType(const int p_nType);

	const int getSubDirType() const;	


	void setBackupCondition(const RecordBackupCondition &p_BackupTimeSegmentList);

	const RecordBackupCondition& getBackupCondition() const;
public:
	bool operator == (const BackupTask &p_objBackupTask);
	BackupTask& operator = (const BackupTask &p_objBackupTask);
private:
	int						m_nTaskId;										//任务ID
	char					m_szBackupPath[CONST_MAXLENGTH_FILE_NAME+1];	//备份路径
	unsigned int			m_nCreateTime;									//创建时间
	int						m_nType;										//类型
	int						m_nDiskType;
	int						m_nSubDirType;
	int						m_nFileSize;									//文件大小
	char					m_szUserName[CONST_MAXLENGTH_USERNAME+1];		//用户名
	char					m_szPassWord[CONST_MAXLENGTH_USERPASSWORD+1];	//密码
	char					m_szDeviceId[CONST_MAXLENGTH_DEVICEID+1];		//设备ID
	char					m_szDeviceIp[CONST_MAXLENGTH_IP+1];				//设备IP
	unsigned short			m_nDevicePort;									//端口
	int						m_nCameraId;									//摄像机ID
	RecordBackupCondition	m_BackupTimeSegmentList;			//时间段列表
	bool					m_isCommonFile;									//所有时间段在同一个文件的标示
	char					m_szBackupUserName[CONST_MAXLENGTH_USERNAME+1]; //使用备份器的用户名
	bool					m_isFinish;										//任务结束标示
	int						m_nBackupFileType;								//文件类型
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif
