#ifndef _REMOTEPTZ_H_
#define _REMOTEPTZ_H_

#include "DeviceInfoEx.h"
#include "RemoteRS485.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API RemotePTZ
{
public:

	RemotePTZ();
	/************************************************************************
	**概述：
	*		构造函数
	**输入：
	*		p_objDeviceInfo：指定要打开的网络视频设备
	*		p_nCameraID	   ：指定要操作的云台设备所对应的摄像机编号（也称通道channel）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	RemotePTZ(const DeviceInfo &p_objDeviceInfo, const int p_nCameraID);

	RemotePTZ(const DeviceInfoEx &p_objDeviceInfoEx, const int p_nCameraID);

	~RemotePTZ(void);
public:
	/************************************************************************
	**概述：
	*		设置DeviceInfo
	**输入：
	*		DeviceInfo 设备信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		当用不带参数的构造函数构造类时，在open之前必须调用该方法
	*************************************************************************/
	void	setDeviceInfo(const DeviceInfo &p_objDeviceInfo);

	void	setDeviceInfo(const DeviceInfoEx &p_objDeviceInfoEx);

	/************************************************************************
	**概述：
	*		设置要打开的云台对应的摄像机号
	**输入：
	*		p_nCameraID 摄像机号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		当用不带参数的构造函数构造类时，在open之前必须调用该方法
	*************************************************************************/
	void	setCameraID(const int p_nCameraID);

public:
	/************************************************************************
	**概述：
	*		设置云台的地址
	**输入：
	*		p_nPTZDeviceId：指定云台地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	void setPTZDeviceId(const int p_nPTZDeviceId);

	/************************************************************************
	**概述：
	*		设置云台的控制协议
	**输入：
	*		p_nPTZDeviceId：指定云台控制协议
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	void setPTZProtocol(const int p_nPTZProtocol);

	/************************************************************************
	**概述：
	*		设置云台所连接的串口的编号
	**输入：
	*		p_nComId：指定云台所连接的串口的编号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	void setCOMId(const int p_nComId);

	/************************************************************************
	**概述：
	*		设置RemotePTZ和网络视频设备之间的网络传输协议
	**输入：
	*		p_nTransferProtocol：指定网络传输的协议
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	void setTransferProtocol(const int p_nTransferProtocol);

	/************************************************************************
	**概述：
	*		打开云台设备，并建立和网络视频设备之间的传输会话
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int open();

	/************************************************************************
	**概述：
	*		关闭RemotePTZ和网络视频设备之间的传输会话。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*	
	*************************************************************************/
	void close();

public:
	/************************************************************************
	**概述：
	*		停止云台正在进行的操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int stop();

	/************************************************************************
	**概述：
	*		操作云台向上旋转
	**输入：
	*		p_nSpeedValue：云台向上旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateUp(const int p_nSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向下旋转
	**输入：
	*		p_nSpeedValue：云台向下旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateDown(const int p_nSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向左旋转
	**输入：
	*		p_nSpeedValue：云台向左旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateLeft(const int p_nSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向左旋转
	**输入：
	*		p_nSpeedValue：云台向右旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateRight(const int p_nSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向左上旋转
	**输入：
	*		p_nSpeedValue：云台向左上旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateLeftUp(const int p_nSpeedValue);
	int rotateLeftUp(const int p_nPanSpeedValue, const int p_nTiltSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向左下旋转
	**输入：
	*		p_nSpeedValue：云台向左下旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateLeftDown(const int p_nSpeedValue);
	int rotateLeftDown(const int p_nPanSpeedValue, const int p_nTiltSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向右上旋转
	**输入：
	*		p_nSpeedValue：云台向右上旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateRightUp(const int p_nSpeedValue);		
	int rotateRightUp(const int p_nPanSpeedValue, const int p_nTiltSpeedValue);

	/************************************************************************
	**概述：
	*		操作云台向右下旋转
	**输入：
	*		p_nSpeedValue：云台向右下旋转的速度值
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int rotateRightDown(const int p_nSpeedValue);
	int rotateRightDown(const int p_nPanSpeedValue, const int p_nTiltSpeedValue);

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行拉近操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int zoomIn();

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行拉远操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int zoomOut();

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行远焦操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int focusFar();

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行近焦操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int focusNear();

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行光圈增大操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int irisIncrease();

	/************************************************************************
	**概述：
	*		对摄像机的镜头进行光圈减小操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int irisDecrease();

	/************************************************************************
	**概述：
	*		自动聚焦
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int runAutoFocus();	

	/************************************************************************
	**概述：
	*		自动光圈
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int runAutoIris();

	/************************************************************************
	**概述：
	*		云台的预置位设置
	**输入：
	*		p_nValue：云台预置位编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int presetSet(const int p_nValue);

	/************************************************************************
	**概述：
	*		云台的预置位调用，云台旋转至预先设定的位置
	**输入：
	*		p_nValue：云台预置位编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int presetInvoke(const int p_nValue);

	/************************************************************************
	**概述：
	*		云台的预置位删除
	**输入：
	*		p_nValue：云台预置位编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int presetRemove(const int p_nValue);

	/************************************************************************
	**概述：
	*		启动扫描
	**输入：
	*		p_nValue：扫描起始点编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int scan(const int p_nValue);

	/************************************************************************
	**概述：
	*		删除扫描
	**输入：
	*		p_nValue：扫描编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int scanRemove(const int p_nValue);

	/************************************************************************
	**概述：
	*		设置扫描起始点
	**输入：
	*		p_nValue：扫描起始点位置
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int scanSetStartPoint(const int p_nValue);

	/************************************************************************
	**概述：
	*		设置扫描结束点
	**输入：
	*		p_nValue：扫描结束点编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int scanSetStopPoint(const int p_nValue);

	/************************************************************************
	**概述：
	*		自学习开始点设置
	**输入：
	*		p_nValue：自学习编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int setAutoStudyStartPoint(const int p_nValue);

	/************************************************************************
	**概述：
	*		自学习结束点设置
	**输入：
	*		p_nValue：自学习编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int setAutoStudyEndPoint(const int p_nValue);

	/************************************************************************
	**概述：
	*		自学习调用
	**输入：
	*		p_nValue：自学习编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int runAutoStudy(const int p_nValue);

	/************************************************************************
	**概述：
	*		自学习删除
	**输入：
	*		p_nValue：自学习编号
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int autoStudyRemove(const int p_nValue);

	/************************************************************************
	**概述：
	*		云台复位操作
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int reset();

	/************************************************************************
	**概述：
	*		设置云台操作
	**输入：
	*		p_bytePTZCommand：云台操作命令
	**输出：
	*		无
	**返回值：
	*		若方法成功，返回SN_SUCCESS；
	*		若方法失败则返回小于0的值，可以通过ErrorInfo::formatMessage来获取错误信息。
	*************************************************************************/
	int sendPTZOperation(byte * p_bytePTZCommand, int p_nCommandLen);

private:
	//拷贝构造函数
	RemotePTZ(const RemotePTZ& p_objObject)
	{
	}

	//赋值函数
	RemotePTZ& operator = (const RemotePTZ& p_objObject)
	{
		return *this;
	}

private:

	DeviceInfoEx		m_objDeviceInfoEx;			//设备信息

	int					m_nCameraID;				//云台对应的摄像机编号

	int					m_nTransferProtocol;

	int					m_nPTZDeviceId;				//云台ID

	int					m_nPTZProtocol;				//云台协议

	int					m_nCOMId;

	RemoteRS485			*m_pobjRemoteRS485;

	bool				m_bIsOpen;
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_REMOTEPTZ_H_
