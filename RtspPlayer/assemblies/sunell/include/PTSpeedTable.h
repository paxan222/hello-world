#ifndef PT_SPEED_TABLE_H
#define PT_SPEED_TABLE_H

#include <vector>
#include "SNPlatOS.h"
#include "MagnifyPTSpeedParam.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
# error Not included "SNPlatOS.h".
#endif

#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(push, PRAGMA_PACK_CHAR)
#endif

#ifndef WIN32  
#ifndef _PACKED_1_  

#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif
/**********************************************************************/

class SN_DLL_API PTSpeedTable
{
public:
	PTSpeedTable();
	~PTSpeedTable();

	//设置速度类型
	void setSpeedType(const int p_nSpeedType);
	//获取速度类型
	const int getSpeedType() const;
	//设置倍数,PT速度表
	void setMagnifyPTSpeedParamList(std::vector<MagnifyPTSpeedParam> p_objMagnifyPTSpeedParamList);
	//获取倍数,PT速度表
	const std::vector<MagnifyPTSpeedParam> &getMagnifyPTSpeedParamList() const;

	PTSpeedTable& operator =(const PTSpeedTable& p_objPTSpeedTable);

private:
	int m_nSpeedType;			//定制的速度类型,为0就跑默认的速度算法,不为0就跑相应的定制速度表
	std::vector<MagnifyPTSpeedParam> m_objMagnifyPTSpeedParamList;
};

/**********************************************************************/
#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(pop)
#endif
#endif

/**********************************************************************/

#endif