#ifndef _SNAPSHOTTRIGGERPARAMETER_H_
#define _SNAPSHOTTRIGGERPARAMETER_H_

#include "SNPlatOS.h"
#include <vector>

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API SnapshotTriggerParameter
{
public:
	SnapshotTriggerParameter(void);
	~SnapshotTriggerParameter(void);


	/************************************************************************
	*	概述：
	*			设置摄像机的Id号
	*	输入：
	*			p_nCameraId ：摄像机的Id号
	*	输出：
	*			无
	*	返回值：
	*			无
	************************************************************************/
	void setCameraId(int p_nCameraId);

	/************************************************************************
	*	概述：
	*		获取摄像机的Id号
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		摄像机的Id号
	**************************************************************************/
	int getCameraId() const ;

	/************************************************************************
	*	概述：
	*		设置图像质量
	*	输入：
	*		p_Quality	图像质量
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setQuality(int p_nQuality);

	/************************************************************************
	*	概述：
	*		获取图像质量
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		图像质量
	**************************************************************************/
	int getQuality(void) const;

	/************************************************************************
	*	概述：
	*		设置抓拍图片数量
	*	输入：
	*		p_PicNumber	抓拍图片数量
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setPicNumber(int p_nPicNumber);

	/************************************************************************
	*	概述：
	*		获取抓拍图片数量
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		抓拍图片数量
	**************************************************************************/
	int getPicNumber(void) const;

	/************************************************************************
	*	概述：
	*		设置抓拍是否闪光
	*	输入：
	*		p_Spark	是否闪光
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkFlag(bool p_bSparkFlag);

	/************************************************************************
	*	概述：
	*		获取抓拍是否闪光标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光标志
	**************************************************************************/
	bool getSparkFlag(void) const;

	/************************************************************************
	*	概述：
	*		设置抓拍延时
	*	输入：
	*		p_TriggerDelay	抓拍延时
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setTriggerDelay(int p_nTriggerDelay);

	/************************************************************************
	*	概述：
	*		获取抓拍延时
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		抓拍延时
	**************************************************************************/
	int getTriggerDelay(void) const;

	/************************************************************************
	*	概述：
	*		设置抓拍曝光延时
	*	输入：
	*		p_ExposalDelay	曝光延时
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setExposalDelay(int p_nExposalDelay);

	/************************************************************************
	*	概述：
	*		获取抓拍曝光延时
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		曝光延时
	**************************************************************************/
	int getExposalDelay(void) const;

	/************************************************************************
	*	概述：
	*		设置闪光IO通道
	*	输入：
	*		p_SparkIoId	闪光IO通道
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkIOId(int p_nSparkIoId);

	/************************************************************************
	*	概述：
	*		获取闪光IO通道
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光IO通道
	**************************************************************************/
	int getSparkIOId(void) const;

	/************************************************************************
	*	概述：
	*		设置闪光回电时间
	*	输入：
	*		p_SparkReloadTime	闪光回电时间
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkReloadTime(int p_nSparkReloadTime);

	/************************************************************************
	*	概述：
	*		获取闪光回电时间
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光回电时间
	**************************************************************************/
	int getSparkReloadTime(void) const;

	/************************************************************************
	*	概述：
	*		设置抓拍间隔
	*	输入：
	*		p_SnapshotInterval	抓拍间隔
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSnapshotInterval(int p_nSnapshotInterval);

	/************************************************************************
	*	概述：
	*		获取抓拍间隔
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		抓拍间隔
	**************************************************************************/
	int getSnapshotInterval(void) const;

	/************************************************************************
	*	概述：
	*		设置闪光持续时间
	*	输入：
	*		p_SparkDuration	闪光持续时间
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkDuration(int p_nSparkDuration);

	/************************************************************************
	*	概述：
	*		获取闪光持续时间
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光持续时间
	**************************************************************************/
	int getSparkDuration(void) const;

	/************************************************************************
	*	概述：
	*		设置闪光类型
	*	输入：
	*		p_SparkType	闪光类型
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkType(int p_nSparkType);

	/************************************************************************
	*	概述：
	*		获取闪光类型
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光类型
	**************************************************************************/
	int getSparkType(void) const;
	
	/************************************************************************
	*	概述：
	*		设置输入报警端口列表
	*	输入：
	*		p_nInputAlarmPortList	输入报警端口列表
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setAlarmInIdList(const std::vector<int> &p_nAlarmInIdList);

	/************************************************************************
	*	概述：
	*		获取输入报警端口列表
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		输入报警端口列表
	**************************************************************************/
	const std::vector<int> &getAlarmInIdList() const;

	/************************************************************************
	*	概述：
	*		设置闪光灯状态
	*	输入：
	*		p_nSparkState		闪光灯状态
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkState(int p_nSparkState);

	/************************************************************************
	*	概述：
	*		获取闪光灯状态
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光灯状态
	**************************************************************************/
	int getSparkState() const;

	/************************************************************************
	*	概述：
	*		设置gain值
	*	输入：
	*		p_nGain		gain值
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setGain(int p_nGain);

	/************************************************************************
	*	概述：
	*		获取Gain值
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		Gain值
	**************************************************************************/
	int getGain() const;

	/************************************************************************
	*	概述：
	*		设置曝光时间
	*	输入：
	*		p_nShutterTime			曝光时间
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setShutterTime(int p_nShutterTime);

	/************************************************************************
	*	概述：
	*		获取曝光时间
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		曝光时间
	**************************************************************************/
	int getShutterTime() const;

	/************************************************************************
	*	概述：
	*		设置闪光延迟
	*	输入：
	*		p_nSparkDelay			闪光延迟
	*	输出：
	*		无
	*	返回值：
	*		无
	**************************************************************************/
	void setSparkDelay(int p_nSparkDelay);

	/************************************************************************
	*	概述：
	*		获取闪光延迟
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		闪光延迟
	**************************************************************************/
	int getSparkDelay() const;


private:
	int		m_nCameraId;
	int		m_nQuality;							//抓拍质量
	int		m_nPicNumber;						//抓拍张数
	int		m_nTriggerDelay;					//抓拍延时
	int		m_nSnapshotInterval;				//抓拍间隔
	int		m_nGain;							//增益
	int		m_nShutterTime;						//曝光时间
	int		m_nExposalDelay;					//曝光延时（停用）

	bool	m_bSparkFlag;						//闪光灯使能（停用）
	int		m_nSparkState;						//闪光模式			
	int		m_nSparkIOId;						//闪光灯ID
	int		m_nSparkReloadTime;					//闪光灯回电时间
	int		m_nSparkDuration;					//闪光时间
	int		m_nSparkType;						//闪光类型
	int		m_nSparkDelay;						//闪光延迟

	std::vector<int>   m_nAlarmInIdList;		//报警输入IO


}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif//_SNAPSHOTTRIGGERPARAMETER_H_
