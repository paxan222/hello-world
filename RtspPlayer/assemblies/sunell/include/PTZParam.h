#ifndef _PTZPARAM_H_
#define _PTZPARAM_H_

#include "DomainConst.h"
#include <string.h>
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API PTZParam
{
public:
	enum COMParity
	{
		COM_PARITY_NONE				= 0,	//None，无校验
		COM_PARITY_ODD				= 1,	//Odd，奇校验
		COM_PARITY_EVEN				= 2,	//Even，偶校验
		COM_PARITY_MARK				= 3,	//Mark，标记校验
		COM_PARITY_SPACE			= 4		//Space，空格校验
	};

	enum StopBits
	{
		STOPBITS_ONE				= 0,	//1
		STOPBITS_ONEHALF			= 1,	//1.5
		STOPBITS_TWO				= 2		//2
	};


public:
	PTZParam();
	~PTZParam();

	PTZParam(const PTZParam& p_objPTZParam);

public:
	/************************************************************************
	**概述：
	*		设置是否启用云台服务
	**输入：
	*		p_btEnableNTP ：启用云台服务的状态
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setPTZEnableFlag(const bool p_btEnablePTZ);

	/************************************************************************
	**概述：
	*		获取是否启用云台服务标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		是否启用云台服务标识
	**功能：
	*		
	*************************************************************************/
	const bool getPTZEnableFlag() const;

	/************************************************************************
	**概述：
	*		设置云台所对应的摄像机的编号
    **输入：
	*	  p_nCameraId：云台所对应的摄像机的编号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*	   
	************************************************************************/
	void setCameraId(const int p_nCameraId);
	
	/************************************************************************
	**概述：
	*		获取云台所对应的摄像机的编号
    **输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		云台所对应的摄像机的编号
	**功能：
	*	    
	*************************************************************************/
	const int getCameraId() const;

	/************************************************************************
	**概述：
	*		设置云台地址
    **输入：
	*	  p_nDeviceId ：云台云台地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*	    
	*************************************************************************/
	void setPTZDeviceId(const int p_nPTZDeviceId);
	
	/************************************************************************
	**概述：
	*		获取云台地址
    **输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		云台地址
	**功能：
	*	    
	*************************************************************************/
	const int getPTZDeviceId() const;
		
	/************************************************************************
	**概述：
	*		设置云台协议
	**输入：
	*		p_objPTZProtocol：云台协议对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setPTZProtocol(const int p_nPTZProtocol);

	/************************************************************************
	**概述：
	*		获取云台协议
    **输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		云台协议
	**功能：
	*    
	*************************************************************************/
	const int getPTZProtocol() const;

	/************************************************************************
	**概述：
	*		设置串口ID
	**输入：
	*		p_nComId：串口ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setComId(const int p_nComId);

	/************************************************************************
	**概述：
	*		获取串口ID
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		串口ID
	**功能：
	*    
	*************************************************************************/
	const int getComId() const;

	/************************************************************************
	**概述：
	*		设置波特率
	**输入：
	*		p_nBaudRate：波特率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setBaudRate(int p_nBaudRate);

	/************************************************************************
	**概述：
	*		获取波特率
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		波特率
	**功能：
	*    
	*************************************************************************/
	const int getBaudRate() const;

	/************************************************************************
	**概述：
	*		设置数据位
	**输入：
	*		p_nDataBits：数据位
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setDataBits(int p_nDataBits);

	/************************************************************************
	**概述：
	*		获取数据位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		数据位
	**功能：
	*    
	*************************************************************************/
	const int getDataBits() const;

	/************************************************************************
	**概述：
	*		设置停止位
	**输入：
	*		p_nStopBits：停止位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setStopBits(int p_nStopBits);

	/************************************************************************
	**概述：
	*		获取停止位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		停止位
	**功能：
	*    
	*************************************************************************/
	const int getStopBits() const;

	/************************************************************************
	**概述：
	*		设置奇偶校验类型
	**输入：
	*		p_nParity：奇偶校验类型
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setParity(int p_nParity);

	/************************************************************************
	**概述：
	*		获取奇偶校验类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		奇偶校验类型
	**功能：
	*    
	*************************************************************************/
	const int getParity() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objPTZProtocol：云台协议
	**输出：
	*		无
	**返回值：
	*		云台协议
	**功能：
	************************************************************************/
	PTZParam& operator =(const PTZParam& p_objPTZParam);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objPTZParam：PTZParam类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个PTZParam类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const PTZParam& p_objPTZParam) const;

	bool operator < (const PTZParam& p_objPTZParam) const;

private:
	bool	    m_bPTZEnableFlag;											//是否启动云台(true：启动，false：不启动)

	int			m_nCameraId;												//云台对应的摄像机号
	
	int			m_nPTZDeviceId;												//云台设备地址
	
	int			m_nPTZProtocol;												//云台协议

	int			m_nComId;													//云台连接的串口id

	int			m_nBaudRate;												//波特率

	int			m_nDataBits;												//数据位

	int			m_nStopBits;												//停止位

	int			m_nParity;													//奇偶校验
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_PTZPARAM_H_
