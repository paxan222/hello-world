#ifndef _DETECTIONAREAV2_H_
#define _DETECTIONAREAV2_H_

#include "DomainConst.h"
#include "SNPlatOS.h"
#include <vector>

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
# error Not included "SNPlatOS.h".
#endif

#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(push, PRAGMA_PACK_CHAR)
#endif

#ifndef WIN32  
#ifndef _PACKED_1_  

#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif
/**********************************************************************/

class SN_DLL_API DetectionAreaV2
{


public:
	DetectionAreaV2();
	~DetectionAreaV2();

	//拷贝构造函数
	DetectionAreaV2(const DetectionAreaV2 &p_objDetectionAreaV2);

public:
	
	/****************************************************************************
	**概述：
	*		设置侦测区域宽块数
	**输入：
	*		p_nWidthCellNumber：侦测区域宽块数
	**输出：
	*		无
	**返回值：
	*		无 
	**功能：
	*		设置侦测区域宽块数，这里代表把整个画面的宽划分为几块
	*******************************************************************************/
	void setWidthCellNumber(const int p_nWidthCellNumber);

	/****************************************************************************
	**概述：
	*		获得侦测区域宽块数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		侦测区域宽块数
	**功能：
	*		获得侦测区域宽块数，这里代表把整个画面的宽划分为几块
	*******************************************************************************/
	const int getWidthCellNumber() const;


	/****************************************************************************
	**概述：
	*		设置侦测区域高块数
	**输入：
	*		p_nHighCellNumber：侦测区域高块数
	**输出：
	*		无
	**返回值：
	*		无 
	**功能：
	*		设置侦测区域高块数，这里代表把整个画面的高划分为几块	
	*******************************************************************************/
	void setHighCellNumber(const int p_nHighCellNumber);

	/****************************************************************************
	**概述：
	*		获得侦测区域高块数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		侦测区域高块数
	**功能：
	*
	*******************************************************************************/
	const int getHighCellNumber() const;

	/****************************************************************************
	**概述：
	*		设置整个移动侦测区域列表数组
	**输入：
	*		p_pszData：整个移动侦测区域列表数组
	**输出：
	*		无
	**返回值：
	*		若方法成功返回SN_SUCCESS;
	*		返回值小于0则表示失败。
	**功能：
	*		设置整个移动侦测区域列表数组，其中以一位代表一格，0表示不需要侦测，1表示需要侦测， 8位一个字节保存在数组中，
	*		不足八位的以0填充。
	*******************************************************************************/
	int setData(const char* p_pszData,int p_nDataLength);

	/****************************************************************************
	**概述：
	*		获得整个移动侦测区域列表数组
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		整个移动侦测区域列表数组；当未设置侦测区域时，为NULL
	**功能：
	*		获得整个移动侦测区域列表数组，其中以一位代表一格，0表示不需要侦测，1表示需要侦测， 8位一个字节保存在数组中，
	*		不足八位的以0填充。
	*******************************************************************************/
	const char* getData() const;

	/****************************************************************************
	**概述：
	*		获得字节数组长度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		字节数组长度；当未设置侦测区域时，长度为0
	**功能：
	*
	*******************************************************************************/
	const int getDataLength() const;

	/****************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		DetectionAreaV2类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		侦测区域对象的引用
	**功能：
	*		将参数对象的所有属性赋值给另外一个对象，将另外一个对象的引用返回。
	*******************************************************************************/
	DetectionAreaV2 & operator =(const DetectionAreaV2& p_objDetectionAreaV2) ;

	/****************************************************************************
	**概述：
	*			定义“等于”操作符
	**输入：
	*			侦测区域的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		但两个侦测区域的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const DetectionAreaV2& p_objDetectionAreaV2) const;

	bool operator < (const DetectionAreaV2& p_objDetectionAreaV2) const;

private:
	int		m_nWidthCellNumber;								//区域宽块数，这里代表把整个画面的宽划分为几块
	int		m_nHighCellNumber;								//区域高块数，这里代表把整个画面的高划分为几块
	char*   m_pszData;										//整个区域列表数组，其中以一位代表一格，0表示不需要侦测，1表示需要侦测， 8位一个字节保存在数组中，不足八位的以0填充。
	int		m_nDataLen;										//字节数组长度,8的整数倍 >= (区域宽块数 * 区域高块数)

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(pop)
#endif
#endif
/**********************************************************************/

#endif //_DETECTIONAREAV2_H_


