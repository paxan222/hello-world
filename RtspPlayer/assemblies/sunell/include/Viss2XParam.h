#ifndef _VISS2XPARAM_H_
#define _VISS2XPARAM_H_

#include "SNPlatOS.h"
#include "DomainConst.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API Viss2XParam
{
public:
	Viss2XParam();
	~Viss2XParam();


	//拷贝构造函数
	Viss2XParam(const Viss2XParam &p_objViss2XParam);

public:

	/************************************************************************
	**概述：
	*		设置前端设备ID
	**输入：
	*	   p_pszId：前端设备ID
	**输出：
	*		无
	**返回值：
	*		true: 设置成功
	*		false:设置失败
	**功能
	*		设置前端设备ID，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setID(const char* p_pszID);

	/************************************************************************
	**概述：
	*		获取前端设备ID
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		前端设备ID
	**功能
	*		获取前端设备ID
	************************************************************************/
	const char* getID()const;

	/************************************************************************
	**概述：
	*		设置注册用户名
	**输入：
	*	   p_pszName：注册用户名
	**输出：
	*		无
	**返回值：
	*		true: 设置成功
	*		false:设置失败
	**功能
	*		设置注册用户名，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setName(const char* p_pszName);

	/************************************************************************
	**概述：
	*		获取注册用户名
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		注册用户名
	**功能
	*		获取注册用户名
	************************************************************************/
	const char* getName() const;

	/************************************************************************
	**概述：
	*		设置注册密码
	**输入：
	*	   p_pszPassword：注册密码
	**输出：
	*		无
	**返回值：
	*		true:  设置成功
	*		false: 设置失败
	**功能
	*		设置注册密码，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setPassword(const char* p_pszPassword);

	/************************************************************************
	**概述：
	*		获取注册密码
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		注册密码
	**功能
	*		获取注册密码
	************************************************************************/
	const char* getPassword()const;

	/************************************************************************
	**概述：
	*		设置注册地址
	**输入：
	*	   p_pszRegisterIP：注册地址
	**输出：
	*		无
	**返回值：
	*		true: 设置成功
	*		false:设置失败
	**功能
	*		设置注册地址，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setRegisterIP(const char* p_pszRegisterIP);

	/************************************************************************
	**概述：
	*		获取注册地址
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		注册地址
	**功能
	*		获取注册地址
	************************************************************************/
	const char* getRegisterIP() const;

	/************************************************************************
	**概述：
	*		设置注册端口
	**输入：
	*	   p_nRegisterPort：注册端口
	**输出：
	*		无
	**返回值：
	*		注册端口
	**功能
	*		设置注册端口
	************************************************************************/
	void setRegiserPort(const int p_nRegisterPort);

	/************************************************************************
	**概述：
	*		获取注册端口
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		注册端口
	**功能
	*		获取注册端口
	************************************************************************/
	const int getRegisterPort()const;

	/************************************************************************
	**概述：
	*		设置心跳地址
	**输入：
	*	   p_pszHeartBeatIP：心跳地址
	**输出：
	*		无
	**返回值：
	*		true:设置成功
	*		false:设置失败
	**功能
	*		设置心跳地址，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setHeartBeatIP(const char* p_pszHeartBeatIP);

	/************************************************************************
	**概述：
	*		获取心跳地址
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		获取心跳地址
	**功能
	*		获取心跳地址
	************************************************************************/
	const char* getHeartBeatIP() const;

	/************************************************************************
	**概述：
	*		设置心跳端口
	**输入：
	*	   p_nHeartBeatPort：心跳端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置心跳地址
	************************************************************************/
	void setHeartBeatPort(const int p_nHeartBeatPort);

	/************************************************************************
	**概述：
	*		获取心跳端口
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		心跳端口
	**功能
	*		获取心跳端口
	************************************************************************/
	const int getHeartBeatPort()const;

	/************************************************************************
	**概述：
	*		设置告警地址
	**输入：
	*	   p_pszAlarmIP：告警地址
	**输出：
	*		无
	**返回值：
	*		true:设置成功
	*		false:设置失败
	**功能
	*		设置告警地址，设置成功，返回true，设置失败，返回false
	************************************************************************/
	bool setAlarmIP(const char* p_pszAlarmIP);

	/************************************************************************
	**概述：
	*		获取告警地址
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		告警地址
	**功能
	*		获取告警地址
	************************************************************************/
	const char* getAlarmIP()const;

	/************************************************************************
	**概述：
	*		设置告警端口
	**输入：
	*	   p_nAlarmPort：告警端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置告警端口
	************************************************************************/
	void setAlarmPort(const int p_nAlarmPort);

	/************************************************************************
	**概述：
	*		获取告警端口
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		告警端口
	**功能
	*		获取告警端口
	************************************************************************/
	const int getAlarmPort()const;

	/************************************************************************
	**概述：
	*		设置控制端口
	**输入：
	*	   p_nVapPort：控制端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置控制端口
	************************************************************************/
	void setVapPort(const int p_nVapPort);

	/************************************************************************
	**概述：
	*		获取控制端口
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		控制端口
	**功能
	*		获取控制端口
	************************************************************************/
	const int getVapPort()const;

	/************************************************************************
	**概述：
	*		设置视频端口
	**输入：
	*	   p_nVspVideoPort：视频端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置视频端口
	************************************************************************/
	void setVspVideoPort(const int p_nVspVideoPort);

	/************************************************************************
	**概述：
	*		获取视频端口
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		视频端口
	**功能
	*		获取视频端口
	************************************************************************/
	const int getVspVideoPort()const;

	/************************************************************************
	**概述：
	*		设置音频端口
	**输入：
	*	   p_nVspAudioPort：音频端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置音频端口
	************************************************************************/
	void setVspAudioPort(const int p_nVspAudioPort);

	/************************************************************************
	**概述：
	*		获取音频端口
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		音频端口
	**功能
	*		获取音频端口
	************************************************************************/
	const int getVspAudioPort()const;

	/************************************************************************
	**概述：
	*		设置图片上传地址
	**输入：
	*	   p_pszPictureServerIP：图片上传地址
	**输出：
	*		无
	**返回值：
	*		true:设置成功
	*		false:设置失败
	**功能
	*		设置图片上传地址,设置成功,返回true,设置失败,返回false
	************************************************************************/
	bool setPictureServerIP(const char* p_pszPictureServerIP);

	/************************************************************************
	**概述：
	*		获取图片上传地址
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		图片上传地址
	**功能
	*		获取图片上传地址
	************************************************************************/
	const char* getPictureServerIP()const;

	/************************************************************************
	**概述：
	*		设置图片上传端口
	**输入：
	*	   p_nPictureServerPort：图片上传端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置图片上传端口
	************************************************************************/
	void setPictureServerPort(const int p_nPictureServerPort);

	/************************************************************************
	**概述：
	*		获取图片上传端口
	**输入：
	*	   无
	**输出：
	*		无
	**返回值：
	*		图片上传端口
	**功能
	*		获取图片上传端口
	************************************************************************/
	const int getPictureServerPort()const;

	/************************************************************************
	**概述：
	*		设置VAP路径
	**输入：
	*	   p_pszVapUrl：VAP路径
	**输出：
	*		无
	**返回值：
	*		true:设置成功
	*		false:设置失败
	**功能
	*		设置VAP路径,设置成功,返回true,设置失败,返回false
	************************************************************************/
	bool setVapUrl(const char* p_pszVapUrl);

	/************************************************************************
	**概述：
	*		获取VAP路径
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		VAP路径
	**功能
	*		获取VAP路径
	************************************************************************/
	const char* getVapUrl()const;

	/************************************************************************
	**概述：
	*		设置心跳周期（秒）
	**输入：
	*	   p_nHeartBeatTime：心跳周期（秒）
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置心跳周期（秒）
	************************************************************************/
	void setHeartBeatTime(const int p_nHeartBeatTime);

	/************************************************************************
	**概述：
	*		获取心跳周期（秒）
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		心跳周期（秒）
	**功能
	*		获取心跳周期（秒）
	************************************************************************/
	const int getHeartBeatTime()const;

	/************************************************************************
	**概述：
	*		设置注册有效期（小时)
	**输入：
	*	   p_nTimeOut：注册有效期（小时)
	**输出：
	*		无
	**返回值：
	*		无
	**功能
	*		设置注册有效期（小时)
	************************************************************************/
	void setTimeOut(const int p_nTimeOut);

	/************************************************************************
	**概述：
	*		获取注册有效期（小时)
	**输入：
	*	    无
	**输出：
	*		无
	**返回值：
	*		注册有效期（小时)
	**功能
	*		获取注册有效期（小时)
	************************************************************************/
	const int getTimeOut()const;

	Viss2XParam& operator = (const Viss2XParam &p_objProtocolConfigParam);

private:

	char    m_szID[CONST_MAXLENGTH_PROTOCOL_PARAM];						//前端设备ID

	char    m_szName[CONST_MAXLENGTH_PROTOCOL_PARAM];					//注册用户名
	char    m_szPassword[CONST_MAXLENGTH_PROTOCOL_PARAM];				//注册密码

    char    m_szRegisterIP[CONST_MAXLENGTH_PROTOCOL_PARAM];				//注册地址
	int     m_nRegisterPort;											//注册端口

    char    m_szHeartBeatIP[CONST_MAXLENGTH_PROTOCOL_PARAM];			//心跳地址
	int     m_nHeartBeatPort;											//心跳端口

    char    m_szAlarmIP[CONST_MAXLENGTH_PROTOCOL_PARAM];				//告警地址
	int     m_nAlarmPort;												//告警端口

    int     m_nVapPort;													//控制端口
	int     m_nVspVideoPort;											//视频端口
	int     m_nVspAudioPort;											//音频端口

	char    m_szPictureServerIP[CONST_MAXLENGTH_PROTOCOL_PARAM];		//图片上传地址
	int     m_nPictureServerPort;										//图片上传端口

	char    m_szVapUrl[CONST_MAXLENGTH_PROTOCOL_PARAM];					//VAP路径
	int		m_nHeartBeatTime;											//心跳周期（秒）
	int		m_nTimeOut;													//注册有效期（小时）

	
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif//_VISS2XPARAM_H_
