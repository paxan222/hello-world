// NvdcDll.h : NvdcDll DLL 的主头文件
//

#ifndef _NVDCODEC_H_
#define _NVDCODEC_H_

#ifdef __cplusplus 
extern "C" { 
#endif 

#include "SNPlatOS.h"
#include "SN_Struct.h"
#include "SNError.h"

#ifndef byte
	typedef unsigned char byte;
#endif

using namespace NVDC_STRUCT;

namespace NVDC_FUC
{

////////////////////////////////G723.1 编解码//////////////////////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		初始化G7231编解码器。
	**输入：
	*		
	**输出：
	*		hHandle：编解码器句柄。
	**返回值：
	*		执行成功返回0，输出句柄； 错误时返回错误码。
	**功能：
	*		
	************************************************************************/
	long SN_C_API G7231Codec_Init( long* p_hHandle );

	/************************************************************************
	**概述：
	*		释放G7231编解码器环境。
	**输入：
	*		hHandle：编解码器句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		在使用完编解码器后，必须调用该函数释放编解码器
	************************************************************************/
	long SN_C_API G7231Codec_Uninit( long p_hHandle );

	/************************************************************************
	**概述：
	*		编码WAVE_PCM格式音频数据为G723.1码流。
	**输入：
	*		pIn：  Wave格式的数据，其数据格式必须为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	*		nInLen： 被编码的Wave格式的数据长度
	**输出：
	*		pOut：用户用于存放G723.1码流的缓冲
	*		nOutLen：作为输入参数时，指p_szOut缓冲的长度， p_szOut缓冲长度不应小于N*24字节长度，其中N = p_nInLen/480 + 1；
	*	作为输出参数时,返回编码后的长度，小于或等于N*24字节 
	**返回值：
	*		执行成功返回0， 错误时返回错误码。
	**功能：
	*		注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G7231Codec_Encode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_pnOutLen);


	/************************************************************************
	**概述：
	*		解码G723.1码流数据为WAVE_PCM格式音频数据。
	**输入：
	*	pIn：G723.1码流数据
	*	nInLen：G723.1码流数据的长度，可以是N个G723.1编码帧数据长度之和，每帧必须是完整的帧（一个单位的编码帧一般小于等于24字节）
	**输出：
	*		pOut：用户用于存放Wave格式数据的缓冲
	*		nOutLen： 作为输入参数时，指p_szOut缓冲长度；p_szOut缓冲大小不能小于N* 480字节, N代表被解码的编码帧的数量，对应于p_pszIn参数中编码帧个数。
	*	作为输出参数时，返回解码后的长度，N*480字节。 
	*		解码后的数据格式为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G7231Codec_Decode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

/////////////////////////G711 A律编解码/////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		初始化G711 A律编解码器。
	**输入：
	*		
	**输出：
	*		hHandle：编解码器句柄。
	**返回值：
	*		执行成功返回0，输出句柄； 错误时返回错误码。
	**功能：
	*		
	************************************************************************/
	long SN_C_API G711AlawCodec_Init( long* p_hHandle );

	/************************************************************************
	**概述：
	*		释放G711 A律编解码器环境。
	**输入：
	*		hHandle：编解码器句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		在使用完编解码器后，必须调用该函数释放编解码器
	************************************************************************/
	long SN_C_API G711AlawCodec_Uninit( long p_hHandle );

	/************************************************************************
	**概述：
	*		编码WAVE_PCM格式音频数据为G711 A律码流。
	**输入：
	*		pIn：  Wave格式的数据，其数据格式必须为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	*		nInLen： 被编码的Wave格式的数据长度
	**输出：
	*		pOut：用户用于存放G711码流的缓冲
	*		nOutLen：作为输入参数时，指p_szOut缓冲的长度， p_szOut缓冲长度不应小于p_nInLen / 2字节长度
	*				作为输出参数时,返回编码后的长度
	**返回值：
	*		执行成功返回0， 错误时返回错误码。
	**功能：
	*		注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G711AlawCodec_Encode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

	/************************************************************************
	**概述：
	*		解码G711 A律码流数据为WAVE_PCM格式音频数据。
	**输入：
	*	pIn：G711 A律码流数据
	*	nInLen：G711码流数据的长度，可以是N个G711编码帧数据长度之和，每帧必须是完整的帧（一个单位的编码帧）
	**输出：
	*		pOut：用户用于存放Wave格式数据的缓冲
	*		nOutLen： 作为输入参数时，指p_szOut缓冲长度；p_szOut缓冲大小不能小于p_pszIn * 2字节
	*				  作为输出参数时，返回解码后的长度。 
	*		解码后的数据格式为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G711AlawCodec_Decode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

/////////////////////////G711 U律编解码/////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		初始化G711 U律编解码器。
	**输入：
	*		
	**输出：
	*		hHandle：编解码器句柄。
	**返回值：
	*		执行成功返回0，输出句柄； 错误时返回错误码。
	**功能：
	*		
	************************************************************************/
	long SN_C_API G711UlawCodec_Init( long* p_hHandle );

	/************************************************************************
	**概述：
	*		释放G711 U律编解码器环境。
	**输入：
	*		hHandle：编解码器句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		在使用完编解码器后，必须调用该函数释放编解码器
	************************************************************************/
	long SN_C_API G711UlawCodec_Uninit( long p_hHandle );

	/************************************************************************
	**概述：
	*		编码WAVE_PCM格式音频数据为G711 U律码流。
	**输入：
	*		pIn：  Wave格式的数据，其数据格式必须为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	*		nInLen： 被编码的Wave格式的数据长度
	**输出：
	*		pOut：用户用于存放G711码流的缓冲
	*		nOutLen：作为输入参数时，指p_szOut缓冲的长度， p_szOut缓冲长度不应小于p_nInLen / 2字节长度
	*				作为输出参数时,返回编码后的长度
	**返回值：
	*		执行成功返回0， 错误时返回错误码。
	**功能：
	*		注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G711UlawCodec_Encode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

	/************************************************************************
	**概述：
	*		解码G711 U律码流数据为WAVE_PCM格式音频数据。
	**输入：
	*	pIn：G711 U律码流数据
	*	nInLen：G711码流数据的长度，可以是N个G711编码帧数据长度之和，每帧必须是完整的帧（一个单位的编码帧）
	**输出：
	*		pOut：用户用于存放Wave格式数据的缓冲
	*		nOutLen： 作为输入参数时，指p_szOut缓冲长度；p_szOut缓冲大小不能小于p_pszIn * 2字节
	*				  作为输出参数时，返回解码后的长度。 
	*		解码后的数据格式为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API G711UlawCodec_Decode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

////////////////////////////////AMR 编解码//////////////////////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		初始化AMR编解码器。
	**输入：
	*		
	**输出：
	*		hHandle：编解码器句柄。
	**返回值：
	*		执行成功返回0，输出句柄； 错误时返回错误码。
	**功能：
	*		
	************************************************************************/
	long SN_C_API AMRCodec_Init( long* p_hHandle );

	/************************************************************************
	**概述：
	*		释放AMR编解码器环境。
	**输入：
	*		hHandle：编解码器句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		在使用完编解码器后，必须调用该函数释放编解码器
	************************************************************************/
	long SN_C_API AMRCodec_Uninit( long p_hHandle );

	/************************************************************************
	**概述：
	*		编码WAVE_PCM格式音频数据为AMR码流。
	**输入：
	*		pIn：  Wave格式的数据，其数据格式必须为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	*		nInLen： 被编码的Wave格式的数据长度
	**输出：
	*		pOut：用户用于存放AMR码流的缓冲
	*		nOutLen：作为输入参数时，指p_szOut缓冲的长度， p_szOut缓冲长度不应小于N*18字节长度，其中N = p_nInLen/320 + 1；
	*	作为输出参数时,返回编码后的长度，小于或等于N*18字节 
	**返回值：
	*		执行成功返回0， 错误时返回错误码。
	**功能：
	*		注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API AMRCodec_Encode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

	/************************************************************************
	**概述：
	*		解码AMR码流数据为WAVE_PCM格式音频数据。
	**输入：
	*	pIn：AMR码流数据
	*	nInLen：AMR码流数据的长度，可以是N个G723.1编码帧数据长度之和，每帧必须是完整的帧（一个单位的编码帧一般小于等于18字节）
	**输出：
	*		pOut：用户用于存放Wave格式数据的缓冲
	*		nOutLen： 作为输入参数时，指p_szOut缓冲长度；p_szOut缓冲大小不能小于N* 320字节, N代表被解码的编码帧的数量，对应于p_pszIn参数中编码帧个数。
	*	作为输出参数时，返回解码后的长度，N*320字节。 
	*		解码后的数据格式为：
	*				SamplesPerSec = 8000;			//采样率
	*				BitPerSample = 16;				//音频分辨率
	*				FormatTag = WAVE_FORMAT_PCM;	//音频采样格式
	*				Channels = 1;					//音频通道数
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	注当错误时，用户应该丢弃该编码数据。
	************************************************************************/
	long SN_C_API AMRCodec_Decode( long p_hHandle, const char* p_pszIn, const long p_nInLen, char* p_pszOut, long* p_nOutLen);

} //namespace
#ifdef __cplusplus 
}
#endif //__cplusplus 

#endif //_NVDCODEC_H_
