#ifndef _PTZABILITY_
#define _PTZABILITY_

#include "PTZProtocol.h"
#include "SNPlatOS.h"
#include <vector>
using namespace std;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

/************************************************************************
*	概述：PTZ能力信息
*	主要包含以下信息：
*		是否支持对讲功能，音频输入方式列表，音频编码类型列表，音频解码类型列表。
************************************************************************/
class SN_DLL_API PTZAbility
{
public:
	PTZAbility(void);
	~PTZAbility(void);

public:
	/************************************************************************
	*	概述：设置内置PTZ存在标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		内置PTZ存在标志	true表示存在内置PTZ，false表示不存在内置PTZ。
	*************************************************************************/
	void setInternalPTZFlag(const bool p_bInternalPTZFlag);

	/************************************************************************
	*	概述：获取内置PTZ存在标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		内置PTZ存在标志	true表示存在内置PTZ，false表示不存在内置PTZ。
	*************************************************************************/
	const bool getInternalPTZFlag() const;

	/************************************************************************
	*	概述：设置3D定位标志
	*	输入：
	*		p_nFlag：3D定位支持标志	true表示支持3D定位，false表示不支持。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setThreeDimensionalPositioningFlag(const bool p_nFlag);

	/************************************************************************
	*	概述：获取3D定位标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		3D定位支持标志	true表示支持3D定位，false表示不支持。
	*************************************************************************/
	const bool getThreeDimensionalPositioningFlag() const;

	/************************************************************************
	*	概述：设置支持的PTZ协议列表
	*	输入：
	*		p_objPTZProtocolList	PTZ协议列表
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setPTZProtocolList(const vector<PTZProtocol> &p_objPTZProtocolList);

	/************************************************************************
	*	概述：获取支持的PTZ协议列表
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		PTZ协议列表
	*************************************************************************/
	const vector<PTZProtocol> &getPTZProtocolList() const;



	/************************************************************************
	*	概述：设置预置点的最大支持个数
	*	输入：
	*		p_nCount：预置点的最大支持个数。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setMaxPresetCount(const int p_nCount);

	/************************************************************************
	*	概述：获取预置点的最大支持个数
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		预置点的最大支持个数。
	*************************************************************************/
	const int getMaxPresetCount() const;


	/************************************************************************
	*	概述：设置扫描的最大支持条数
	*	输入：
	*		p_nCount：扫描的最大支持条数。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setMaxScanCount(const int p_nCount);

	/************************************************************************
	*	概述：获取扫描的最大支持条数
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		扫描的最大支持条数。
	*************************************************************************/
	const int getMaxScanCount() const;


	/************************************************************************
	*	概述：设置自学习的最大支持条数
	*	输入：
	*		p_nCount：自学习的最大支持条数。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setMaxAutoStudyCount(const int p_nCount);

	/************************************************************************
	*	概述：获取自学习的最大支持条数
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		自学习的最大支持条数。
	*************************************************************************/
	const int getMaxAutoStudyCount() const;


	/************************************************************************
	*	概述：设置巡游的最大支持条数
	*	输入：
	*		p_nCount：巡游的最大支持条数
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setMaxTourCount(const int p_nCount);

	/************************************************************************
	*	概述：获取巡游的最大支持条数
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		巡游的最大支持条数。
	*************************************************************************/
	const int getMaxTourCount() const;

	/************************************************************************
	*	概述：设置是否支持雨刷
	*	输入：
	*		p_nFlag：是否支持雨刷标志	true表示支持，false表示不支持。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setBrushFlag(const bool p_nFlag);

	/************************************************************************
	*	概述：获取是否支持雨刷标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		是否支持雨刷	true表示支持，false表示不支持。
	*************************************************************************/
	const bool getBrushFlag() const;


	/************************************************************************
	*	概述：设置是否支持灯标志
	*	输入：
	*		p_nFlag：是否支持灯标志	true表示支持，false表示不支持。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setLightFlag(const bool p_nFlag);

	/************************************************************************
	*	概述：获取是否支持灯标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		是否支持灯标志	true表示支持，false表示不支持。
	*************************************************************************/
	const bool getLightFlag() const;


	/************************************************************************
	*	概述：设置是否支持红外灯标志
	*	输入：
	*		p_nFlag：是否支持红外灯标志	true表示支持，false表示不支持。
	*	输出：
	*		无
	*	返回值：
	*		无
	*************************************************************************/
	void setInfraredFlag(const bool p_nFlag);

	/************************************************************************
	*	概述：获取是否支持红外灯标志
	*	输入：
	*		无
	*	输出：
	*		无
	*	返回值：
	*		是否支持红外灯标志	true表示支持，false表示不支持。
	*************************************************************************/
	const bool getInfraredFlag() const;

private:
	bool					m_bInternalPTZFlag;					//内置PTZ标志	true表示支持内置PTZ，false表示不支持。
	bool					m_bThreeDimensionalPositioningFlag; //3D定位标志，true表示支持3D定位，false表示不支持。
	vector<PTZProtocol>		m_objPTZProtocolList;				//支持的PTZ协议列表

	int						m_nMaxPresetCount;					//最大支持预置点个数
	int						m_nMaxScanCount;					//最大支持扫描条数
	int						m_nMaxAutoStudyCount;				//最大支持自学习条数
	int						m_nMaxTourCount;					//最大支持巡游条数

	bool					m_bBrushFlag;						//是否支持雨刷标志	true表示支持，false表示不支持。
	bool					m_bLightFlag;						//是否支持灯标志	true表示支持，false表示不支持。
	bool					m_bInfraredFlag;					//是否支持红外灯标志	true表示支持，false表示不支持。

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif //_AUDIO_ABILITY_
