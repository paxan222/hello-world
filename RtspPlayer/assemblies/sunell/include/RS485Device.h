#ifndef _RS485DEVICE_H_
#define _RS485DEVICE_H_

#include "DomainConst.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API RS485Device
{
public:
	enum FlowControl
	{
		FLOWCONTROL_NONE			= 0,	//无
		FLOWCONTROL_SOFT			= 1,	//软流控
		FLOWCONTROL_HARD			= 2		//硬流控
	};
	enum COMParity
	{
		COM_PARITY_NONE				= 0,	//无校验
		COM_PARITY_ODD				= 1,	//奇校验
		COM_PARITY_EVEN				= 2,	//偶校验
		COM_PARITY_MARK				= 3,	//标记校验
		COM_PARITY_SPACE			= 4		//空格校验
	};

	enum StopBits
	{
		STOPBITS_ONE				= 0,	//1
		STOPBITS_ONEHALF			= 1,	//1.5
		STOPBITS_TWO				= 2		//2
	};

public:
	RS485Device();
	~RS485Device();

	//拷贝构造函数
	RS485Device(const RS485Device& p_objRS485Device);

public:
	/************************************************************************
	**概述：
	*		设置串口ID
	**输入：
	*		p_nComId：串口ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setComId(const int p_nComId);

	/************************************************************************
	**概述：
	*		获取串口ID
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		串口ID
	**功能：
	*    
	*************************************************************************/
	const int getComId() const;

	/************************************************************************
	**概述：
	*		设置串口名称
	**输入：
	*		p_pszComName：串口ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	bool setComName(const char* p_pszComName);

	/************************************************************************
	**概述：
	*		获取串口名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		串口名称
	**功能：
	*    
	*************************************************************************/
	const char* getComName() const ;

	/************************************************************************
	**概述：
	*		设置波特率
	**输入：
	*		p_nBaudRate：波特率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setBaudRate(const int p_nBaudRate);

	/************************************************************************
	**概述：
	*		获取波特率
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		波特率
	**功能：
	*    
	*************************************************************************/
	const int getBaudRate() const;

	/************************************************************************
	**概述：
	*		设置数据位
	**输入：
	*		p_nDataBits：数据位
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setDataBits(const int p_nDataBits);

	/************************************************************************
	**概述：
	*		获取数据位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		数据位
	**功能：
	*    
	*************************************************************************/
	const int getDataBits() const;

	/************************************************************************
	**概述：
	*		设置停止位
	**输入：
	*		p_nStopBits：停止位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setStopBits(const int p_nStopBits);

	/************************************************************************
	**概述：
	*		获取停止位
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		停止位
	**功能：
	*    
	*************************************************************************/
	const int getStopBits() const;

	/************************************************************************
	**概述：
	*		设置奇偶校验类型
	**输入：
	*		p_nParity：奇偶校验类型
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setParity(const int p_nParity);

	/************************************************************************
	**概述：
	*		获取奇偶校验类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		奇偶校验类型
	**功能：
	*    
	*************************************************************************/
	const int getParity() const;


	/************************************************************************
	**概述：
	*		设置流控
	**输入：
	*		p_nFlowControl：流控
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	void setFlowControl(const int p_nFlowControl);

	/************************************************************************
	**概述：
	*		获取流控
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		流控
	**功能：
	*    
	*************************************************************************/
	const int getFlowControl() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objRS485Device：RS385串口参数信息
	**输出：
	*		无
	**返回值：
	*		RS385串口参数信息
	**功能：
	************************************************************************/
	RS485Device& operator =(const RS485Device& p_objRS485Device);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objRS485Device：RS485Device类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true ：相等
	*		false：不相等
	**功能：
	*		两个RS485Device类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const RS485Device& p_objRS485Device) const;
	bool operator < (const RS485Device& p_objRS485Device) const ;

private:
	int		m_nComId;									//串口ID

	char	m_szComName[CONST_LENGTH_RS485_NAME + 1];	//串口自定义名称

	int		m_nBaudRate;								//波特率

	int		m_nDataBits;								//数据位
	
	int		m_nStopBits;								//停止位
	
	int		m_nParity;									//奇偶校验

	int		m_nFlowControl;								//流控

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_RS485DEVICE_H_

