#ifndef _VIDEORESOLUTIONABILITY_H_
#define _VIDEORESOLUTIONABILITY_H_

#include "SNPlatOS.h"
#include "VideoResolution.h"
#include <vector>
using namespace std;

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

/************************************************************************
**概述：编码器能力信息类
*	包含：视频格式,最大码率,最小码率,最大码率,最小码率,最大视频质量值,最小视频质量值,码率类型列表
************************************************************************/

class SN_DLL_API VideoResolutionAbility
{
public:
	VideoResolutionAbility(void);
	~VideoResolutionAbility(void);

	VideoResolutionAbility(const VideoResolutionAbility &p_VideoResolutionAbility);

public:
	/************************************************************************
	**概述：设置视频分辨率
	**输入：
	*		p_objVideoResolution：视频分辨率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setVideoResolution(const VideoResolution &  p_objVideoResolution);

	/************************************************************************
	**概述：获取视频分辨率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频分辨率
	*************************************************************************/
	const VideoResolution & getVideoResolution() const;


	/************************************************************************
	**概述：设置最大帧率
	**输入：
	*		p_nMaxFrameRate		最大帧率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxFrameRate(int p_nMaxFrameRate);

	/************************************************************************
	**概述：获取最大帧率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大帧率
	*************************************************************************/
	int getMaxFrameRate() const;


	/************************************************************************
	**概述：设置最小帧率
	**输入：
	*		p_nMinFrameRate		最小帧率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinFrameRate(int p_nMinFrameRate);

	/************************************************************************
	**概述：获取最小帧率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小帧率
	*************************************************************************/
	int getMinFrameRate() const;


	/************************************************************************
	**概述：设置最大码率
	**输入：
	*		p_nMaxBitRate		最大码率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxBitRate(int p_nMaxBitRate);

	/************************************************************************
	**概述：获取最大码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大码率
	*************************************************************************/
	int getMaxBitRate() const;


	/************************************************************************
	**概述：设置最小码率
	**输入：
	*		p_nMinBitRate		最小码率
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinBitRate(int p_nMinBitRate);

	/************************************************************************
	**概述：获取最小码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小码率
	*************************************************************************/
	int getMinBitRate() const;


	/************************************************************************
	**概述：最大视频质量值
	**输入：
	*		p_nMaxQuality		最大视频质量值
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxQuality(int p_nMaxQuality);

	/************************************************************************
	**概述：获取最大视频质量值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大视频质量值
	*************************************************************************/
	int getMaxQuality() const;


	/************************************************************************
	**概述：设置最小视频质量值
	**输入：
	*		p_nMinQuality		最小视频质量值
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinQuality(int p_nMinQuality);

	/************************************************************************
	**概述：获取最小视频质量值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小视频质量值
	*************************************************************************/
	int getMinQuality() const;


	/************************************************************************
	**概述：设置最大I帧间隔
	**输入：
	*		p_nMaxIFrameInterval		最大I帧间隔
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMaxIFrameInterval(int p_nMaxIFrameInterval);

	/************************************************************************
	**概述：获取最大I帧间隔
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最大I帧间隔
	*************************************************************************/
	int getMaxIFrameInterval() const;


	/************************************************************************
	**概述：设置最小I帧间隔
	**输入：
	*		p_nMinIFrameInterval		最小I帧间隔
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setMinIFrameInterval(int p_nMinIFrameInterval);

	/************************************************************************
	**概述：获取最小I帧间隔
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		最小I帧间隔
	*************************************************************************/
	int getMinIFrameInterval() const;


	/************************************************************************
	**概述：
	*		设置I帧的步长单位
	**输入：
	*		I帧间隔单位
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	***************************************************************************/
	void setIFrameIntervalUnit(const int& p_nIFrameIntervalUnit);

	/************************************************************************
	**概述：
	*		获取I帧的步长单位
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		I帧间隔
	**功能：
	*
	***************************************************************************/
	int getIFrameIntervalUnit() const;

	/************************************************************************
	**概述：设置码率类型列表
	**输入：
	*		p_objBitRateTypeList：码率类型列表
	**输出：
	*		无
	**返回值：
	*		无
	*************************************************************************/
	void setBitRateTypeList(const std::vector<int> & p_objBitRateTypeList);

	/************************************************************************
	**概述：获取码率类型列表
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		码率类型列表
	*************************************************************************/
	const std::vector<int> &getBitRateTypeList() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objVideoResolutionAbility ：视频分辨率能力对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	VideoResolutionAbility& operator = (const VideoResolutionAbility &p_objVideoResolutionAbility);

private:
	VideoResolution			m_objVideoResolution;			//视频分辨率
	int						m_nMaxFrameRate;				//最大帧率
	int						m_nMinFrameRate;				//最小帧率
	int						m_nMaxBitRate;					//最大码率
	int						m_nMinBitRate;					//最小码率
	int						m_nMaxQuality;					//最大视频质量值
	int						m_nMinQuality;					//最小视频质量值
	int						m_nMaxIFrameInterval;			//最大I帧的步长
	int						m_nMinIFrameInterval;			//最小I帧的步长
	std::vector<int>		m_objBitRateTypeList;			//码率类型列表
	int						m_nIFrameIntervalUnit;			//I帧的步长单位    1,//单位为秒  2//单位为帧

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_ENCODER_ABILITY_
