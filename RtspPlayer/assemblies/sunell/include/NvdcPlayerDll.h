// NvdcPlayerDll.h : NvdcPlayerDll DLL 的主头文件
//
#ifndef _NVDC_PLAYERDLL_H_
#define _NVDC_PLAYERDLL_H_


#include "windows.h"
#include "SNStruct.h"
#include "SNPlatOS.h"
#include "SN_Struct.h"
#include "SNError.h"

using namespace NVDC_STRUCT;

#ifdef __cplusplus 
extern "C" { 
#endif 

	/************************************************************************
	**概述：
	*		设置字符集，
	**输入：
	*		p_nCharSet 字符集
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	*************************************************************************/
	long SN_C_API NvdcPlayer_SetCharSet( const int p_nCharSet); //0:GB2312; 1:UTF8

	///////////////////////////////////////////////////////////////////////////////////////////
	//						共有函数:初始化和销毁函数
	//////////////////////////////////////////////////////////////////////////////////////////

	/************************************************************************
	**概述：
	*		初始化解码库。
	**输入：
	*		p_hWnd：DirectDraw窗口句柄，有的解码库需要这个参数，为保持兼容而设置该参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		除Player_GetVersion,其它接口调用之前
	*	必须先通过Player_Initial对解码库进行初始化。
	************************************************************************/
	long SN_C_API Player_Initial( long p_hWnd );

	/************************************************************************
	**概述：
	*		释放解码器库。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		释放解码器库。
	************************************************************************/
	long SN_C_API Player_Free();

	/************************************************************************
	**概述：
	*		判断句柄是否有效。
	**输入：
	*		p_hHandle：句柄。
	**输出：
	*		无。
	**返回值：
	*		true ：句柄有效
	*		false：句柄无效
	**功能：
	*
	************************************************************************/
	bool SN_C_API Player_Is_Handle_Valid(const long p_hHandle );

	///////////////////////////////////////////////////////////////////////////////////////////
	//						流方式播放专有函数
	//////////////////////////////////////////////////////////////////////////////////////////


	/************************************************************************
	**概述：
	*		以视频流播放模式创建一个解码器。
	**输入：
	*		pStreamHead：流播放的视频头数据所在位置。视频头数据即视频服务器协议
	*	中的厂商专有数据包。
	*		lSize：流播放的头数据大小。
	**输出：
	*		hHandle：由解码库生成，称为播放句柄，用来对各个播放实例进行标识，
	*	客户程序通过播放句柄操作播放实例来完成对播放的控制。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		以视频流播放模式创建一个解码器。
	************************************************************************/
	long SN_C_API Player_OpenStream( long* p_hHandle, const unsigned char* p_pStreamHead = NULL, long p_nSize = 0 );

	/************************************************************************
	**概述：
	*		关闭视频流播放模式的解码器。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		关闭由Player_Stream的建立的播放句柄。
	************************************************************************/
	long SN_C_API Player_CloseStream( long p_hHandle );

	/************************************************************************
	**概述：
	*		设置用时间戳播放视频，播放器默认设置为false
	**输入：
	*		hHandle：播放句柄
	*		bUseFlag:当bUseFlag=true,使用时间戳，当bUseFlag=false,取消使用时间戳
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		当设置为true,播放器将采用视频的显示时间戳来显示视频,播放器将自动丢弃过期的视频,
	*	此时也可以通过Player_SetSpeed方法调节播放速度;当设置为false,播放器将不采用时间戳播放视频，
	*	播放器将尽力播放视频缓冲中的帧。
	*		此方法只对流方式播放有效，对文件方式播放无效。
	************************************************************************/
	long SN_C_API Player_SetUseTimeStamp( long p_hHandle, const bool p_bUseFlag );

	/************************************************************************
	**概述：
	*		设置播放缓冲大小(此接口功能已废弃!  被setBufDelayTime代替。)
	**输入：
	*		hHandle：播放句柄
	*		p_nSecSize, 以毫秒(ms)为单位 必须在0秒-最大5000毫秒缓冲。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	注：播放缓冲越大，播放越平滑，但延时将增大，当为0时，无论是否用时间戳，视频将立即被播放
	************************************************************************/
	long SN_C_API Player_SetPlayBufferSize(long p_hHandle, const long p_nSecSize);

	long SN_C_API Player_SetInputQueueMaxSize(long p_hHandle, const long p_nQueueSize);

	/************************************************************************
	**概述：
	*		设置实时播放标志，系统默认设置为true。当采用流方式播放文件时需要设置为false。
	**输入：
	*		p_bFlag: true,设置流方式播放的是实时流；
	*                false,设置流方式播放的是文件流
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	long SN_C_API Player_SetLivePlayFlag(long p_hHandle, const bool p_bFlag);

	/************************************************************************
	**概述：
	*		设置最大延迟时间
	**输入：
	*		p_nMaxDelayTime:最大延迟时间，单位毫秒，默认值是100ms
	**输出：
	*		无。
	**返回值：
	*		无
	**功能：
	*       网络环境差时，最大延迟时间越大，对平滑播放越好；
	*       最大延迟时间越小，对播放实时性越好。
	************************************************************************/
	long SN_C_API Player_SetMaxDelayTime(long p_hHandle, const long p_nMaxDelayTime);

	/************************************************************************
	**概述：
	*		查询最大延迟时间
	**输入：
	*		无。
	**输出：
	*		p_nMaxDelayTime:最大延迟时间，单位毫秒，默认值是100ms
	**返回值：
	*		SN_SUCCESS：打开成功
	*		其他：		打开失败	
	**功能：
	************************************************************************/
	long SN_C_API Player_GetMaxDelayTime(long p_hHandle, long* p_nMaxDelayTime);


	/************************************************************************
	**概述：
	*		获得播放缓冲状态，
	**输入：
	*		hHandle：播放句柄。
	*		pState:  传出参数,返回播放缓冲状态，值为true,表示缓冲满，false缓冲未满
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		用户可以通过此状态，判断播放缓冲是否满。
	*	当缓冲满时，用户不应当调用Player_InputTSData或者Player_InputTSAVFrame或者Player_InputAVFrame或 Player_Input_TS_STAVFrame方法输入数据。
	*	若用户继续输入数据流，播放器会自动控制播放缓冲，并强行丢弃缓冲最早的一帧数据，并放入当前数据。
	*		此方法只对流播放有效，对文件播放无效。
	************************************************************************/
	long SN_C_API Player_GetPlayBufferState( long p_hHandle, bool* p_bState );

	/************************************************************************
	**概述：
	*		输入TS音视频流。数据必须是以0X47开始的TS流，lDataLen长度必须是188的倍数
	**输入：
	*		hHandle：播放句柄。
	*		pTSData：TS数据流。
	*		lDataLen：流数据大小，单位为字节。
	**输出：
	*		lConsumedLen：接收已经消费的数据长度， (lDataLen - lConsumedLen)的差值为未消费的数据。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放.
	*	    用户可以调用Player_GetPlayBufferState获取队列满状态。
	************************************************************************/
	long SN_C_API	Player_InputTSData( long p_hHandle, const unsigned char* p_pszTSData, const long p_nDataLen, long* p_nConsumedLen );

	/************************************************************************
	**概述：
	*		输入TS音视频流
	**输入：
	*		hHandle：播放句柄。
	*		pTSData：TS数据流。
	*		lDataLen：流数据大小，单位为字节。
	**输出：
	*		
	**返回值：
	*		执行成功返回0，
	*		执行错误时返回错误码，需要重新塞入数据。
	**功能：
	*		此方法仅适用于流方式播放.
	*	    用户可以调用Player_GetPlayBufferState获取队列满状态。
	************************************************************************/
	long SN_C_API	Player_InputTSDataEx( long p_hHandle, const unsigned char* p_pszTSData, const long p_nDataLen);


	/************************************************************************
	**概述：
	*		输入一帧TS音视频帧, 0X47开始的TS流。
	**输入：
	*		hHandle：播放句柄。
	*		pTSAVFrameData：一帧TS流的音视频帧。pTSAVFrameData是一个MPEG2 TS打包的完整视频帧或音频帧
	*		lTSAVFrameDataLen：该帧的流数据大小，单位为字节。
	**输出：
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放.
	*	    用户可以调用Player_GetPlayBufferState获取队列满状态。
	************************************************************************/
	long SN_C_API Player_InputTSAVFrame( long p_hHandle, const unsigned char* p_pszTSAVFrameData, const long p_nTSAVFrameDataLen );


	/************************************************************************
	**概述：
	*		输入一帧音视频数帧, 0X47开始的TS流。
	**输入：
	*		pSTAVFrameData：每一个pSTAVFrameData是一个MPEG2 TS打包的完整视频帧或音频帧。
			其中ST_AVFrameData::StreamFormat描述了流的类型，即StreamFormat::TS_STREAM
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放TS 流数据。
	*	    用户可以调用 Player_getPlayBufferState获取队列满状态。
	*		
	************************************************************************/
	long SN_C_API Player_Input_TS_STAVFrame( long p_hHandle, const ST_AVFrameData* p_pSTAVFrameData );

	/************************************************************************
	**概述：
	*		输入一帧PS音视频帧。
	**输入：
	*		hHandle：播放句柄。
	*		pPSAVFrameData：一帧PS流的音视频帧。pPSAVFrameData是一个MPEG2 PS打包的完整视频帧或音频帧
	*		lPSAVFrameDataLen：该帧的流数据大小，单位为字节。
	**输出：
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放.
	*	    用户可以调用Player_GetPlayBufferState获取队列满状态。
	************************************************************************/
	long SN_C_API Player_InputPSData( long p_hHandle, const unsigned char* p_pszPSAVFrameData, const long p_nPSAVFrameDataLen );


	/************************************************************************
	**概述：
	*		输入一帧音视频数帧。
	**输入：
	*		pSTAVFrameData：每一个pSTAVFrameData是一个MPEG2 PS打包的完整视频帧或音频帧。
			其中ST_AVFrameData::StreamFormat描述了流的类型，即StreamFormat::PS_STREAM
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放PS 流数据。
	*	    用户可以调用 Player_getPlayBufferState获取队列满状态。
	*		
	************************************************************************/
	long SN_C_API Player_InputPSAVFrame( long p_hHandle, const ST_AVFrameData* p_pSTAVFrameData );



	/************************************************************************
	**概述：
	*		输入一帧原始的H.264编码视频帧或音频帧。
	**输入：
	*		pSTAVFrameData：每一个pSTAVFrameData是一个完整视频帧或音频帧。
			其中ST_AVFrameData::StreamFormat描述了流的类型，即StreamFormat::ES_STREAM
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		此方法仅适用于流方式播放原始流数据。
	*	    用户可以调用 Player_getPlayBufferState获取队列满状态。
	*		
	************************************************************************/
	long SN_C_API Player_InputAVFrame( long p_hHandle, const ST_AVFrameData* p_pSTAVFrameData );

	/************************************************************************
	**概述：
	*		获得当前播放音视频帧的时间戳
	**输入：
	*		无
	**输出：
	*		p_nTimeStamp：当前播放帧时间戳，以微妙为单位（时间戳最大值：95443717689）。
	*						p_nTimeStamp返回-1则未有音视频播放，返回的时间戳无效。
	**返回值：
	*		>0  ： 获取成功。
	*		其他： 获取失败。
	**注：
	*		此函数只在播放TS流数据时有效，且获取到时间戳可能出现翻转，即当前帧的时间戳比之前取的时间戳小。
	************************************************************************/
	 long SN_C_API Player_GetCurrentAVFrameTimeStamp(long p_hHandle, INT64* p_nTimeStamp);

	/************************************************************************
	**概述：
	*		重置播放器，清空播放缓存
	**输入：
	*		无
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		
	************************************************************************/
	long SN_C_API Player_Reset(long p_hHandle);


    	/************************************************************************
	**概述：
	*		获取播放器空间总大小，单位字节。
	**输入：
	*		无
	**输出：
	*		p_nBufMaxSize:播放器空间总大小
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		
	************************************************************************/
	long SN_C_API Player_GetBufMaxSize(long p_hHandle,long* p_nBufMaxSize);

	/************************************************************************
	**概述：
	*		获取播放器缓冲区剩余数据空间总大小，单位字节。
	**输入：
	*		无
	**输出：
	*		p_nLeftDataSize:播放器缓冲区剩余数据空间总大小
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		
	************************************************************************/
	long SN_C_API Player_GetLeftDataSize(long p_hHandle,long* p_nLeftDataSize);


	///////////////////////////////////////////////////////////////////////////////////////////
	//						文件方式播放专有函数
	//////////////////////////////////////////////////////////////////////////////////////////
	/************************************************************************
	***概述：
	*		以文件播放模式创建一个解码器。
	***输入：
	*		sFileName：要播放的文件名，绝对路径。
	***输出：
	*		hHandle：由解码库生成，称为播放句柄，用来对各个播放实例进行标识，客户程序通过播放句柄
	*	操作播放实例来完成对播放的控制.
	***返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		以文件播放模式创建一个解码器。客户程序可通过Player_SetMessage设置文件结束消息来获得文
	*	件播放结束的时机。
	************************************************************************/
	long SN_C_API Player_OpenFile( long* p_hHandle, const char* p_pszFileName );

	/************************************************************************
	**概述：
	*		关闭文件播放模式的解码器。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		关闭由Player_OpenFile的建立的播放句柄。
	************************************************************************/
	long SN_C_API  Player_CloseFile( long p_hHandle );

	/************************************************************************
	**概述：
	*		获得视频文件的时间长度。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		lTimeLength：输出参数，返回视频文件的时间长度。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获得视频文件的时间长度，单位为秒。
	************************************************************************/
	long SN_C_API Player_GetFileTime( long p_hHandle, long* p_nTimeLength );
	long SN_C_API Player_GetFileTimeV2( long p_hHandle, float* p_nTimeLength );

	/************************************************************************
	**概述：
	*		获取文件中的总帧数。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		pFrames: 传出参数，当前文件中包含的总帧数。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取文件中的总帧数。
	************************************************************************/
	long SN_C_API Player_GetFileTotalFrames( long p_hHandle, long* p_nFrames );

	/************************************************************************
	**概述：
	*		获取已经播放的视频帧数。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		pFrames 传出参数，返回当前已经播放的视频帧数。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取已经播放的视频帧数。
	************************************************************************/
	long SN_C_API Player_GetPlayedFrames( long p_hHandle, long* p_nFrames );

	/************************************************************************
	*概述:
	*		按照帧的索引号设置当前播放位置。
	*输入：
	*		p_nFrameNum: 要跳转到的帧号。
	*输出：
	*		无。
	*返回值：
	*		执行成功返回0，错误时返回错误码。
	*功能：
	*		按照帧的索引号设置当前播放位置。
	************************************************************************/
	long SN_C_API Player_SetCurrentFrameNum( long p_hHandle,long p_nFrameNum );

	/************************************************************************
	**概述：
	*		设置播放位置。
	**输入：
	*		hHandle：播放句柄。
	*		lSecond：播放位置（秒）。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	
	************************************************************************/
	long SN_C_API Player_SetPlayTime( long p_hHandle, long p_nSecond );
	long SN_C_API Player_SetPlayTimeV2( long p_hHandle, float p_nSecond );

	/************************************************************************
	**概述：
	*		获取播放位置。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		lSecond：传出参数，返回播放位置（秒）。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取播放位置。
	************************************************************************/
	long SN_C_API Player_GetPlayTime( long p_hHandle, long* p_nSecond );
	long SN_C_API Player_GetPlayTimeV2( long p_hHandle, float* p_nSecond );


	/************************************************************************
	**概述：
	*		单帧播放。
	**输入：
	*		p_hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		单帧播放，每调用一次该接口，播放一帧图像。要恢复播放速度可使用Player_Play。
	*	注意，在流播放模式下，不可以单帧播放。
	************************************************************************/
	long SN_C_API Player_OneByOne( long p_hHandle );

	/************************************************************************
	**概述：
	*		单帧后退。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		单帧后退，每调用一次该接口，后退一帧图像。要恢复播放速度可使用Player_Play。
	************************************************************************/
	long SN_C_API Player_OneByOneBack( long p_hHandle );



	///////////////////////////////////////////////////////////////////////////////////////////
	//						共有函数
	//////////////////////////////////////////////////////////////////////////////////////////


	/************************************************************************
	**概述：
	*		设置视频显示的拉伸模式。
	**输入：
	*		hHandle       ：播放句柄。
	*		p_bStretchMode：true为拉伸模式，false为非拉伸模式。
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置视频拉伸模式，若设置为拉伸模式,视频按照视频显示窗口的大小拉伸显示，若设置
	*	为非拉伸模式,则按照视频的原始比率显示。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	long SN_C_API Player_SetStretchMode(long p_hHandle, const bool p_bStretchMode);

	/************************************************************************
	**概述：
	*		设置视频显示的标志。
	**输入：
	*		hHandle：播放句柄。
	*		p_bFlag：视频显示标志。
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置视频显示的标志，TRUE 解码并显示，FALSE 只解码不显示。
	************************************************************************/
	long SN_C_API Player_SetDrawVideoFlag( long p_hHandle, bool p_bFlag);

	/************************************************************************
	**概述：
	*		设置视频窗口自动缩放标志。
	**输入：
	*		hHandle：播放句柄。
	*		value：窗口自动缩放标志。
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		当value = true，表示窗口可以自动缩放，当视频窗口的大小改变时，视频画面会自动调整大小，
	*	此时调用Player_ResizeVideoWnd将无效；反之当value = true，表示窗口不会自动缩放，此时可以调用
	*	Player_ResizeVideoWnd改变窗口大小。
	************************************************************************/
	long SN_C_API Player_SetAutoResizeFlag( long p_hHandle, bool p_bFlag);

	/************************************************************************
	**概述：
	*		改变视频窗口大小。
	**输入：
	*		hHandle：播放句柄。
	*		x：指定在窗口中视频显示位置的x坐标，单位为像素。
	*		y：指定在窗口中视频显示位置的y坐标，单位为像素。
	*		width:指定在窗口中视频显示大小的宽度，单位为像素。
	*		height:指定在窗口中视频显示大小的高度，单位为像素。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		改变视频窗口大小。
	************************************************************************/
	long SN_C_API Player_ResizeVideoWnd( long p_hHandle, long x, long y, long width, long height );

	/************************************************************************
	**概述：
	*		设置播放速度。
	**输入：
	*		hHandle：播放句柄。
	*		Speed：播放速度。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置播放速度，lSpeed取值可以为1/16到16之间，其中当lSpeed = 1.0 时，为正常播放速度。
	*		注意，在流播放模式下，必须调用Player_SetUseTimeStamp设置用时间戳播放流标志，才可以进行播放速度的设置。
	************************************************************************/
	long SN_C_API Player_SetSpeed( long p_hHandle, float p_nSpeed );

	/************************************************************************
	**概述：
	*		获取当前播放速度。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		pSpeed 传出参数，返回当前播放速度。值为实际的播放倍数。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		注意，在流播放模式下，必须调用Player_SetUseTimeStamp设置用时间戳播放流标志，才可以获取播放速度。
	************************************************************************/
	long SN_C_API Player_GetSpeed( long p_hHandle,float* p_nSpeed );

	/************************************************************************
	**概述：
	*		设置亮度。
	**输入：
	*		hHandle：播放句柄。
	*		value：亮度，范围为0到100.
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置亮度。
	************************************************************************/
	long SN_C_API Player_SetBrightness( long p_hHandle, long p_nValue );

	/************************************************************************
	**概述：
	*		获取亮度。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		value：传出参数，返回当前亮度，范围为0到100.
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取亮度。
	************************************************************************/
	long SN_C_API Player_GetBrightness( long p_hHandle, long* p_pnValue );

	/************************************************************************
	**概述：	
	*		设置对比度。
	**输入：
	*		hHandle：播放句柄。
	*		value：对比度，范围为0到100.
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置对比度。
	************************************************************************/
	long SN_C_API Player_SetContrast( long p_hHandle, long p_pnValue );

	/************************************************************************
	**概述：
	*		获取对比度。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		value：传出参数，返回当前对比度，范围为0到100.
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取对比度。
	************************************************************************/
	long SN_C_API Player_GetContrast( long p_hHandle, long* p_pnValue );

	/************************************************************************
	**概述：
	*		设置色调。
	**输入：
	*		hHandle：播放句柄。
	*		value：色调，范围为0到100.
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置色调。
	************************************************************************/
	long SN_C_API Player_SetHue( long p_hHandle, long p_nValue );

	/***********************************************************************
	**概述：
	*		将亮度、对比度、饱和度和色调重置为默认值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	************************************************************************/
	long SN_C_API Player_ResetPictureAdjustFilter(long p_hHandle);

	/************************************************************************
	**概述：	
	*		获取色调。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		value：传出参数，返回当前色调，范围为0到100.
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取色调。
	************************************************************************/
	long SN_C_API Player_GetHue( long p_hHandle, long* p_pnValue );

	/************************************************************************
	**概述：
	*		设置饱和度。
	**输入：
	*		hHandle：播放句柄。
	*		value：饱和度，范围为0到100.
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置饱和度。
	************************************************************************/
	long SN_C_API Player_SetSaturation( long p_hHandle, long p_nValue );

	/************************************************************************
	**概述：
	*		获取饱和度。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		value：传出参数，返回当前饱和度，范围为0到100.
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取饱和度。
	************************************************************************/
	long SN_C_API Player_GetSaturation( long p_hHandle, long* p_pnValue );

	/************************************************************************
	**概述：
	*		获取解码库版本号。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		lVer：前16位为主版本号，后16位为副版本号。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取解码库版本号。
	************************************************************************/
	long SN_C_API Player_GetVersion( long* p_nVer );

	/************************************************************************
	**概述：
	*		打开声音开关。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		打开声音开关。声音以共享方式打开，即多通道可以同时播放声音。
	************************************************************************/
	long SN_C_API Player_PlaySound( long p_hHandle );

	/************************************************************************
	**概述：
	*		关闭声音开关。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		关闭声音开关。
	************************************************************************/
	long SN_C_API  Player_StopSound(long p_hHandle);

	/************************************************************************
	**概述：
	*		设置音量大小。
	**输入：
	*		hHandle：播放句柄。。
	*		lVolume：音量的值，范围0-100。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置音量大小。
	************************************************************************/
	long SN_C_API Player_SetVolume( long p_hHandle, long p_nVolume );

	/************************************************************************
	**概述：
	*		获取音量大小。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		lVolume：输出参数，音量的值，范围0-100。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取音量大小。
	************************************************************************/
	long SN_C_API Player_GetVolume( long p_hHandle, long* p_nVolume);

	/************************************************************************
	**概述：
	*		开始播放。
	**输入：
	*		hHandle：播放句柄。
	*		hWnd：播放视频的窗口句柄
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		如果调用Player_SetAutoResizeFlag设置视频画面可以自动缩放，即Player_SetAutoResizeFlag（true），
	*	则视频画面能自适应调整为hWnd指定的窗口大小，全屏显示时只需把hWnd窗口放大到全屏即可，
	*	此时调用Player_ResizeVideoWnd无效；反之，如果调用Player_SetAutoResizeFlag设置视频画面不可以自动缩放，
	*	则视频画面不能自适应调整为hWnd指定的窗口大小，此时可以调用Player_ResizeVideoWnd改变窗口大小。
	*	缺省情况下，视频画面可以自动缩放。Player_SetAutoResizeFlag应该在Player_Play之前被调用。
	************************************************************************/
	long SN_C_API Player_Play( long p_hHandle ,long p_hWnd);

	/************************************************************************
	**概述：
	*		停止播放。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		停止播放。
	************************************************************************/
	long SN_C_API Player_Stop( long p_hHandle );

	/************************************************************************
	**概述：
	*		暂停播放。
	**输入：
	*		p_hHandle：播放句柄。
	*		p_nPause：lPause=1暂停；否则恢复播放。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		暂停播放。
	************************************************************************/
	long  SN_C_API Player_Pause( long p_hHandle, long p_nPause );

	/************************************************************************
	**概述：
	*		抓取当前帧存储为图片。
	**输入：
	*		hHandle：播放句柄。
	*		sFileName：图像文件的绝对路径。
	*		p_pszFormat: 抓图的图片格式，支持“JPG”和“BMP”
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		抓取当前帧存储为bmp图片。
	************************************************************************/
	long SN_C_API Player_Snapshot( long p_hHandle, const char* p_pszFileName, const char* p_pszFormat = "JPG");

	/************************************************************************
	**概述：
	*		刷新显示区域。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		刷新显示区域。当播放处于暂停状态时，如果产生了窗口切换，会使视频显示区域变灰，
	*	调用此接口使解码库重绘播放区域，消除灰色效果。
	************************************************************************/
	long SN_C_API Player_Refresh( long p_hHandle );

	/************************************************************************
	**概述：
	*		获得码流中原始图象大小。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		lWidth：原始图象宽。
	*		lHeight：原始图象高。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获得码流中原始图象大小。
	************************************************************************/
	long SN_C_API Player_GetPictureSize( long p_hHandle, long* p_pnWidth, long* p_pnHeight );

	/************************************************************************
	**概述：
	*		设置回应消息。
	**输入：
	*		p_hHandle：播放句柄。
	*		p_nIdx：表示回应消息的类型，1：文件播放结束。
	*		p_hWnd：窗口句柄。
	*		p_nMsg：消息ID。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		对于文件结束消息LPARAM为p_hHandle，WPARAM无意义；对于抓图结束消息LPARAM为
	*	p_hHandle，WPARAM为文件名所在字符串地址(const char*)。
	************************************************************************/
	long SN_C_API Player_SetMessage( long p_hHandle, long p_nIdx, long p_hWnd, long p_nMsg );

	/************************************************************************
	**概述：
	*		设置回应消息。
	**输入：
	*		p_hHandle：播放句柄。
	*		p_nIdx：表示回应消息的类型，1：文件播放结束。
	*		p_hWnd：窗口句柄。
	*		p_nMsg：消息ID。
	*       p_nWparam：WPARAM 消息值
	*       p_nLparam：LPARAM 消息值
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		
	************************************************************************/
	long SN_C_API Player_SetMessageEX( long p_hHandle, long p_nIdx, long p_hWnd, long p_nMsg ,  long p_nWparam, long p_nLparam);

	/************************************************************************
	**概述：
	*		设置文件播放结束时的回调函数。
	**输入：
	*		hHandle：播放句柄。
	*		FileEndCallback： 回调函数，在文件播放结束时由解码器调用。 
	*		pUserData ：用户数据指针，用于传递用户指定的数据。
	**输出：
	*	无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置文件播放结束时的回调函数。
	*		回调函数参数说明：
	*		hHandle：播放句柄。
	*		pUserData：客户程序在调用Player_SetFileEndCallback时指定的回调函数参数。
	*		注意：当fFileEndCallback设置NULL时取消回调。
	************************************************************************/
	long SN_C_API Player_SetFileEndCallback( long p_hHandle, 
		void(CALLBACK *fFileEndCallback)(long p_hHandle, void *pUserData) , 
		void * pUserData );
	
	/************************************************************************
	**概述：
	*		设置解码回调函数。
	**输入：
	*		hHandle：播放句柄。
	*		fDecodeCallBack：回调函数。
	*		lParam：回调函数参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置解码回调函数，该函数在Player_Play之前调用，在Player_Stop时自动失效。
	*	解码部分不控制播放速度，只要客户程序从回调函数中返回，解码器就
	*	会解码下一部分数据。
	*		回调函数的参数说明：
	*		hHandle：播放句柄
	*		pBuf：解码后的音视频数据
	*		nSize：解码后的音视频数据长度
	*		lParam：客户程序在调用Player_SetDecodeCallBack时指定的回调函数参数
	*		pFrameInfo：图像和声音信息FRAME_INFO结构定义如下：
	*	typedef struct{ 
	*	long nWidth; // 画面宽，单位为像素，如果是音频数据则为0
	*	long nHeight; // 画面高，单位为像素，如果是音频数据则为0
	*	long nStamp; // 时标信息，单位毫秒
	*	long nType; //数据类型，见下表
	*	long nFrameRate;// 编码时产生的图像帧率
	*	}FRAME_INFO;  
	*	数据类型表
	*	数据类型	简写	说明
	*	1	AUDIO16	音频。采样率16khz，单声道，每个采样点16位表示。
	*	2	RGB32	视频。每像素4字节，排列方式与位图相似，“BGR0”,第一个像素位于图像左下角
	*	3	YV12	视频，yv12格式。排列顺序“Y0Y1……”、“V0V1……”、“U0-U1……”
	*	4	UYVY	视频，uyvy格式。排列顺序“U0Y0V0Y1U2Y2V2Y3 … …”，第一个像素位于图像左上角
	*	5	YUV420	视频，YUV420格式。排列顺序“Y0Y1……”、“U0-U1……”、“V0V1……”
	*	6	yuy2、yuyv	视频，yuy2或yuyv格式。排列顺序“Y0 U0 Y1 V0 Y2 U2 Y3 V2… …”，第一个像素位于图像左上角。
	*	7	AUDIO8	音频。采样率8khz，单声道，每个采样点16位表示。
	*		注意：当fDecodeCallBack设置NULL时取消回调。
	************************************************************************/
	long SN_C_API Player_SetDecodeCallBack( long p_hHandle, 
											long ( CALLBACK * fDecodeCallBack ) ( long p_hHandle, const char * pBuf, long  nSize, FRAME_INFO * pFrameInfo,	void* pUserData),
											void* pUserData);

	/************************************************************************
	**概述：
	*		设置显示回调函数。
	**输入：
	*		hHandle：播放句柄。
	*		fDrawCallBack：显示回调函数。
	*		pUserData：回调函数参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置显示回调函数，该函数在Player_Play之前调用，在Player_Stop时自动失效。用来获得当
	*	前解码器绘制的设备上下文，提供客户程序在视频上叠加内容的机会。
	*		显示回调函数参数说明：
	*		hHandle：播放句柄。
	*		hDC：设备上下文。
	*		pUserData： 客户程序在调用Player_SetDrawCallBack时指定的回调函数参数。
	*		注意：当fDrawCallBack设置NULL时取消回调。
	************************************************************************/
	long SN_C_API Player_SetDrawCallBack( long p_hHandle, 
		long( CALLBACK* fDrawCallBack  ) ( long p_hHandle, HDC hDC, void* pUserData), 
		void* pUserData, bool p_bUseDestResolution=false);

	/************************************************************************
	**概述：
	*		设置私有数据。
	**输入：
	*		hHandle：播放句柄。
	*		nData：用户的私有数据,整形值。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*	
	************************************************************************/
	long SN_C_API Player_SetData( long p_hHandle, unsigned long nData);
											
	/************************************************************************
	**概述：
	*		获取私有数据。
	**输入：
	*		hHandle：播放句柄。
	**输出：
	*		pData：传出参数，返回用户的私有数据。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		获取私有数据。
	************************************************************************/
	long SN_C_API Player_GetData( long p_hHandle, unsigned long* pData);

	////////////////////////////////////////流方式播放过程中录像//////////////////////////////////////////////////////////////
	long SN_C_API Player_SetRecordFileHead(long p_hHandle, const char* p_pszRecordFileHead, const int p_nRecordFileLength);
	long SN_C_API Player_SetRecordFileFormat(long p_hHandle, const int p_nRecordFileFormat);
	long SN_C_API Player_StartRecord( long p_hHandle, const char* p_pszRecordFileName );
	long SN_C_API Player_StopRecord( long p_hHandle );
	long SN_C_API Player_GetRecorderStatus(long p_hHandle, long* p_nStatus);



	//////////////////////////////////////// 画面缩放//////////////////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		放大显示视频图像。
	**输入：
	*		x：需要放大显示的区域的x坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		y：需要放大显示的区域的y坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		width：需要放大显示的区域的宽度。
	*		height：需要放大显示的区域的高度。
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		将用户划的区域放大显示
	************************************************************************/
	long SN_C_API Player_ZoomInVideoEx(long p_hHandle, const unsigned int x, const unsigned int y, const unsigned int width, const unsigned int height);

	/************************************************************************
	**概述：
	*		放大当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		按照一定的比率放大当前显示的视频图像
	************************************************************************/
	long SN_C_API Player_ZoomInVideo(long p_hHandle);

	/************************************************************************
	**概述：
	*		缩小当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		按照一定的比率缩小当前显示的视频图像
	************************************************************************/
	long SN_C_API Player_ZoomOutVideo(long p_hHandle);

	/************************************************************************
	**概述：
	*		恢复正常的视频图像显示。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	long SN_C_API Player_RestoreVideo(long p_hHandle);

	/************************************************************************
	**概述：
	*		设置视频显示模式
	**输入：
	*		p_nDrawMode：
	*					1:DDraw优先
	*					2:D2D优先
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
   long SN_C_API Player_SetDrawVideoMode(long p_hHandle,const long p_nDrawMode);

	/////////////////////////////////音频采集接口//////////////////////////////////////////////////	

	/************************************************************************
	**概述：
	*		打开音频采集功能。
	**输入：
	*		无。
	**输出：
	*		*hHandle：	由解码库生成，称为音频采集句柄，用来对各个音频采集实例进行标识，
	*	客户程序通过音频采集句柄操作音频采集实例来完成对音频采集的控制.
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		打开音频采集功能。
	************************************************************************/
	long SN_C_API AudioCapture_Open( long* p_hHandle );
	
	/************************************************************************
	**概述：
	*		设置采集音频流格式 1 ES_STREAM 原始流, 2 TS_STREAM TS流
	**输入：
	*		hHandle：音频采集句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		启动音频采集。
	************************************************************************/
	long SN_C_API AudioCapture_SetStreamFormat( long p_hHandle,  const long p_nStreamFormat);

	/************************************************************************
	**概述：
	*		设置输出的流编码格式
	**输入：
	*		p_nEncoderType：流格式 107：AMR (AMR编码)
	*						   或者101：G7231(G723.1编码)
	*						   或者102：G711_ALAW(G711_A编码)
	*						   或者103：G711_ULAW(G711_U编码)
	*						   或者108：RAW_PCM(不编码)
	**输出：
	*		无
	**返回值：
	*		无
	**功能：		
	*************************************************************************/
	long SN_C_API AudioCapture_SetEncoderType( long p_hHandle,  const long p_nEncoderType);

	/************************************************************************
	**概述：
	*		启动音频采集。
	**输入：
	*		hHandle：音频采集句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		启动音频采集。
	************************************************************************/
	long SN_C_API AudioCapture_Start( long p_hHandle );

	/************************************************************************
	**概述：
	*		设置音频采集回调函数。
	**输入：
	*		hHandle：音频采集句柄。
	*		fAudioInCallback 音频采集回调函数，在每采集完一个音频帧之后由解码器调用。
	*		pUserData：回调函数参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置音频采集回调函数，在每采集完一个音频帧（这里的帧是一个逻辑概念）之后由解码器调用。
	*		回调函数参数说明：
	*		hHandle： 音频功能句柄。
	*		pAVFrameData： 采集到的音频数据。 
	*		pUserData：客户程序在调用AudioCapture_SetCallback时指定的回调函数参数。
	*		注意：当fAudioInCallback设置NULL时取消回调。
	************************************************************************/
	long SN_C_API AudioCapture_SetCallback( long p_hHandle, 
		void (CALLBACK *fAudioInCallback)(long p_hHandle, ST_AVFrameData* p_pstAVFrameData, void* p_pUserData), 
		void * pUserData );

	/************************************************************************
	**概述：
	*		停止音频采集。
	**输入：
	*		hHandle：音频采集句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		停止音频采集。
	************************************************************************/
	long SN_C_API AudioCapture_Stop( long p_hHandle );

	/************************************************************************
	**概述：
	*		关闭音频采集功能。
	**输入：
	*		hHandle：音频采集句柄。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		关闭音频采集功能。
	************************************************************************/
	long SN_C_API AudioCapture_Close( long p_hHandle );


	
#ifdef __cplusplus 
} 
#endif 

#endif