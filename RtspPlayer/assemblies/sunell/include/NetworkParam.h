#ifndef _NETWORK_PARAM_
#define _NETWORK_PARAM_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
# error Not included "SNPlatOS.h".
#endif

#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(push, PRAGMA_PACK_CHAR)
#endif

#ifndef WIN32  
#ifndef _PACKED_1_  

#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif  
#else  
#ifndef _PACKED_1_  
#define _PACKED_1_  
#endif  
#endif
/**********************************************************************/

class SN_DLL_API NetworkParam
{
public:
	//网卡工作模式
	enum WorkingType
	{
		CAMERA_NETWORK_TYPE				= 1,		//摄像机专用网络模式
		NORMAL_NETWORK_TYPE				= 2,		//常规网络模式
	};

public:
	NetworkParam(void);
	~NetworkParam(void);

public:

	/************************************************************************
	** 概述：
	*		设置IP协议类型
	**输入：
	*		p_nIPProtoVer：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setIPProtoVer(const int p_nIPProtoVer);

	/************************************************************************
	**概述：
	*		获取IP协议类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		IP协议类型
	************************************************************************/
	const int getIPProtoVer()  const;

	/************************************************************************
	**概述：
	*		设置网口编号
	**输入：
	*		p_nNetworkCardId：网口编号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setNetworkCardId(const int p_nNetworkCardId);

	/************************************************************************
	**概述：
	*		获取网口编号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网口编号
	**功能：
	*
	************************************************************************/
	const int getNetworkCardId() const;


	/************************************************************************
	**概述：
	*		设置网口工作类型
	**输入：
	*		p_nWorkingType：网卡工作类型
	**输出：
	*		无
	**返回值：
	*		
	**功能：
	*
	************************************************************************/
	void setWorkingType(const int p_nWorkingType);

	/************************************************************************
	**概述：
	*		获取网口工作类型：1.摄像机专用网络模式 2.常规网络模式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网口工作类型
	**功能：
	*
	************************************************************************/
	const int getWorkingType() const;

	/************************************************************************
	**概述：
	*		设置是否自动获取IP地址
	**输入：
	*		p_bFlag：是否自动获取IP地址标识（false：不自动获取，true：自动获取）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setAutoGetIpFlag(bool p_bFlag);

	/************************************************************************
	**概述：
	*		获取是否自动获取IP地址标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		自动获取IP地址标识
	**功能：
	*
	************************************************************************/
	bool getAutoGetIpFlag() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的主机Dhcp IP地址
	**输入：
	*		p_pszDhcpIp ：网络视频设备的主机IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setDhcpIp(const char * p_pszDhcpIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机Dhcp IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机IP地址
	**功能：
	*
	************************************************************************/
	const char * getDhcpIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的主机IP地址
	**输入：
	*		p_nLocalIp ：网络视频设备的主机IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setLocalIp(const char * p_pszLocalIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的主机IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机IP地址
	**功能：
	*
	************************************************************************/
	const char * getLocalIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的子网掩码
	**输入：
	*		p_nLocalSubnetMask ：网络视频设备的子网掩码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setLocalSubnetMask(const char * p_pszLocalSubnetMask);

	/************************************************************************
	**概述：
	*		获取网络视频设备的子网掩码
	**输入：
	*		无
	**输出：
	**		无
	**返回值：
	*		网络视频设备的子网掩码
	**功能：
	*
	************************************************************************/
	const char * getLocalSubnetMask() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的默认网关地址
	**输入：
	*		p_pszGateway ：网络视频设备的默认网关地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setGateway(const char * p_pszGateway);

	/************************************************************************
	**概述：
	*		获取网络视频设备的默认网关地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的默认网关地址
	**功能：
	*
	************************************************************************/
	const char * getGateway() const;

	/************************************************************************
	**概述：
	*		设置是否自动获取DNS服务器IP地址
	**输入：
	*		p_bFlag：自动获取DNS服务器IP地址标识（false：不自动获取，true：自动获取）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setAutoGetDNSFlag(bool p_bFlag);

	/************************************************************************
	**概述：
	*		获取自动获取DNS服务器IP地址标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		自动获取DNS服务器地址标识
	*功能：
	*
	************************************************************************/
	bool getAutoGetDNSFlag() const;

	/************************************************************************
	**概述：
	*		设置首选的DNS服务器IP地址
	**输入：
	*		p_nPrimaryDNSIp：首选的DNS服务器IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setPrimaryDNSIp(const char * p_pszPrimaryDNSIp);

	/************************************************************************
	**概述：
	*		获取首选的DNS服务器IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		首选的DNS服务器IP地址
	**功能：
	*
	************************************************************************/
	const char * getPrimaryDNSIp() const;

	/************************************************************************
	**概述：
	*		设置网络视频设备的备用或辅助的DNS服务器IP地址
	**输入：
	*		p_nSpareDNSIp：备用或辅助的DNS服务器IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	bool setSpareDNSIp(const char * p_pszSpareDNSIp);

	/************************************************************************
	**概述：
	*		获取网络视频设备的备用或辅助的DNS服务器IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网络视频设备的备用或辅助的DNS服务器IP地址
	**功能：
	*
	************************************************************************/
	const char * getSpareDNSIp() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objNetworkCardParam：网络视频设备的主机网络信息
	**输出：
	*		无
	**返回值：
	*		网络视频设备的主机网络信息
	**功能：
	************************************************************************/
	NetworkParam& operator =(const NetworkParam& p_objNetworkCardParam);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objHostNetwork：HostNetwork类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个HostNetwork类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const NetworkParam& p_objNetworkCardParam);

private:
	int				m_nNetworkCardId;										//网口编号
	int				m_nWorkingType;											//工作类型，1.公共网络 2.摄像机网络 3.绑定
	bool			m_bAutoGetIpFlag;										//自动获取IP地址(true：自动获取，false：不自动获取)
	char			m_szDhcpIp[CONST_MAXLENGTH_IP+1];						//DHCP IP
	char			m_szLocalIp[CONST_MAXLENGTH_IP + 1];					//本地IP地址
	char			m_szLocalSubnetMask[CONST_MAXLENGTH_IP + 1];			//子网掩码
	char			m_szGateway[CONST_MAXLENGTH_IP + 1];					//网关
	bool			m_bAutoGetDNSFlag;										//自动获取DNS服务器IP地址(true：自动获取，false：不自动获取)
	char			m_szPrimaryDNSIp[CONST_MAXLENGTH_IP + 1];				//首选DNS服务器IP地址
	char			m_szSpareDNSIp[CONST_MAXLENGTH_IP + 1];					//备用DNS服务器IP地址
	int				m_nIPProtoVer;											//IP协议类型
}_PACKED_1_;


/**********************************************************************/
#ifdef PRAGMA_PACK
#ifdef WIN32  
#pragma pack(pop)
#endif
#endif
/**********************************************************************/


#endif //_MONITORTYPE_
