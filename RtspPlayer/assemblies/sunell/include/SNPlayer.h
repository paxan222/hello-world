#ifndef SN_PLAYER_H_
#define SN_PLAYER_H_

#include "VideoInfo.h"
#include "AudioInfo.h"
#include "PlayStatus.h"
#include "SNPlatOS.h"
#include "SNStruct.h"
#include "AVFrameData.h"
#include "CharSetType.h"

#include <process.h>
#include <winsock2.h>
#include <windows.h>
#include <vector>
#include "IAVPlayer.h"

class SNLivePlayer;
class FilePlayer;
class SNLiveRecorder;
class AVData;


typedef long ( CALLBACK * DecodeCallBack ) ( long p_hHandle, const char * pBuf, long nSize, FRAME_INFO * pFrameInfo, void*  pUserData );
typedef long (CALLBACK *DrawCallBack)(long p_hHandle, HDC hDc, void *pUserData);
typedef void (CALLBACK *FileEndCallback)(long p_hHandle, void *pUserData);

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API SNPlayer
{
public:
	SNPlayer(void);
	virtual ~SNPlayer(void);

public:
	/************************************************************************
	**概述：
	*		设置视频显示的拉伸模式
	**输入：
	*		p_bStretchMode：true为拉伸模式，false为非拉伸模式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频拉伸模式，若设置为拉伸模式,视频按照视频显示窗口的大小拉伸显示，若设置
	*	为非拉伸模式,则按照视频的原始比率显示。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void setStretchMode(const bool p_bStretchMode);

	/************************************************************************
	**概述：
	*		设置视频显示的标志。
	**输入：
	*		p_bDrawFlag：视频显示标志。
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频显示的标志，TRUE 解码并显示，FALSE 只解码不显示。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void setDrawVideoFlag(bool p_bDrawFlag);

	/************************************************************************
	**概述：
	*		设置视频窗口自动缩放标志。
	**输入：
	*		p_bAutoResizeFlag：窗口自动缩放标志。
	**输出：
	*		无
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		当p_bAutoResizeFlag = true，表示窗口可以自动缩放，当视频窗口的大小改变时，视频画面会自动调整大小，
	*	此时调用resizeWindow将无效；反之当p_AutoResizeFlag = false，表示窗口不会自动缩放，此时可以调用
	*	resizeWindow改变窗口大小。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void setAutoResizeFlag(bool p_bAutoResizeFlag = true);


	/************************************************************************
	**概述：
	*		设置视频的显示窗口，位置和大小,在OPEN之前调用该方法设置显示句柄
	**输入：
	*		p_hDisplayWnd：视频显示窗口的句柄。
	*		x：指定在窗口中视频显示位置的x坐标，单位为像素。
	*		y：指定在窗口中视频显示位置的y坐标，单位为像素。
	*		width:指定在窗口中视频显示大小的宽度，单位为像素。
	*		height:指定在窗口中视频显示大小的高度，单位为像素。
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频的显示窗口，位置和大小。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void setVideoWindow(unsigned int p_hDisplayWnd, int x, int y, int width, int height);
	void setVideoWindow(const unsigned int p_hDisplayWnd);
	/************************************************************************
	**概述：
	*		获取播放器版本号。
	**输入：
	*		无。
	**输出：
	*		p_nVersion：前16位为主版本号，后16位为副版本号
	**返回值：
	*		SN_SUCCESS：获取成功
	*		其他：		获取失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVersion( long& p_nVersion );
public:
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//								流方式播放播放专有函数
	////////////////////////////////////////////////////////////////////////////////////////////////
	
	/************************************************************************
	**概述：
	*		设置实时播放标志，系统默认设置为true。当采用流方式播放文件时需要设置为false。
	**输入：
	*		p_bFlag: true,设置流方式播放的是实时流；
	*                false,设置流方式播放的是文件流
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setLivePlayFlag(bool p_bFlag);

	/************************************************************************
	**概述：
	*		设置用时间戳播放视频，系统默认设置为false
	**输入：
	*		p_nUseFlag:true,使用时间戳，false 取消使用时间戳
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		当设置为true,系统将采用视频的显示时间戳来显示视频,系统将自动丢弃过期的视频,此时也可以通过SetSpeed方法调节播放速度；
	        当设置为false,系统将不采用时间戳播放视频，系统将尽力的播放的视频缓冲中的帧。
			此方法只对流播放有效，对文件播放无效。
	************************************************************************/
	void setUseTimeStamp(const bool p_nUseFlag);

	
	/************************************************************************
	**概述：
	*		设置播放缓冲大小(此接口功能已废弃!  被setMaxDelayTime代替。)
	**输入：
	*		p_nSecSize, 以毫秒(ms)为单位 必须在0秒-最大5000毫秒缓冲。
	**输出：
	*		无。
	**返回值：
	*		无
	**功能：
	注：播放缓冲越大，播放越平滑，但延时将增大，当为0时，无论是否用时间戳，视频将立即被播放
	************************************************************************/
	void setPlayBufferSize(const unsigned int p_nSecSize);

	void setInputQueueMaxSize(const unsigned int p_nMaxSize);


	/************************************************************************
	**概述：
	*		设置最大延迟时间
	**输入：
	*		p_nMaxDelayTime:最大延迟时间，单位毫秒，默认值是100ms
	**输出：
	*		无。
	**返回值：
	*		无
	**功能：
	*       网络环境差时，最大延迟时间越大，对平滑播放越好；
	*       最大延迟时间越小，对播放实时性越好。
	*		此方法适用于流方式播放。
	************************************************************************/
	void setMaxDelayTime(unsigned int p_nMaxDelayTime);


	/************************************************************************
	**概述：
	*		查询最大延迟时间
	**输入：
	*		无。
	**输出：
	*		p_nMaxDelayTime:最大延迟时间，单位毫秒，默认值是100ms
	**返回值：
	*		SN_SUCCESS：打开成功
	*		其他：		打开失败	
	**功能：
	*		此方法适用于流方式播放。
	************************************************************************/
	int getMaxDelayTime(unsigned int& p_nMaxDelayTime);


	/************************************************************************
	**概述：
	*		获得播放缓冲状态，
	**输入：
	*		p_bState:true,缓冲满，false 缓冲未满
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		用户可以通过此状态，判断播放缓冲是否满。
			当缓冲满时，用户不应当调用inputData方法输入数据。
	        若用户继续输入数据流，播放器会自动控制播放缓冲，并强行丢弃缓冲最早的一帧数据，并放入当前数据。
			此方法只对流播放有效，对文件播放无效。
	************************************************************************/
	int getPlayBufferState(bool &p_bState);

	/************************************************************************
	**概述：
	*		打开视频流。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：打开成功
	*		其他：		打开失败
	**功能：
	*		此方法适用于流方式播放。
	************************************************************************/
	int openStream();

	/************************************************************************
	**概述：
	*		关闭视频流。
	**输入：
	*		无。	
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：关闭成功
	*		其他：		关闭失败
	**功能：
	*		此方法适用于流方式播放。
	************************************************************************/
	int closeStream( );


	/************************************************************************
	**概述：
	*		输入TS音视频流。数据必须是以0X47开始的TS流，p_nDataLen长度必须是188的倍数
	**输入：
	*		p_objTSAVData：TS数据流。
	*		p_nDataLen：流数据大小，单位为字节。
	**输出：
	*		p_nConsumedLen：已经消费的数据长度， (p_nDataLen - p_nConsumedLen)的差值为未消费的数据。
	                        当p_nConsumedLen == p_nDataLen，正好消费完。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		此方法仅适用于流方式播放,
	*		用户可以调用getPlayBufferState获取队列满状态。
	*
	************************************************************************/
	int		intputTSData(const char* p_szTSData, const unsigned int p_nDataLen, unsigned int & p_nConsumedLen);

	/************************************************************************
	**概述：
	*		输入TS音视频流
	**输入：
	*		p_objTSAVData：TS数据流。
	*		p_nDataLen：流数据大小，单位为字节。
	**输出：
	*		
	**返回值：
	*		SN_SUCCESS：成功。
	*		SN_ERROR_QUEUE_FULL：缓冲队列满，需要重新调用接口塞入数据。
	**功能：
	*		此方法仅适用于流方式播放,
	*		用户可以调用getPlayBufferState获取队列满状态。
	*
	************************************************************************/
	int		intputTSData(const char* p_szTSData, const unsigned int p_nDataLen);

	/************************************************************************
	**概述：
	*		输入一帧TS音视频帧， 0X47开始的TS流。
	**输入：
	*		p_szTSAVFrameData：一帧TS流的音视频帧， 必须为一个MPEG2 TS打包的完整音视频流帧。
	*		p_nTSAVFrameDataLen：该帧的流数据大小，单位为字节。
	**输出：
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		此方法仅适用于流方式播放,
	*		用户可以调用getPlayBufferState获取队列满状态。
	*
	************************************************************************/
	int		inputTSAVFrame(const char* p_szTSAVFrameData, const unsigned int p_nTSAVFrameDataLen);

	/************************************************************************
	**概述：
	*		输入一帧TS音视频数帧
	**输入：
	*		p_objAVFrameData：每一个AVFrameData是一个MPEG2 TS打包的完整视频帧或音频帧。
								其中AVFrameData::StreamFormat描述了流的类型，即StreamFormat::TS_STREAM
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		此方法仅适用于流方式播放。
	*		用户可以调用getPlayBufferState获取队列满状态。
	************************************************************************/
	int inputTSAVFrame( const AVFrameData& p_objAVFrameData );

	/************************************************************************
	**概述：
	*		输入一帧原始的音视频帧
	**输入：
	*		p_objAVFrameData：每一个AVFrameData是一个完整视频帧或音频帧。
							其中AVFrameData::StreamFormat描述了流的类型，即StreamFormat::ES_STREAM
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		此方法仅适用于流方式播放。
	*		用户可以调用getPlayBufferState获取队列满状态。
	************************************************************************/
	int inputAVFrame( const AVFrameData& p_objAVFrameData );

	/************************************************************************
	**概述：
	*		获得当前播放音视频帧的时间戳
	**输入：
	*		无
	**输出：
	*		p_nTimeStamp：当前播放帧时间戳，以微妙为单位（时间戳最大值：95443717689）
	*						p_nTimeStamp返回-1则未有音视频播放，返回的时间戳无效。
	**返回值：
	*		>0  ： 获取成功。
	*		其他： 获取失败。
	**注：
	*		此函数只在播放TS流数据时有效，且获取到时间戳可能出现翻转，即当前帧的时间戳比之前取的时间戳小。
	************************************************************************/
	int getCurrentAVFrameTimeStamp(INT64& p_nTimeStamp);

	/************************************************************************
	**概述：
	*		输入PS音视频流
	**输入：
	*		p_objPSAVData：PS数据流。
	*		p_nDataLen：流数据大小，单位为字节。
	**输出：
	*		
	**返回值：
	*		SN_SUCCESS：成功。
	*		SN_ERROR_QUEUE_FULL：缓冲队列满，需要重新调用接口塞入数据。
	**功能：
	*		此方法仅适用于流方式播放,
	*		用户可以调用getPlayBufferState获取队列满状态。
	*
	************************************************************************/
	int	inputPSData(const char* p_szPSData, const unsigned int p_nDataLen);

	/************************************************************************
	**概述：
	*		输入一帧PS音视频数帧。
	**输入：
	*		p_objAVFrameData：每一个AVFrameData是一个MPEG2 PS打包的完整视频帧或音频帧。
								其中AVFrameData::StreamFormat描述了流的类型，即StreamFormat::PS_STREAM
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		此方法仅适用于流方式播放, 并且只能播放由。
	*		用户可以调用getPlayBufferState获取队列满状态。
	************************************************************************/
	int inputPSAVFrame( const AVFrameData& p_objAVFrameData );


	/************************************************************************
	**概述：
	*		重置播放器，清空播放缓存
	**输入：
	*		无
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		
	************************************************************************/
	int reset();

	////获取播放器空间总大小，单位字节。
	int  getBufMaxSize(int& p_nBufMaxSize) const;


	//获取播放器缓冲区剩余数据空间总大小，单位字节。
	int  getLeftDataSize(int& p_nLeftDataSize) const;

public:

	/////////////////////////////////////////////////////////////////////////////////////////////////
	//								文件方式播放专有函数
	////////////////////////////////////////////////////////////////////////////////////////////////

	/************************************************************************
	**概述：
	*		打开待播放的文件
	**输入：
	*		p_pszFileName：要播放的文件名，绝对路径。
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：打开成功
	*		其他：		打开失败
	**功能：
	*		打开待播放的文件，可通过SetMessage设置文件结束消息来获得文
	*	件播放结束的时机。
	*		此方法适用于文件方式播放。
	************************************************************************/
	int openFile( const char * p_pszFileName);

	/************************************************************************
	**概述：
	*		关闭播放文件。
	**输入：
	*		无。	
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：关闭成功
	*		其他：		关闭失败
	**功能：
	*		此方法适用于文件方式播放。
	************************************************************************/
	int closeFile();

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//								播放操作函数
	////////////////////////////////////////////////////////////////////////////////////////////////
	/************************************************************************
	**概述：
	*		开始播放。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：播放成功
	*		其他：		播放失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int play( );
	
	/************************************************************************
	**概述：
	*		暂停播放。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：暂停成功
	*		其他：		暂停失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int pause();

	/************************************************************************
	**概述：
	*		停止播放。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：停止成功
	*		其他：		停止失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int stop( );

public: //声音
	/************************************************************************
	**概述：
	*		打开声音开关。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：打开成功
	*		其他：		打开失败
	**功能：
	*		打开声音开关。声音以共享方式打开，即多通道可以同时播放声音。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int playSound( );

	/************************************************************************
	**概述：
	*		关闭声音开关。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：关闭成功
	*		其他：		关闭失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int stopSound();

	/************************************************************************
	**概述：
	*		设置音量大小。
	**输入：
	*		p_nVolume：音量的值，范围0-100。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：设置成功
	*		其他：		设置失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setVolume( long p_nVolume );

	/************************************************************************
	**概述：
	*		获取音量大小。
	**输入：
	*		无。
	**输出：
	*		p_nVolume：音量的值，输出参数，范围0-100
	**返回值：
	*		SN_SUCCESS：获取成功
	*		其他：		获取失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVolume( long& p_nVolume );

	bool isOnSound();
	
public:
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//								文件方式播放专有函数
	////////////////////////////////////////////////////////////////////////////////////////////////

	/************************************************************************
	**概述：
	*		单帧播放。
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：播放成功
	*		其他：		播放失败
	**功能：
	*		单帧播放，每调用一次该接口，播放一帧图像。要恢复播放速度可使用play。
	*		播放状态必须是暂停状态，否则将会导致函数调用不成功。
	************************************************************************/
	int playNextFrame( );

	/************************************************************************
	**概述：
	*		单帧后退。
	**输入：
	*		无。	
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功
	*		其他：		失败
	**功能：
	*		单帧后退，每调用一次该接口，后退一帧图像。
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int playPreviousFrame( );

	/************************************************************************
	**概述：
	*		取得文件的长度(单位:秒)
	**输入：
	*		无
	**输出：
	*		p_nTimeLength：传出参数，返回文件的时间长度。
	**返回值：
	*		SN_SUCCESS		获取成功。
	*		其他			获取失败。
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int getFileTime( long& p_nTimeLength )const;
	int getFileTimeV2( float& p_nTimeLength )const;

	/************************************************************************
	**概述：
	*		设置当前的播放位置(单位:秒)
	**输入：
	*		无
	**输出：
	*		p_nSecond：播放位置。
	**返回值：
	*		SN_SUCCESS：设置成功。
	*		其他：		设置失败。
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int setPlayPosByTime( long p_nSecond );
	int setPlayPosByTimeV2( float p_nSecond );

	/************************************************************************
	**概述：
	*		取得当前的播放位置(单位:秒)。
	**输入：
	*		无。
	**输出：
	*		p_nSecond：传出参数，返回当前的播放位置。
	**返回值：
	*		SN_SUCCESS：获取成功。
	*		其他	  ：获取失败。
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int getPlayPosByTime( long& p_nSecond )const;
	int getPlayPosByTimeV2( float& p_nSecond )const;

	/************************************************************************
	**概述：
	*		设置当前的播放位置(百分比)。
	**输入：
	*		p_nPercent：播放位置，为0-100之间的整数。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS		设置成功
	*		其他			设置失败
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int setPlayPosByPercent( long p_nPercent );

	/************************************************************************
	**概述：
	*		取得当前的播放位置(百分比)。
	**输入：
	*		无
	**输出：
	*		p_nPercent：返回当前的播放位置，为0-100之间的整数。
	**返回值：
	*		SN_SUCCESS		获取成功
	*		其他			获取失败
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	long getPlayPosByPercent( long& p_nPercent )const;

	/************************************************************************
	**概述：
	*		获取文件中包含的帧的总数目。
	**输入：
	*		无
	**输出：
	*		p_nFrames：返回帧的总数目。
	**返回值：
	*		SN_SUCCESS		获取成功
	*		其他			获取失败
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int getFileTotalFrames(long & p_nFrames);

	/************************************************************************
	**概述：
	*		获取已经播放过的帧数目。
	**输入：
	*		无
	**输出：
	*		p_nFrames：传出参数，返回已经播放过的帧数目。
	**返回值：
	*		SN_SUCCESS		获取成功
	*		其他			获取失败
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int getPlayedFrames(long & p_nFrames);

	/************************************************************************
	**概述:
	*		按照帧的索引号设置当前播放位置。
	**输入：
	*		p_nFrameNum: 要跳转到的帧号。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS		设置成功。
	*		其他			设置失败。
	**功能：
	*		此方法仅适用于文件方式播放。
	************************************************************************/
	int	setCurrentFrameNum(long p_nFrameNum);

	/************************************************************************
	**概述：
	*		设置文件播放结束时的回调函数。
	**输入：
	*		fFileEndCallback 回调函数，在文件播放结束时由解码器调用。
	*		pUser 用户数据指针，用于传递用户指定的数据。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功。
	*		其他：		失败。
	**功能：
	*		设置文件播放结束时的回调函数。
	************************************************************************/
	int setFileEndCallback(long p_hHandle, FileEndCallback fFileEndCallback, void * User);

public:
	/////////////////////////////////////////////////////////////////////////////////////////////////
	//								文件方式播放与流方式播放播放共有函数
	////////////////////////////////////////////////////////////////////////////////////////////////

	/************************************************************************
	**概述：
	*		设置播放速度。
	**输入：
	*		p_nSpeed：播放速度。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：设置成功
	*		其他：		设置失败
	**功能：
	*		设置播放速度，lSpeed取值可以为1/16到16之间，其中当lSpeed = 1.0 时，为正常播放速度。
	*		注意，在流播放模式下，必须调用setUseTimeStamp设置用时间戳播放流标志，才可以进行播放速度的设置。
	************************************************************************/
	int setSpeed( float p_nSpeed );

	/************************************************************************
	**概述：
	*		获取播放速度。
	**输入：
	*		无。
	**输出：
	*		pSpeed 传出参数，返回当前播放速度，值为实际的播放倍数。
	**返回值：
	*		SN_SUCCESS：获取成功
	*		其他：		获取失败
	**功能：
	*		注意，在流播放模式下，必须调用setUseTimeStamp设置用时间戳播放流标志，才可以获取播放速度。
	************************************************************************/
	int getSpeed( float& p_nSpeed )const;

	/***********************************************************************
	**概述：
	*		设置亮度
	**输入：
	*		p_nValue：亮度，范围：0到100.
	***输出：
	*		无
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setVideoBrightness(const int p_nValue);

	/***********************************************************************
	**概述：
	*		获取亮度。
	**输入：
	*		无
	***输出：
	*		p_nValue：亮度，范围：0到100.
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoBrightness(int & p_nValue);

	/***********************************************************************
	**概述：
	*		设置对比度。
	**输入：
	*		p_nValue：对比度，范围：0到100.
	***输出：
	*		无
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setVideoContrast(const int p_nValue);

	/***********************************************************************
	**概述：
	*		获取对比度。
	**输入：
	*		无
	***输出：
	*		p_nValue：对比度，范围：0到100.
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoContrast(int & p_nValue);

	/***********************************************************************
	**概述：
	*		设置色调。
	**输入：
	*		p_nValue：色调，范围：0到100.
	***输出：
	*		无
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setVideoHue(const int p_nValue);

	/***********************************************************************
	**概述：
	*		获取色调。
	**输入：
	*		无。
	***输出：
	*		p_nValue：色调，范围：0到100.
	**返回值：
	*		SN_SUCCESS:成功。
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoHue(int & p_nValue);

	/***********************************************************************
	**概述：
	*		设置饱和度。
	**输入：
	*		p_nValue：饱和度，范围：0到100.
	***输出：
	*		无
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setVideoSaturation(const int p_nValue);

	/***********************************************************************
	**概述：
	*		获取饱和度。
	**输入：
	*		无
	***输出：
	*		p_nValue：饱和度，范围：0到100.
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoSaturation(int & p_nValue);

	/***********************************************************************
	**概述：
	*		将亮度、对比度、饱和度和色调重置为默认值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int resetPictureAdjustFilter();

	/***********************************************************************
	**概述：
	*		获取视频的帧率
	**输入：
	*		无
	***输出：
	*		p_nValue：传出参数，返回帧率。
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoFrameRate(int & p_nValue);

	/***********************************************************************
	**概述：
	*		获取视频的采集码率。
	**输入：
	*		无。
	***输出：
	*		p_nValue：传出参数，返回比特率.
	**返回值：
	*		SN_SUCCESS:成功；
	*		其他：失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getVideoBitRate(int & p_nValue);

	/************************************************************************
	**概述：
	*		改变一个播放器的显示窗口的大小
	**输入：
	*		x：播放器的显示窗口横坐标，单位为像素。
	*		y：播放器的显示窗口纵坐标，单位为像素。
	*		width：播放器的显示窗口宽，单位为像素。
	*		height：播放器的显示窗口高，单位为像素。
	**输出：
	*		无
	**返回值：
	*		无。
	**功能：
	*		改变一个播放器的显示窗口的大小。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	void resizeWindow(const int x, const int y, const int width, const int height);
	void getDispRect(int x, int y, int width, int height);

	/************************************************************************
	**概述：
	*		刷新显示区域
	**输入：
	*		无。
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功
	*		其他：		失败
	**功能：
	*		刷新显示区域。当播放处于暂停状态时，如果产生了窗口切换，会使视频显示区域变灰，
	*	调用此接口使解码库重绘播放区域，消除灰色效果。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int refresh( );
	
	/************************************************************************
	**概述：
	*		抓取当前帧存储为图片
	**输入：
	*		p_pszFileName：图像文件的绝对路径
	*		p_pszFormat: 抓图的图片格式，支持“JPG”和“BMP”
	**输出：
	*		无。
	**返回值：
	*		SN_SUCCESS：成功
	*		其他：		失败
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int snapshot( const char * p_pszFileName , const char * p_pszFormat = "JPG");

	/************************************************************************
	**概述：
	*		获得码流中原始图象大小。
	**输入：
	*		无。
	**输出：
	*		p_nWidth：原始图象宽，单位：像素。
	*		p_nHeight：原始图象高，单位：像素。
	**返回值：
	*		SN_SUCCESS：打开成功。
	*		其他：		打开失败。
	**功能：
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int getPictureSize(int & p_nWidth, int &p_nHeight);

	/************************************************************************
	**概述：
	*		设置回应消息。
	**输入：
	*		hHandle：播放句柄。
	*		idx：表示回应消息的类型，1：文件播放结束。
	*		hWnd：窗口句柄。
	*		lMsg：消息ID。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		对于文件结束消息LPARAM为hHandle，WPARAM无意义；对于抓图结束消息LPARAM为
	*	hHandle，WPARAM为文件名所在字符串地址(const char*)。
	************************************************************************/
	int setMessage( long idx, long hWnd, long lMsg );
	int setMessageEX( long idx, long hWnd, long lMsg,  long wparam, long lparam);

	/************************************************************************
	**概述：
	*		设置解码回调函数。当DecodeCallBack设置NULL时取消回调。
	**输入：
	*		hHandle：播放句柄，回调函数参数。当DecodeCallBack执行，回传该参数。一个32位整形值，当没有句柄时可以设置NULL
	*		fDecodeCallBack：解码回调函数。
	*		pUser：回调函数参数，客户程序指定的私有数据，当DecodeCallBack执行，回传该参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置解码回调函数，该函数在Player_Play之前调用，在Player_Stop时自动失效。
	*	解码部分不控制播放速度，只要客户程序从回调函数中返回，解码器就
	*	会解码下一部分数据。
	*		回调函数的参数说明：typedef long ( CALLBACK * DecodeCallBack ) ( long hHandle, const char * pBuf, long nSize, FRAME_INFO * pFrameInfo, void*  pUserData )
	*		hHandle：播放句柄
	*		pBuf：解码后的音视频数据
	*		nSize：解码后的音视频数据长度
	*		pUserData：客户程序指定的私有数据
	*		pFrameInfo：图像和声音信息FRAME_INFO结构定义如下：
	*		typedef struct
	*		{ 
	*			long nWidth; // 画面宽，单位为像素，如果是音频数据则为0
	*			long nHeight; // 画面高，单位为像素，如果是音频数据则为0
	*			long nStamp; // 时标信息，单位毫秒
	*			long nType; //数据类型，见下表
	*			long nFrameRate;// 编码时产生的图像帧率
	*		} FRAME_INFO;  
	*		数据类型表
	*		数据类型	简写	说明
	*		1	AUDIO16	音频。采样率16khz，单声道，每个采样点16位表示。
	*		2	RGB32	视频。每像素4字节，排列方式与位图相似，“BGR0”,第一个像素位于图像左下角
	*		3	YV12	视频，yv12格式。排列顺序“Y0Y1……”、“V0V1……”、“U0-U1……”
	*		4	UYVY	视频，uyvy格式。排列顺序“U0Y0V0Y1U2Y2V2Y3 … …”，第一个像素位于图像左上角
	*		5	YUV420	视频，YUV420格式。排列顺序“Y0Y1……”、“U0-U1……”、“V0V1……”
	*		6	yuy2、yuyv	视频，yuy2或yuyv格式。排列顺序“Y0 U0 Y1 V0 Y2 U2 Y3 V2… …”，第一个像素位于图像左上角。
	*		7	AUDIO8	音频。采样率8khz，单声道，每个采样点16位表示。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setDecodeCallBack( long p_hHandle, DecodeCallBack fDecodeCallBack, void * pUser);
	

	/************************************************************************
	**概述：
	*		设置显示回调函数,当DrawCallBack设置NULL时取消回调。
	**输入：
	*		hHandle：播放句柄，回调函数参数。当DrawCallBack执行，回传该参数。一个32位整形值，当没有句柄时可以设置NULL
	*		fDrawCallBack：显示回调函数。
	*		pUserData：回调函数参数，客户程序指定的私有数据，当DrawCallBack执行，回传该参数。
	**输出：
	*		无。
	**返回值：
	*		执行成功返回0，错误时返回错误码。
	**功能：
	*		设置显示回调函数，该函数在Player_Play之前调用，在Player_Stop时自动失效。用来获得当
	*	前解码器绘制的设备上下文，提供客户程序在视频上叠加内容的机会。
	*		显示回调函数long (CALLBACK *DrawCallBack)(long hHandle, HDC hDc, void *pUser)参数说明：
	*		hHandle：播放句柄。
	*		hDC：绘图设备上下文。
	*		pUser： 客户程序指定的私有数据。
	*		此方法适用于文件方式播放与流方式播放。
	************************************************************************/
	int setDrawCallBack(long p_hHandle, DrawCallBack fDrawCallFunc, void* pUserData, bool p_bUseDestResolution=false );

public:
	//实时录像
	void setRecordFile(const char* p_pszFileName);

	//设置录像格式（如果不设置，按照原文件的默认格式）
	//（p_nFileFormat： 1：TS流，4：PS流,具体可查看RecorderParam.h定义）
	void setRecordFileFormat(const int p_nFileFormat);

	//设置录像头
	void setRecordFileHead(const char* p_pszRecordFileHead, const int p_nRecordFileLength);

	//开始录像
	int startRecord();

	//停止录像
	int stopRecord();

	/************************************************************************
	**概述：
	*		获取录制状态。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		当前音视频录制的状态
	**功能：
	*		
	*************************************************************************/
	int getRecordStatus();

public:
	/************************************************************************
	**概述：
	*		放大显示视频图像。
	**输入：
	*		x：需要放大显示的区域的x坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		y：需要放大显示的区域的y坐标，该坐标为相对于当前显示视频窗口的坐标。
	*		width：需要放大显示的区域的宽度。
	*		height：需要放大显示的区域的高度。
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		将用户划的区域放大显示
	************************************************************************/
	int zoomInVideo(const unsigned int x, const unsigned int y, const unsigned int width, const unsigned int height);

	/************************************************************************
	**概述：
	*		放大当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		按照一定的比率放大当前显示的视频图像
	************************************************************************/
	int zoomInVideo();

	/************************************************************************
	**概述：
	*		缩小当前显示视频图像。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		SN_SUCCESS：成功。
	*		< 0：		失败。
	**功能：
	*		按照一定的比率缩小当前显示的视频图像
	************************************************************************/
	int zoomOutVideo();

	/************************************************************************
	**概述：
	*		恢复正常的视频图像显示。
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void restoreVideo();

	/************************************************************************
	**概述：
	*		设置视频显示模式
	**输入：
	*		p_nDrawMode：
	*					1:DDraw优先
	*					2:D2D优先
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setDrawVideoMode(const int p_nDrawMode);

	void setDrawFuncForLayer(long hHandle, void* p_DrawFunc,void *pUser);

	void setDrawIntelligentData(bool p_bDrawIntelligentData);

	void setFisheyeData(const std::vector<_RECT> p_objRectList);
	

private:
	//long recordCallBack1( long p_hHandle, AVData* p_pobjAVData, int p_nStreamFormat, void* p_pUserData);

private:

	//播放类型
	enum PlayType
	{
		PLAY_TYPE_UNKNOW	= 0,
		PLAY_TYPE_FILE		= 1,
		PLAY_TYPE_STREAM	= 2
	};

	SNPlayer(const SNPlayer&);
	const SNPlayer& operator=(const SNPlayer&);

private:
	PlayType				m_nPlayType;
	VideoInfo				m_objVideoInfo;
	AudioInfo				m_objAudioInfo;

	SNLivePlayer*			m_pobjLivePlayer;
	FilePlayer* 			m_pobjFilePlayer;
	bool					m_isFileOpened;

private:
	int						m_nDrawVideoMode;
	bool					m_bStretchMode;
	bool					m_bAutoResizeFlag;
	bool					m_bDrawVideoFlag;
	bool					m_bUseTimeStamp;
	int						m_nPlayMode ;
	int						m_nPlayBufferSize ;//1秒钟缓冲
	int						m_nInputQueueSize;

	unsigned int			m_hDisplayWnd;
	int						m_x;
	int						m_y;
	int						m_width;
	int						m_height;

private:
	long					m_hFileEndCallbackHandle;
	FileEndCallback			m_fFileEndCallback;
	void*					m_pFileEndCallbackUserData;

	long					m_hDecodeCallBackHandle; 
	DecodeCallBack			m_fDecodeCallBack; 
	void *					m_pfDecodeCallBackUserData;

	long					m_hDrawCallFuncHandle;
	DrawCallBack			m_fDrawCallFunc; 
	void*					m_pfDrawCallFuncUserData;
	bool					m_bDrawCallFuncUseDestResolution;

	long					m_idx;
	long					m_hWnd; 
	long					m_lMsg; 
	long					m_nWparam; 
	long					m_nLparam; 

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif//SN_PLAYER_H_
