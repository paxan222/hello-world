#ifndef _ALARMINFOEX_H_
#define _ALARMINFOEX_H_

#include "DomainConst.h"
#include "SNPlatOS.h"
#include "AlarmType.h"
#include "TimeStruct.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API AlarmInfoEx
{
public:
	AlarmInfoEx(void);
	~AlarmInfoEx(void);

	AlarmInfoEx(const AlarmInfoEx &p_AlarmInfoEx);

public:
	/***********************************************************************
	**概述：
	*		设置设备Id。
	**输入：
	*		p_pszDeviceId：设备Id
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：
	*		获取设备Id
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备ID
	**功能：
	*
	***************************************************************************/
	const char* getDeviceId() const;


	/***********************************************************************
	**概述：
	*		设置设备IP地址
	**输入：
	*		p_strDeviceIP：设备IP地址
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setDeviceIP(const char* p_pszDeviceIP);

	/***********************************************************************
	**概述：
	*		获取设备IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备IP地址
	**功能：
	************************************************************************/
	const char* getDeviceIP() const;
	
	/***********************************************************************
	**概述：
	*		设置设备类型
	**输入：
	*		p_nDeviceType：设备类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setDeviceType(int p_nDeviceType);

	/***********************************************************************
	**概述：
	*		获取设备类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备类型
	**功能：
	************************************************************************/
	int getDeviceType() const;

	/***********************************************************************
	**概述：
	*		设置报警主类型
	**输入：
	*		p_nMajorType：主类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setMajorType(int p_nMajorType);

	/***********************************************************************
	**概述：
	*		获取报警主类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警主类型
	**功能：
	************************************************************************/
	const int getMajorType() const;

	
	/***********************************************************************
	**概述：
	*		设置报警子类型
	**输入：
	*		p_nMinorType：子类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setMinorType(int p_nMinorType);
	
	/***********************************************************************
	**概述：
	*		获取报警子类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警子类型
	**功能：
	************************************************************************/
	const int getMinorType() const;

	/***********************************************************************
	**概述：
	*		设置源ID
	**输入：
	*		p_strSourceId：源ID
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setSourceId(const char* p_pszSourceId);

	/***********************************************************************
	**概述：
	*		获取源ID
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		源ID
	**功能：
	************************************************************************/
	const char* getSourceId() const;

	/***********************************************************************
	**概述：
	*		设置源名称
	**输入：
	*		p_strSourceName：源名称
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setSourceName(const char* p_pszSourceName);

	/***********************************************************************
	**概述：
	*		获取源名称
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		源名称
	**功能：
	************************************************************************/
	const char* getSourceName() const;

	/***********************************************************************
	**概述：
	*		设置启动/结束标志
	**输入：
	*		p_nAlarmFlag：设置启动1/结束标志0
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setAlarmFlag(int p_nAlarmFlag);

	/***********************************************************************
	**概述：
	*		获取启动/结束标志
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		启动/结束标志
	**功能：
	************************************************************************/
	const int getAlarmFlag() const;


	/***********************************************************************
	**概述：
	*		设置报警时间
	**输入：
	*		p_objTime：报警时间
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	************************************************************************/
	void setAlarmTime(unsigned long p_nTime);
	void setStructAlarmTime(const TimeStruct& p_objTime);

	/***********************************************************************
	**概述：
	*		获取报警时间
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警时间
	**功能：
	************************************************************************/
	const unsigned long getAlarmTime() const;
	const TimeStruct& getStructAlarmTime() const;

	/***********************************************************************
	**概述：
	*		设置描述
	**输入：
	*		p_strDescription：描述
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setDescription(const char* p_pszDescription);

	/***********************************************************************
	**概述：
	*		获取描述
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		描述
	**功能：
	************************************************************************/
	const char* getDescription() const;
	
	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objAlarmInfoEx ：报警信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	AlarmInfoEx& operator = (const AlarmInfoEx &p_objAlarmInfoEx);

private:
	char				m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];				//设备id
	char				m_szDeviceIp[CONST_MAXLENGTH_IP + 1];					//设备IP地址
	int					m_nDeviceType;											//设备类型,如果是磁盘报警表示磁盘类型。
	int					m_nMajorType;											//报警主类型，如果是磁盘报警，描述项表示报警的磁盘名，如果是数据源报警，描述项表示设备CameraId。
	int					m_nMinorType;											//报警子类型
	char				m_szSourceId[CONST_MAXLENGTH_ALARM_SOURCE_ID + 1];		//源ID
	char				m_szSourceName[CONST_MAXLENGTH_ALARMSOURCENAME + 1];	//源名称
	int					m_nAlarmFlag;											//启动/结束标志,（1：报警产生，0：报警消除）
	unsigned long		m_nAlarmTime;											//报警时间
	TimeStruct			m_objAlarmTime;											//报警时间

	char				m_szDescription[CONST_MAXLENGTH_ALARM_DESCRIPTION + 1];	//描述
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_ALARMINFOEX_H_

