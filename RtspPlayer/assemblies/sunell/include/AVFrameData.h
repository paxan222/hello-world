#ifndef _AVFrameData_H_
#define _AVFrameData_H_
/*
#ifdef __cplusplus
extern "C" {
#endif
*/ 

#include "EncoderType.h"
#include "StreamFormat.h"
#include "FrameType.h"
#include "DomainConst.h"
#include "SNPlatOS.h"

#if defined( WIN32 )
	typedef __int64				INT64;
#else
	typedef long long			INT64;
#endif

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API AVFrameData
{
public:
	AVFrameData();
	~AVFrameData();

public:
	/***********************************************************************
	**概述：
	*		设置设备Id。
	**输入：
	*		p_pszDeviceId：设备Id
	**输出：
	*		无
	**返回值：
	*		true	：设置成功
	*		false   ：设置失败
	**功能：
	************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：
	*		获取设备Id
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备ID
	**功能：
	*
	***************************************************************************/
	const char* getDeviceId() const;


	/************************************************************************
	**概述：
	*		设置流格式
	**输入：
	*		p_nStreamFormat : 流格式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setStreamFormat(const int p_nStreamFormat);

	/************************************************************************
	**概述：
	*		获取流格式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		流格式
	**功能：
	*		
	**************************************************************************/
	const int getStreamFormat() const;


	/************************************************************************
	**概述：
	*		设置原始流数据类型
	**输入：
	*		p_nESStreamType： 原始流数据类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setESStreamType(const int p_nESStreamType);

	/************************************************************************
	**概述：
	*		获取原始流数据类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		原始流数据类型
	**功能：
	*		
	************************************************************************/
	const int getESStreamType() const;

	/************************************************************************
	**概述：
	*		设置产生音视频数据的摄像机的编号
	**输入：
	*		p_nCameraNo : 影像的传输频道
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置产生音视频数据的摄像机的编号
	************************************************************************/
	void setCameraNo(const int p_nCameraNo);

	/************************************************************************
	**概述：
	*		获取产生音视频数据的摄像机的编号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产生音视频数据的摄像机的编号
	**功能：
	*		获取产生音视频数据的摄像机的编号
	**************************************************************************/
	const int getCameraNo() const;

	/************************************************************************
	**概述：
	*		设置数据的编码格式
	**输入：
	*		p_nEncoderType	: 编码格式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置数据的编码格式
	**************************************************************************/
	void setEncoderType(const int p_nEncoderType);

	/************************************************************************
	**概述：
	*		获取数据的编码格式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码格式
	**功能：
	*		获取数据的编码格式
	**************************************************************************/
	const int getEncoderType() const;

	/************************************************************************
	**概述：
	*		设置音视频数据的帧序列号
	**输入：
	*		p_nSequenceId : 帧序列号
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置音视频数据的帧序列号
	**************************************************************************/
	void setSequenceId(const unsigned int p_nSequenceId);

	/************************************************************************
	**概述：
	*		获取音视频数据的帧序列号
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧序列号
	**功能：
	*		获取音视频数据的帧序列号，用来对音视频数据进行排序
	**************************************************************************/
	const unsigned int getSequenceId() const;

	/************************************************************************
	**概述：
	*		设置视频帧类型
	**输入：
	*		p_nFrameType : 视频帧类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置影像的数据帧类型。
	**************************************************************************/
	void setFrameType(const int p_nFrameType);

	/************************************************************************
	**概述：
	*		获取视频帧类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频帧类型
	**功能：
	*		获取视频帧类型
	**************************************************************************/
	const int getFrameType() const;

	/************************************************************************
	**概述：
	*		设置帧数据的时间戳
	**输入：
	*		p_nTimeStamp ：帧数据的时间戳,单位为微秒
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置帧数据的时间戳。
	**************************************************************************/
	void setTimeStamp(const INT64 p_nTimeStamp);

	/************************************************************************
	**概述：
	*		获取帧数据的时间戳
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧数据的时间戳
	**功能：
	*		获得帧数据的时间戳。
	**************************************************************************/
	const INT64 getTimeStamp() const;

	/************************************************************************
	**概述：
	*		设置帧数据,将设置的帧数据拷贝到本类的缓冲中，在使用该方法是必须调用alloc方法
	*		分配缓冲，设置的帧数据长度不能大于缓冲大小，否则返回false
	**输入：
	*		p_pszData     ：帧数据
	*		p_nDataLength ：帧数据长度
	**输出：
	*		无
	**返回值：
	*		设置成功返回true，否则返回false
	**功能：
	*		设置帧数据。
	**************************************************************************/
	bool setData(const char *p_pszData, const unsigned int p_nDataLength);

	/************************************************************************
	**概述：
	*		设置帧数据,设置的帧数据不拷贝，调用该方法是不需调用alloc分配缓冲
	**输入：
	*		p_pszData     ：帧数据
	*		p_nDataLength ：帧数据长度
	**输出：
	*		无
	**返回值：
	*		设置成功返回true，否则返回false
	**功能：
	*		设置帧数据。
	**************************************************************************/
	bool setDataEx(const char *p_pszData, const unsigned int p_nDataLength);

	/************************************************************************
	**概述：
	*		获取帧数据
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧数据
	**功能：
	*		获得帧数据。
	**************************************************************************/
	const char* getData() const;

	/************************************************************************
	**概述：
	*		获取帧数据长度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧数据长度
	**功能：
	*		获得帧数据长度。
	**************************************************************************/
	const int getDataLen() const;

	/************************************************************************
	**概述：
	*		设置帧率
	**输入：
	*		p_nFrameRate：帧率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置帧率。
	**************************************************************************/
	void setFrameRate(const int p_nFrameRate);

	/************************************************************************
	**概述：
	*		获取帧率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧率
	**功能：
	*		获得帧率。
	**************************************************************************/
	const int getFrameRate() const;

	/************************************************************************
	**概述：
	*		设置音视频数据比特率
	**输入：
	*		p_nBitRate：音视频数据比特率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置音视频数据比特率。
	**************************************************************************/
	void setBitRate(const int p_nBitRate);

	/************************************************************************
	**概述：
	*		获取音视频数据比特率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		音视频数据比特率
	**功能：
	*		获取音视频数据比特率。
	**************************************************************************/
	const int getBitRate() const;

	/************************************************************************
	**概述：
	*		设置视频格式
	**输入：
	*		p_nImageFormatId：视频格式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频格式。
	**************************************************************************/
	void setImageFormatId(const int p_nImageFormatId);

	/************************************************************************
	**概述：
	*		获取视频格式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频格式
	**功能：
	*		获得视频格式。
	**************************************************************************/
	const int getImageFormatId() const;

	/************************************************************************
	**概述：
	*		设置视频图像宽度
	**输入：
	*		p_nImageWidth：视频宽度
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频宽度。
	**************************************************************************/
	void setImageWidth(const int p_nWidth);

	/************************************************************************
	**概述：
	*		获取视频高度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频高度
	**功能：
	*		获得视频高度。
	**************************************************************************/
	const int getImageWidth() const;

	/************************************************************************
	**概述：
	*		设置视频图像高度
	**输入：
	*		p_nImageWidth：视频高度
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频宽度。
	**************************************************************************/
	void setImageHeight(const int p_nHeight);

	/************************************************************************
	**概述：
	*		获取视频高度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频高度
	**功能：
	*		获得视频高度。
	**************************************************************************/
	const int getImageHeight() const;

	/************************************************************************
	**概述：
	*		设置视频制式
	**输入：
	*		p_nVideoSystem：视频制式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频制式。
	**************************************************************************/
	void setVideoSystem(const int p_nVideoSystem);

	/************************************************************************
	**概述：
	*		获取视频制式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频制式
	**功能：
	*		获得视频制式。
	**************************************************************************/
	const int getVideoSystem() const;

	/************************************************************************
	**概述：
	*		设置视频码流ID
	**输入：
	*		p_nStreamId：视频码流ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置视频码流ID。
	**************************************************************************/
	void setStreamId(int p_nStreamId);
	
	/************************************************************************
	**概述：
	*		获取视频码流ID
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频码流ID
	**功能：
	*		视频码流ID。
	**************************************************************************/
	int getStreamId() const;
	
	/************************************************************************
	**概述：
	*		设置时区
	**输入：
	*		p_nTimeZone：时区
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置时区。
	**************************************************************************/
	void setTimeZone(int p_nTimeZone);

	/************************************************************************
	**概述：
	*		获取时区
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		时区
	**功能：
	*		获取时区。
	**************************************************************************/
	int getTimeZone() const;

	/************************************************************************
	**概述：
	*		设置夏令时
	**输入：
	*		p_nDaylightSavingTime：夏令时
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置夏令时。
	**************************************************************************/
	void setDaylightSavingTime(int p_nDaylightSavingTime);

	/************************************************************************
	**概述：
	*		获取夏令时
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		夏令时
	**功能：
	*		获取夏令时。
	**************************************************************************/
	int getDaylightSavingTime() const;

public:

	/************************************************************************
	**概述：
	*		分配帧数据缓冲
	**输入：
	*		p_nFrameLen：需要被分配的帧长度
	**输出：
	*		无
	**返回值：
	*		true：分配成功
	*		false：分配失败
	**功能：
	*		分配帧数据缓冲。
	**************************************************************************/
	bool alloc(const unsigned int p_nFrameLen);

	/************************************************************************
	**概述：
	*		释放帧数据缓冲
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		释放已经分配的帧数据缓冲。
	**************************************************************************/
	void free();

	/************************************************************************
	**概述：
	*		获取帧数据缓冲的长度
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		帧数据缓冲的长度
	**功能：
	*		获取帧数据缓冲的长度。
	**************************************************************************/
	const unsigned int  getFrameBufLen() const;

	/************************************************************************
	*概述：
	*		赋值函数
	**输入：
	*		p_objAVFrameData：命令数据对象
	**输出：
	*		无
	**返回值：
	*		命令数据对象
	**功能：
	*
	*************************************************************************/
	//AVFrameData& operator =(const AVFrameData& p_objAVFrameData);

private:
	char m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1]; //设备id

	int m_nStreamFormat;						//1表示原始流，2表示TS混合流

	int m_nESStreamType;						//原始流类型，1表示视频，2表示音频

	int m_nEncoderType;							//编码格式

	int m_nCameraNo;							//摄像机号，表示数据来自第几路

	unsigned int m_nSequenceId;					//数据帧序号

	int m_nFrameType;							//数据帧类型,1表示I帧, 2表示P帧, 0表示未知类型

	INT64 m_nTimeStamp;							//数据采集时间戳，单位为毫秒

	char *m_pszData;							//数据

	unsigned int m_nDataLength;					//数据有效长度

	int m_nFrameRate;							//帧率

	int	m_nBitRate;								//当前码率　

	int m_nImageFormatId;						//当前格式

	int m_nImageWidth;							//视频宽度

	int m_nImageHeight;							//视频高度

	int m_nVideoSystem;							//当前视频制式

	unsigned int m_nFrameBufLen;				//当前缓冲长度

	int m_nStreamId;							// 流ID
	int m_nTimezone;							// 时区
	int m_nDaylightSavingTime;					//夏令时

	bool m_bFreeBufFlag;
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_AVFrameData_H_
