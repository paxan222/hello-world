#ifndef _LOGINFO_H_
#define _LOGINFO_H_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API LogInfo
{
public:

	LogInfo();

	~LogInfo();

	//拷贝构造函数
	LogInfo(const LogInfo &p_objLogInfo);

public:
	/************************************************************************
	**概述：设置设备ID
	*
	**输入：
	*		p_pszDeviceId ：设备ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备ID
	************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：获取设备ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备ID
	**功能：       
	*		获取设备ID
	************************************************************************/
	const char* getDeviceId() const;


	/************************************************************************
	**概述：设置设备IP
	*
	**输入：
	*		p_szDeviceIp ：设备IP
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置设备IP
	************************************************************************/
	bool setDeviceIp(const char * p_pszDeviceIp);

	/************************************************************************
	**概述：获取设备IP
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备IP
	**功能：       
	*		获取设备IP
	************************************************************************/
	const char* getDeviceIp() const;


	/************************************************************************
	**概述：设置摄像机ID
	*
	**输入：
	*		p_nCameraId ：摄像机ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置摄像机ID
	************************************************************************/
	void setCameraId(const int p_nCameraId);

	/************************************************************************
	**概述：获取摄像机ID
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		摄像机ID
	**功能：       
	*		获取摄像机ID
	************************************************************************/
	const int getCameraId() const;


	/************************************************************************
	**概述：设置用户名
	*
	**输入：
	*		p_pszUserName ：用户名
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*		设置用户名
	************************************************************************/
	bool setUserName(const char * p_pszUserName);

	/************************************************************************
	**概述：获取用户名
	*
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		用户名
	**功能：       
	*		获取用户名
	************************************************************************/
	const char* getUserName() const;


	/************************************************************************
	**概述：
	*		设置主类型
	**输入：
	*		p_nMajorType：要设置的主类型(具体值定义请参考LogType.h)
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	void setMajorType(const int p_nMajorType);

	/************************************************************************
	**概述：
	*		获取主类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		主类型(具体值定义请参考LogType.h)
	**功能：       
	************************************************************************/
	const int getMajorType() const;


	/************************************************************************
	**概述：
	*		设置次类型
	**输入：
	*		p_nMinorType 要设置的次类型(具体值定义请参考LogType.h)
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	void setMinorType(const int p_nMinorType);

	/************************************************************************
	**概述：
	*		获取次类型
	**输入：
	*		无
	**输出：
	*		无
	**返返回值：
	*		次类型(具体值定义请参考LogType.h)
	**功能：       
	**************************************************************************/
	const int getMinorType() const ;


	/************************************************************************
	**概述：
	*		设置日志产生时间
	**输入：
	*		p_nLogTime：日志产生时间
	**输出：
	*		无
	**返返回值：
	*		无
	**功能：       
	**************************************************************************/
	void setLogTime(const unsigned long p_nLogTime);

	/************************************************************************
	**概述：
	*		获取日志产生时间
	**输入：
	*		无
	**输出：
	*		无
	**返返回值：
	*		日志产生时间
	**功能：       
	**************************************************************************/
	const unsigned long getLogTime() const;

	
	/************************************************************************
	**概述：
	*		设置日志信息
	**输入：
	*		p_pszLogData：要设置的日志信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	bool setLogData(const char* p_pszLogData);

	/************************************************************************
	*概述：
	*		获取日志信息
	*输入：
	*		无
	*输出：
	*		无
	*返回值：
	*		日志信息
	*功能：       
	*************************************************************************/
	const char* getLogData() const;

	
	bool setOldParamInfo(const char* p_pszOldParamInfo);
	const char* getOldParamInfo() const;

	bool setNewParamInfo(const char* p_pszNewParamInfo);
	const char* getNewParamInfo() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objLogInfo：日志信息对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	LogInfo &operator =(const LogInfo &p_objLogInfo);

	/************************************************************************
	**概述：
	*		定义“==”操作符
	**输入：
	*		p_objLogInfo：日志信息对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	************************************************************************/
	bool operator == (const LogInfo &p_objLogInfo) const;
	
	bool operator < (const LogInfo &p_objLogInfo) const;

private:
	char			m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];			//设备ID

	char			m_szDeviceIp[CONST_MAXLENGTH_IP + 1];					//设备IP

	int				m_nCameraId;										//摄像机ID号

	char			m_szUserName[CONST_MAXLENGTH_USERNAME + 1];			//用户名

	int				m_nMajorType;										//主类型

	int				m_nMinorType;										//次类型

	unsigned long	m_nLogTime;											//日志产生时间

	char			m_szLogData[CONST_MAXLENGTH_LOG_DATA + 1];			//日志信息

	char			m_szOldParamInfo[CONST_MAXLENGTH_LOG_PARAM_DATA + 1];			//日志信息
	char			m_szNewParamInfo[CONST_MAXLENGTH_LOG_PARAM_DATA + 1];			//日志信息
	
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif //_LOGINFO_H_
