#ifndef _WRITEPOLICY_H_
#define _WRITEPOLICY_H_

#include "DomainConst.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API WritePolicy
{
public :
	enum StoragePolicy
	{
		STORAGE_POLICY_CYCLE = 1,		  //循环存储
		STORAGE_POLICY_FULLSTOP = 2		  //磁盘满停止
	};

	enum RecordType
	{
		RECORD_TYPE_SIZE = 1,		  //按文件大小录制
		RECORD_TYPE_TIME = 2		  //按时间长度录制
	};


public:
	WritePolicy();
	~WritePolicy();

	//拷贝构造函数
	WritePolicy(const WritePolicy &p_objWritePolicy);

public:
	/***********************************************************************
	**概述：
	*		设置录像文件的存储策略
	**输入：
	*		p_nPolicy：存储策略，STORAGE_POLICY_CYCLE表示循环存储，
	*							STORAGE_POLICY_FULLSTOP便是磁盘满时停止
	**输出：
	*		
	**返回值：
	*	无
	**功能：
	*		设置录像文件的存储策略
	************************************************************************/
	void setStoragePolicy(const int p_nPolicy);

	/***********************************************************************
	**概述：
	*		获取录像文件的存储策略
	**输入：
	*		p_nPolicy：存储策略，STORAGE_POLICY_CYCLE表示循环存储，
	*							STORAGE_POLICY_FULLSTOP便是磁盘满时停止
	**输出：
	*		
	**返回值：
	*		录像文件的存储策略，STORAGE_POLICY_CYCLE表示循环存储，
	*						   STORAGE_POLICY_FULLSTOP便是磁盘满时停止
	**功能：
	*		获取录像文件的存储策略
	************************************************************************/
	const int getStoragePolicy() const;


	/***********************************************************************
	**概述：
	*		设置录制类型
	**输入：
	*		p_nMode：录制类型，1：按文件大小录制，2：按时间长度录制
	**输出：
	*		
	**返回值：
	*	无
	**功能：
	*		
	************************************************************************/
	void setRecordLengthMode(const int p_nMode);

	/***********************************************************************
	**概述：
	*		获取录制类型
	**输入：
	*		
	**输出：
	*		
	**返回值：
	*		录制类型
	**功能：
	*		
	************************************************************************/
	const int getRecordLengthMode() const;	


	/***********************************************************************
	**概述：
	*		设置单个录像文件的占用磁盘的最大空间
	**输入：
	*		p_nMaxSize：最大尺寸，以MB为单位
	**输出：
	*		
	**返回值：
	*	无
	**功能：
	*		设置单个录像文件的占用磁盘的最大空间
	************************************************************************/
	void setRecordFileMaxSize(const int p_nMaxSize);

	/***********************************************************************
	**概述：
	*		获取单个录像文件的占用磁盘的最大空间
	**输入：
	*		
	**输出：
	*		
	**返回值：
	*		单个录像文件的占用磁盘的最大空间
	**功能：
	*		获取单个录像文件的占用磁盘的最大空间
	************************************************************************/
	const int getRecordFileMaxSize() const;	


	/***********************************************************************
	**概述：
	*		设置单个录像文件的时间长度
	**输入：
	*		p_nTime：单个录像文件的时间长度
	**输出：
	*		
	**返回值：
	*	无
	**功能：
	*		
	************************************************************************/
	void setRecordFileTime(const int p_nTime);

	/***********************************************************************
	**概述：
	*		获取单个录像文件的时间长度
	**输入：
	*		
	**输出：
	*		
	**返回值：
	*		单个录像文件的时间长度
	**功能：
	*		获取单个录像文件的占用磁盘的最大空间
	************************************************************************/
	const int getRecordFileTime() const;	


	/***********************************************************************
	**概述：
	*		设置录制文件后缀名
	**输入：
	*		p_nFileNameSuffix：录制文件后缀名
	**输出：
	*		
	**返回值：
	*	无
	**功能：
	*		
	************************************************************************/
	bool setFileNameSuffix(const char* p_pszFileNameSuffix);

	/***********************************************************************
	**概述：
	*		获取录制文件后缀名
	**输入：
	*		
	**输出：
	*		
	**返回值：
	*		录制文件后缀名
	**功能：
	*		
	************************************************************************/
	const char* getFileNameSuffix() const;

	/***********************************************************************
	**概述：
	*		设置录像格式类型
	**输入：
	*		p_nRecordFormatType：录像格式类型，1为MPEG2PS流，2为自定义流
	**输出：
	*		
	**返回值：
	*		
	**功能：
	*		
	************************************************************************/
	void setRecordFormatType(const int p_nRecordFormatType);

	/***********************************************************************
	**概述：
	*		获取录像格式类型
	**输入：
	*		
	**输出：
	*		
	**返回值：
	*		录制格式类型
	**功能：
	*		
	************************************************************************/
	const int getRecordFormatType() const;

	/****************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		赋值后的写策略对象 
	**功能：
	*		
	*****************************************************************************/
	WritePolicy & operator=(const WritePolicy &p_objWritePolicy);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objWritePolicy：WritePolicy类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个WritePolicy类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator==(const WritePolicy &p_objWritePolicy);

private:
	int	m_nStoragePolicy;											//录制文件的存储策略

	int	m_nRecordLengthMode;										//录像类型, （1：按大小录制；2：按时间录制）
	int	m_nRecordFileMaxSize;										//单个录像文件的占用磁盘的最大空间, 以M为单位
	int	m_nRecordFileTime;											//单个录像文件的时间大小, 以秒（S）为单位

	char m_szFileNameSuffix[CONST_MAXLENGTH_FILENAME_SUFFIX + 1];	//录制文件后缀名

	int	m_nRecordFormatType;										//录像格式	1为MPEG2PS流，2为自定义流, 3为MPEG2TS流
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_WRITEPOLICY_H_
