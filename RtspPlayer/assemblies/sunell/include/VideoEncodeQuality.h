#ifndef _VIDEOENCODEQUALITY_H_
#define _VIDEOENCODEQUALITY_H_

#include "SNPlatOS.h"
#include "ImageFormat.h"
#include "BitrateType.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/


class SN_DLL_API VideoEncodeQuality
{
public:

	VideoEncodeQuality();

	~VideoEncodeQuality();

	VideoEncodeQuality(const VideoEncodeQuality &p_objVideoEncodeQuality);

public:

	/************************************************************************
	**概述：
	*		设置帧模式
	**输入：
	*		p_nFrameMode ：要设置的编码帧模式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setVideoSystem(const int p_nVideoSystem);

	/************************************************************************
	**概述：
	*		得到已设置的帧模式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码帧模式
	**功能：       
	*
	*************************************************************************/
	const int getVideoSystem() const ;

	/************************************************************************
	**概述：
	*		设置编码帧速
	**输入：
	*		p_dFrameRate ：要设置的编码帧速
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	*************************************************************************/
	void setFrameRate(const double p_dFrameRate);

	/************************************************************************
	**概述：
	*		得到已设置的编码帧速
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码帧速
	**功能：       
	*
	************************************************************************/
	const double getFrameRate() const;

	/************************************************************************
	**概述：
	*		设置分辨率
	**输入：
	*		p_nImageFormatId 要设置的分辨率,有以下三种类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setImageFormatId(const int p_nImageFormatId);

	/************************************************************************
	**概述：
	*		得到已设置的分辨率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码分辨率
	**功能：       
	*
	************************************************************************/
	const int getImageFormatId() const;


	/************************************************************************
	**概述：
	*		设置码率类型
	**输入：
	*		p_nBitRate：要设置的码率类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setBitRateType(const int p_nBitRateType);

	/************************************************************************
	**概述：
	*		获得码率类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		获得的码率类型
	**功能：       
	*
	************************************************************************/
	const int getBitRateType() const;


	/************************************************************************
	**概述：
	*		设置比特率
	**输入：
	*		p_nBitRate：要设置的比特率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setBitRate(const int p_nBitRate);

	/************************************************************************
	**概述：
	*		得到已设置的比特率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码比特率
	**功能：       
	*
	************************************************************************/
	const int getBitRate() const;


	/************************************************************************
	**概述：
	**		设置Q值
	**输入：
	*		p_nQuant ：要设置的Q值
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setQuant(const int p_nQuant);

	/************************************************************************
	**概述：
	*		得到已设置的Q值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		Q值
	**功能：       
	*
	************************************************************************/
	const int getQuant() const;


	/************************************************************************
	**概述：
	*		设置I帧间隔
	**输入：
	*		p_nIFrameInterval：要设置的I帧间隔（单位为秒）
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setIFrameInterval(const int p_nIFrameInterval);

	/************************************************************************
	**概述：
	*		得到已设置的I帧间隔（单位为秒）
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		I帧间隔
	**功能：       
	*
	************************************************************************/
	const int getIFrameInterval() const;

	/************************************************************************
	**概述：
	*		设置编码类型
	**输入：
	*		p_nEncodeType：要设置的编码格式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setEncodeType(const int p_nEncodeType);

	/************************************************************************
	**概述：
	*		得到已设置的编码类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		编码格式
	**功能：       
	*
	************************************************************************/
	const int getEncodeType() const;


	/************************************************************************
	**概述：
	*		设置视频质量
	**输入：
	*		p_nQuality：要设置的视频质量
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setQuality(const int p_nQuality);

	/************************************************************************
	**概述：
	*		得到已设置的视频质量
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频质量
	**功能：       
	*
	************************************************************************/
	const int getQuality() const;


	/************************************************************************
	**概述：
	*		设置码率
	**输入：
	*		p_nCodingFlag：要设置的码率
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setCodingFlag(const int p_nCodingFlag);

	/************************************************************************
	**概述：
	*		得到已设置的码率
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		码率
	**功能：       
	*
	************************************************************************/
	const int getCodingFlag() const;


	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objVideoEncodeQuality：视频编码质量对象
	**输出：
	*		无
	**返回值：
	*		赋值后的视频编码质量对象
	**功能：       
	*
	************************************************************************/
	VideoEncodeQuality& operator =(const VideoEncodeQuality& p_objVideoEncodeQuality);

	/************************************************************************
	**概述：
	*		定义“等于”符
	**输入：
	*		p_objVideoEncodeQuality：编码质量对象
	**输出：
	*		无
	**返回值：
	*		true ：对象中每个成员都相等
	*		false：对象中有一个或一个以上的成员不相等
	**功能：       
	*
	************************************************************************/
	bool operator == (const VideoEncodeQuality& p_objVideoEncodeQuality) const;

	bool operator < (const VideoEncodeQuality& p_objVideoEncodeQuality) const;

private:
	int m_nVideoSystem;		//编码帧模式

	double m_dFrameRate;	//编码帧速

	int m_nImageFormatId;	//图像格式

	int m_nBitRateType;     //码率类型

	int m_nBitRate;			//比特率

	int m_nQuant;			//Q值

	int m_nIFrameInterval;	//I帧的步长

	int m_nEncoderType;		//编码格式

	int m_nQuality;			//视频质量

	int m_nCodingFlag;		//码流：1：主码流，0：子码流

}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_VideoEncodeQuality_H_
