#ifndef _NTPPARAMV2ETER_H_
#define _NTPPARAMV2ETER_H_

#include "DomainConst.h"
#include "const.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API NTPParamV2
{
public:
	NTPParamV2(void);
	~NTPParamV2(void);

	//拷贝构造函数
	NTPParamV2(const NTPParamV2& p_objNTPParamV2);

public:

	/************************************************************************
	** 概述：
	*		设置IP协议类型
	**输入：
	*		p_nIPProtoVer：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setIPProtoVer(const int p_nIPProtoVer);

	/************************************************************************
	**概述：
	*		获取IP协议类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		IP协议类型
	************************************************************************/
	const int getIPProtoVer()  const;

	/************************************************************************
	**概述：
	*		设置是否启用NTP
	**输入：
	*		p_bFlag ：启用NTP标识
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setNTPEnableFlag(const bool p_bFlag);

	/************************************************************************
	**概述：
	*		获取启用NTP标识
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		启用NTP标识
	**功能：
	*
	************************************************************************/
	const bool getNTPEnableFlag() const;

	/************************************************************************
	**概述：
	*		设置 NTP服务器的地址
	**输入：
	*		p_pszNTPIp ：NTP服务器的IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	bool setNTPIp(const char * p_pszNTPIp);

	/************************************************************************
	**概述：
	*		获取 NTP服务器的IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		NTP服务器的IP地址
	**功能：
	*
	************************************************************************/
	const char * getNTPIp() const;

	/************************************************************************
	**概述：
	*		设置NTP服务器的端口
	**输入：
	*		p_nNTPPort ：NTP服务器的端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setNTPPort(const unsigned short p_nNTPPort);

	/************************************************************************
	**概述：
	*		获取NTP服务器的端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		NTP服务器的端口
	**功能：
	*
	************************************************************************/
	const unsigned short getNTPPort() const;

	/************************************************************************
	**概述：
	*		设置NTP的较时时间
	**输入：
	*		p_nRunTime ：NTP的较时时间，以小时为单位，即12表示12：00较时
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setNTPRunTime(const int p_nRunTime);

	/************************************************************************
	**概述：
	*		获取NTP的较时时间
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		NTP的较时时间
	**功能：
	*
	************************************************************************/
	const int getNTPRunTime() const;

	/************************************************************************
	**概述：
	*		赋值函数
	**输入：
	*		p_objNTPParamV2：NTP信息
	**输出：
	*		无
	**返回值：
	*		NTP信息
	*功能：
	*
	************************************************************************/
	NTPParamV2& operator =(const NTPParamV2& p_objNTPParamV2);

	/****************************************************************************
	**概述：
	*		定义“等于”操作符
	**输入：
	*		p_objNTPParamV2：NTPParamV2类的一个对象的引用。
	**输出：
	*		无
	**返回值：
	*		true:相等
	*		false：不相等
	**功能：
	*		两个NTPParamV2类的对象，所有属性均相等，则说明这两个对象相等，返回true
	*		如果有一个属性不等，则返回false。
	*****************************************************************************/
	bool operator == (const NTPParamV2& p_objNTPParamV2);

	/****************************************************************************
	**概述：
	*		复位，将成员变量恢复初始默认值
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		将成员变量恢复初始默认值
	*****************************************************************************/
	void reset();

private:
	bool			m_bNTPEnableFlag;						//是否启用NTP标识(false：不启用，true：启用)

	char			m_szNTPIp[CONST_MAXLENGTH_DN + 1];		//NTP服务器IP地址

	unsigned short	m_nNTPPort;								//NTP服务器的端口

	int				m_nRunTime;								//NTP较时时间

	int				m_nIPProtoVer;							//IP协议类型
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/


#endif //_NTPParamV2ETER_H_
