#ifndef _DEVICEGENERALINFO_H_
#define _DEVICEGENERALINFO_H_

#include "DomainConst.h"
#include "Version.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API DeviceSummaryInfo
{
public:
	DeviceSummaryInfo(void);
	~DeviceSummaryInfo(void);

	//拷贝构造函数
	DeviceSummaryInfo(const DeviceSummaryInfo &p_objDeviceSummaryInfo);

public:

	/************************************************************************
	**概述：
	*		设置网络视频设备名称
	**输入：
	*		p_pszDeviceName：网络视频设备名称
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*		若传入p_pszDeviceName为NULL，返回false
	*		若传入p_pszDeviceName长度大于CONST_MAXLENGTH_DEVICENAME，返回false
	*		若设置成功，返回true
	*************************************************************************/
	bool setDeviceName(const char* p_pszDeviceName);

	/************************************************************************
	**概述：
	*		获取网络视频设备名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备名称
	**功能：
	*    
	*************************************************************************/
	const char* getDeviceName() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的唯一标识符
	**输入：
	*		p_pszDeviceId：网络视频设备的唯一标识符
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setDeviceId(const char* p_pszDeviceId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的唯一标识符
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的唯一标识符
	**功能：
	*    
	*************************************************************************/
	const char* getDeviceId() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的设备型号
	**输入：
	*		p_pszManufacturerId：网络视频设备的设备型号
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerId(const char* p_pszManufacturerId);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备型号
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备型号
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerId() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的设备类型
	**输入：
	*		p_nDeviceType：网络视频设备的设备类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setDeviceType(int p_nDeviceType);

	/************************************************************************
	**概述：
	*		获取网络视频设备的设备类型
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的设备类型
	**功能：
	*    
	*************************************************************************/
	const int getDeviceType() const;


	/************************************************************************
	**概述：
	*		设置设置网络视频设备的厂商名称
	**输入：
	*		p_pszManufacturerName：设置网络视频设备的厂商名称
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setManufacturerName(const char* p_pszManufacturerName);

	/************************************************************************
	**概述：
	*		获取设置网络视频设备的厂商名称
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		设置网络视频设备的厂商名称
	**功能：
	*    
	*************************************************************************/
	const char* getManufacturerName() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的摄像机数
	**输入：
	*		p_nCameraNum：网络视频设备的摄像机数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setCameraNum(int p_nCameraNum);

	/************************************************************************
	**概述：
	*		获取网络视频设备的摄像机数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的摄像机数
	**功能：
	*    
	*************************************************************************/
	const int getCameraNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的报警输入通道数
	**输入：
	*		AlarmInNum：网络视频设备的报警输入通道数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setAlarmInNum(int p_nAlarmInNum);

	/************************************************************************
	**概述：
	*		获取设置网络视频设备的报警输入通道数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		设置网络视频设备的报警输入通道数
	**功能：
	*    
	*************************************************************************/
	const int getAlarmInNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的报警输出通道数
	**输入：
	*		p_nAlarmOutNum：网络视频设备的报警输出通道数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setAlarmOutNum(int p_nAlarmOutNum);

	/************************************************************************
	**概述：
	*		获取网络视频设备的报警输出通道数
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的报警输出通道数
	**功能：
	*    
	*************************************************************************/
	const int getAlarmOutNum() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的版本信息
	**输入：
	*		p_objVersion：网络视频设备的版本信息
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	*************************************************************************/
	void setVersion(const Version& p_objVersion);

	/************************************************************************
	**概述：
	*		获取网络视频设备的版本信息
	**输入：
	*		无
	**输出 ：
	*		无
	*返回值 ：
	*		网络视频设备的版本信息
	**功能：
	*    
	*************************************************************************/
	const Version& getVersion() const;


	/************************************************************************
	**概述：
	*		设置网络视频设备的视频制式
	**输入：
	*		p_nVideoSystem：视频制式
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setVideoSystem(int p_nVideoSystem);

	/************************************************************************
	**概述：
	*		获得网络视频设备的视频制式
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		视频制式
	**功能：       
	*
	************************************************************************/
	int getVideoSystem() const ;


	/************************************************************************
	**概述：
	*		设置网络视频设备的RS485串口的个数
	**输入：
	*		p_nRS485Num：RS485串口的个数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setRS485Num(int p_nRS485Num);

	/************************************************************************
	**概述：
	*		获得网络视频设备的RS485串口的个数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		RS485串口的个数
	**功能：       
	*
	************************************************************************/
	int getRS485Num() const ;


	/************************************************************************
	**概述：
	*		设置网络视频设备的RS232串口的个数
	**输入：
	*		p_nRS232Count：RS232串口的个数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setRS232Num(int p_nRS232Num);

	/************************************************************************
	**概述：
	*		获得网络视频设备的RS232串口的个数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		RS232串口的个数
	**功能：       
	*
	************************************************************************/
	int getRS232Num() const ;

	/************************************************************************
	**概述：
	*		设置网络视频设备的网卡的个数
	**输入：
	*		p_nNetworkCardNum：网卡的个数
	**输出：
	*		无
	**返回值：
	*		无
	**功能：       
	*
	************************************************************************/
	void setNetworkCardNum(int p_nNetworkCardNum);

	/************************************************************************
	**概述：
	*		获得网络视频设备的网卡的个数
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		网卡个数
	**功能：       
	*
	************************************************************************/
	int getNetworkCardNum() const;

	/************************************************************************
	**概述：
	*		设置产品模组信息
	**输入：
	*		p_pszProductModel：产品模组信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductModel(const char* p_pszProductModel);

	/************************************************************************
	**概述：
	*		获得产品模组信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产品模组信息
	**功能：       
	*
	************************************************************************/
	const char* getProductModel() const;
	

	/************************************************************************
	**概述：
	*		设置产品描述信息
	**输入：
	*		p_pszProductDescription：产品描述信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductDescription(const char* p_pszProductDescription);

	/************************************************************************
	**概述：
	*		获得产品描述信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		产品描述信息
	**功能：       
	*
	************************************************************************/
	const char* getProductDescription() const;
	

	/************************************************************************
	**概述：
	*		设置硬件模组信息
	**输入：
	*		p_pszHardwareModel：硬件模组信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setHardwareModel(const char* p_pszHardwareModel);

	/************************************************************************
	**概述：
	*		获得硬件模组信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		硬件模组信息
	**功能：       
	*
	************************************************************************/
	const char* getHardwareModel() const;


	/************************************************************************
	**概述：
	*		设置硬件描述信息
	**输入：
	*		p_pszHardwareDescription：硬件描述信息
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setHardwareDescription(const char* p_pszHardwareDescription);

	/************************************************************************
	**概述：
	*		获得硬件描述信息
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		硬件描述信息
	**功能：       
	*
	************************************************************************/
	const char* getHardwareDescription() const;


	/************************************************************************
	**概述：
	*		设置MAC地址
	**输入：
	*		p_pszMACAddress：MAC地址
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setMACAddress(const char* p_pszMACAddress);

	/************************************************************************
	**概述：
	*		获得MAC地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		MAC地址
	**功能：       
	*
	************************************************************************/
	const char* getMACAddress() const;
	

	/************************************************************************
	**概述：
	*		设置机器条形码
	**输入：
	*		p_pszBarCode：机器条形码
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setBarCode(const char* p_pszBarCode);

	/************************************************************************
	**概述：
	*		获得机器条形码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		机器条形码
	**功能：       
	*
	************************************************************************/
	const char* getBarCode() const;

	/************************************************************************
	**概述：
	*		设置机器SN码
	**输入：
	*		p_pszBarCode：机器SN码
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setSN(const char* p_pszSN);

	/************************************************************************
	**概述：
	*		获得机器SN码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		机器SN码
	**功能：       
	*
	************************************************************************/
	const char* getSN() const;	

	/************************************************************************
	**概述：
	*		设置生产时间
	**输入：
	*		p_pszProductionTime：生产时间
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setProductionTime(const char* p_pszProductionTime);

	/************************************************************************
	**概述：
	*		获得生产时间
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		生产时间
	**功能：       
	*
	************************************************************************/
	const char* getProductionTime() const;


	/************************************************************************
	**概述：
	*		设置保留位1
	**输入：
	*		p_pszReserve1：保留位1
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setReserve1(const char* p_pszReserve1);

	/************************************************************************
	**概述：
	*		获得保留位1
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		保留位1
	**功能：       
	*
	************************************************************************/
	const char* getReserve1() const;
	

	/************************************************************************
	**概述：
	*		设置保留位2
	**输入：
	*		p_pszReserve2：保留位2
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setReserve2(const char* p_pszReserve2);

	/************************************************************************
	**概述：
	*		获得保留位2
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		保留位2
	**功能：       
	*
	************************************************************************/
	const char* getReserve2() const;
	

	/************************************************************************
	**概述：
	*		设置保留位3
	**输入：
	*		p_pszReserve3：保留位3
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setReserve3(const char* p_pszReserve3);

	/************************************************************************
	**概述：
	*		获得保留位3
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		保留位3
	**功能：       
	*
	************************************************************************/
	const char* getReserve3() const;
	

	/************************************************************************
	**概述：
	*		设置保留位4
	**输入：
	*		p_pszReserve4：设置保留位4
	**输出：
	*		无
	**返回值：
	*		true ：设置成功
	*		false：设置失败
	**功能：
	*
	*************************************************************************/
	bool setReserve4(const char* p_pszReserve4);

	/************************************************************************
	**概述：
	*		获得保留位4
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		保留位4
	**功能：       
	*
	************************************************************************/
	const char* getReserve4() const;


	/************************************************************************
	*概述：
	*		赋值函数
	**输入：
	*		p_objDeviceSummaryInfo：设备概要信息
	**输出：
	*		无
	**返回值：
	*		设备概要信息
	**功能：
	*
	*************************************************************************/
	DeviceSummaryInfo& operator = (const DeviceSummaryInfo& p_objDeviceSummaryInfo);


private:
	char	m_szDeviceName[CONST_MAXLENGTH_DEVICENAME + 1];							//设备名称
	char	m_szDeviceId[CONST_MAXLENGTH_DEVICEID + 1];								//设备唯一标识
	char	m_szManufacturerId[CONST_MAXLENGTH_MANUFACTURERID + 1];					//设备型号
	char	m_szManufacturerName[CONST_MAXLENGTH_MANUFACTURERNAME + 1];				//设备生产厂家


	char	m_szProductModel[CONST_MAXLENGTH_PRODUCTMODEL + 1];						//产品模组
	char	m_szProductDescription[CONST_MAXLENGTH_PRODUCTDESCRIPTION + 1];			//产品描述
	char	m_szHardwareModel[CONST_MAXLENGTH_HARDWAREMODEL + 1];					//硬件模组
		
	char	m_szHardwareDescription[CONST_MAXLENGTH_HARDWAREDESCRIPTION + 1];		//硬件描述
		
	char	m_szMACAddress[CONST_MAXLENGTH_MACADDRESS + 1];							//MAC地址
	char	m_szBarCode[CONST_MAXLENGTH_BARCODE + 1];								//机器条形码
	char    m_szSN[CONST_MAXLENGTH_SN + 1];                                         //SN序列号
	char	m_szProductionTime[CONST_MAXLENGTH_PRODUCTIONTIME + 1];					//生产时间

	char	m_szReserve1[CONST_MAXLENGTH_SUMMARYINFO_RESERVE + 1];
	char	m_szReserve2[CONST_MAXLENGTH_SUMMARYINFO_RESERVE + 1];
	char	m_szReserve3[CONST_MAXLENGTH_SUMMARYINFO_RESERVE + 1];
	char	m_szReserve4[CONST_MAXLENGTH_SUMMARYINFO_RESERVE + 1];

	int		m_nDeviceType;															//设备类型
	int		m_nCameraNum;															//通道数（摄像机数）
	int		m_nAlarmInNum;															//报警输入个数
	int		m_nAlarmOutNum;															//报警输出个数
	int		m_nRS485Num;															//RS485串口个数
	int		m_nRS232Num;															//RS232串口个数
	int		m_nNetworkCardNum;														//网卡个数

	Version m_objVersion;															//版本信息

	int		m_nVideoSystem;															//视频制式
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_DEVICEGENERALINFO_H_
