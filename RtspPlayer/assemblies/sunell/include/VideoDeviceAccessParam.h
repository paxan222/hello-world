#ifndef _VIDEODEVICEACCESSPARAM_H_
#define _VIDEODEVICEACCESSPARAM_H_

#include "const.h"
#include "DomainConst.h"
#include "DeviceType.h"
#include "SNPlatOS.h"

/**********************************************************************/
//此处用于控制文件编译字节对齐，拷贝时两行注释间内容需一起拷贝，
//结束处的“#ifdef PRAGMA_PACK”部分也要一起拷贝，否则pragma pack入栈出栈不匹配
#if(PRAGMA_PACK_DEFINE != 10000)
	# error Not included "SNPlatOS.h".
#endif
 
#ifdef PRAGMA_PACK
	#ifdef WIN32  
		#pragma pack(push, PRAGMA_PACK_CHAR)
	#endif

	#ifndef WIN32  
		#ifndef _PACKED_1_  
		  
		#define _PACKED_1_ __attribute__((packed, aligned(PRAGMA_PACK_CHAR)))	// for gcc   
		#endif  
	#else  
		#ifndef _PACKED_1_  
		#define _PACKED_1_  
		#endif  
	#endif  
#else  
	#ifndef _PACKED_1_  
	#define _PACKED_1_  
	#endif  
#endif
/**********************************************************************/

class SN_DLL_API VideoDeviceAccessParam
{

public:

	VideoDeviceAccessParam(void);

	VideoDeviceAccessParam(const VideoDeviceAccessParam &p_objVideoDeviceAccessParam);

	~VideoDeviceAccessParam(void);
	
public:

	/************************************************************************
	**概述：
	*		设置设备ID
	**输入：
	*		p_pszDeviceID：设备ID,网络视频设备的唯一标识符
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setDeviceID(const char* p_pszDeviceID);

	/************************************************************************
	**概述：
	*		获得设备ID
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备ID
	**功能：
	*		
	**************************************************************************/
	const char* getDeviceID() const;

	/************************************************************************
	**概述：
	*		设置设备名称
	**输入：
	*		p_pszDeviceName: 设备名称
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setDeviceName(const char* p_pszDeviceName);

	/************************************************************************
	**概述：
	*		获得设备名称
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备名称
	**功能：
	*		
	**************************************************************************/
	const char* getDeviceName() const;

	/************************************************************************
	**概述：
	*		设置设备类型
	**输入：
	*		p_nDeviceType: 设备类型
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	void setDeviceType(const int p_nDeviceType);

	/************************************************************************
	**概述：
	*		获得设备类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备类型
	**功能：
	*		
	**************************************************************************/
	const int getDeviceType() const;


	/************************************************************************
	** 概述：
	*		设置IP协议类型
	**输入：
	*		p_nIPProtoVer：IP协议类型
	**输出：
	*	  无
	**返回值：
	*	  无
	************************************************************************/
	void setIPProtoVer(const int p_nIPProtoVer);

	/************************************************************************
	**概述：
	*		获取IP协议类型
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		IP协议类型
	************************************************************************/
	const int getIPProtoVer()  const;

	/************************************************************************
	**概述：
	*		设置 报警中心的地址
	**输入：
	*		p_pszDeviceIP ：报警中心的IP地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		
	************************************************************************/
	bool setDeviceIP(const char* p_nDeviceIP);

	/************************************************************************
	**概述：
	*		获取 报警中心的IP地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警中心的IP地址
	**功能：
	*
	************************************************************************/
	const char* getDeviceIP() const;

	/************************************************************************
	**概述：
	*		设置报警中心的端口
	**输入：
	*		p_nDevicePort ：报警中心的端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*
	************************************************************************/
	void setDevicePort(const unsigned short p_nDevicePort);

	/************************************************************************
	**概述：
	*		获取报警中心的端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		报警中心的端口
	**功能：
	*
	************************************************************************/
	const unsigned short getDevicePort() const;


	/************************************************************************
	**概述：
	*		设置登录设备的用户ID（用户名）
	**输入：
	*		p_pszUserID: 登录设备的用户ID
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置登录设备的用户ID
	************************************************************************/
	void setUserID(const char* p_pszUserID);

	/************************************************************************
	**概述：
	*		获取登录设备的用户ID（用户名）
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		登录设备的用户ID
	**功能：
	*		获取登录设备的用户ID
	**************************************************************************/
	const char* getUserID() const;

	/************************************************************************
	**概述：
	*		设置设备的登录密码
	**输入：
	*		p_pszPassword: 设备的登录密码
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置设备的登录密码
	************************************************************************/
	void setPassword(const char* p_pszPassword);
	
	/************************************************************************
	**概述：
	*		获取设备的登录密码
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		设备的登录密码
	**功能：
	*		获取设备的登录密码
	**************************************************************************/
	const char* getPassword() const;

	/************************************************************************
	**概述：
	*		设置是否使用路由器映射的标志
	**输入：
	*		p_bRouterMappingEnableFlag: 使用路由器映射的标志，true：使用；false：不使用
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置是否使用路由器映射的标志
	************************************************************************/
	void setRouterMappingEnableFlag(const bool p_bRouterMappingEnableFlag);
	
	/************************************************************************
	**概述：
	*		获取是否使用路由器映射的标志
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		是否使用路由器映射的标志
	**功能：
	*		获取是否使用路由器映射的标志
	**************************************************************************/
	const bool getRouterMappingEnableFlag() const;

	/************************************************************************
	**概述：
	*		设置使用路由器映射的路由器地址，该地址可以是路由器的IP地址也可以是域名
	**输入：
	*		p_pszRouterAddr: 路由器地址
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置使用路由器映射的路由器地址
	************************************************************************/
	bool setRouterAddr(const char *p_pszRouterAddr);
	
	/************************************************************************
	**概述：
	*		获取使用路由器映射的路由器地址
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器地址
	**功能：
	*		获取使用路由器映射的路由器地址
	**************************************************************************/
	const  char * getRouterAddr() const;

	/************************************************************************
	**概述：
	*		设置路由器映射的控制端口
	**输入：
	*		p_nRouterMappingControlPort: 路由器映射的控制端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置路由器映射的控制端口
	************************************************************************/
	void setRouterMappingControlPort(const unsigned short p_nRouterMappingControlPort);
	
	/************************************************************************
	**概述：
	*		获取路由器映射的控制端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器映射的控制端口
	**功能：
	*		获取路由器映射的控制端口
	**************************************************************************/
	const unsigned short getRouterMappingControlPort() const;

	/************************************************************************
	**概述：
	*		设置路由器映射的TCP音视频端口
	**输入：
	*		p_nRouterMappingControlPort: 路由器映射的TCP音视频端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置路由器映射的TCP音视频端口
	************************************************************************/
	void setRouterMappingTCPAVPort(const unsigned short p_nRouterMappingTCPAVPort);

	/************************************************************************
	**概述：
	*		获取路由器映射的TCP音视频端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器映射的TCP音视频端口
	**功能：
	*		获取路由器映射的TCP音视频端口
	**************************************************************************/
	const unsigned short getRouterMappingTCPAVPort() const;

	/************************************************************************
	**概述：
	*		设置路由器映射的RTSP端口
	**输入：
	*		p_nRouterMappingControlPort: 路由器映射的RTSP端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置路由器映射的RTSP端口
	************************************************************************/
	void setRouterMappingRTSPPort(const unsigned short p_nRouterMappingRTSPPort);

	/************************************************************************
	**概述：
	*		获取路由器映射的RTSP端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器映射的RTSP端口
	**功能：
	*		获取路由器映射的RTSP端口
	**************************************************************************/
	const unsigned short getRouterMappingRTSPPort() const;

	/************************************************************************
	**概述：
	*		设置路由器映射的RTP端口
	**输入：
	*		p_nRouterMappingControlPort: 路由器映射的RTP端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置路由器映射的RTP端口
	************************************************************************/
	void setRouterMappingRTPPort(const unsigned short p_nRouterMappingRTPPort);

	/************************************************************************
	**概述：
	*		获取路由器映射的RTP端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器映射的RTP端口
	**功能：
	*		获取路由器映射的RTP端口
	**************************************************************************/
	const unsigned short getRouterMappingRTPPort() const;

	/************************************************************************
	**概述：
	*		设置路由器映射的RTCP端口
	**输入：
	*		p_nRouterMappingControlPort: 路由器映射的RTCP端口
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		设置路由器映射的RTCP端口
	************************************************************************/
	void setRouterMappingRTCPPort(const unsigned short p_nRouterMappingRTCPPort);

	/************************************************************************
	**概述：
	*		获取路由器映射的RTCP端口
	**输入：
	*		无
	**输出：
	*		无
	**返回值：
	*		路由器映射的RTCP端口
	**功能：
	*		获取路由器映射的RTCP端口
	**************************************************************************/
	const unsigned short getRouterMappingRTCPPort() const;


	/************************************************************************
	**概述：
	*		对象自拷贝
	**输入：
	*		p_objVideoDeviceAccessParam: 设备信息对象
	**输出：
	*		无
	**返回值：
	*		无
	**功能：
	*		对象自拷贝
	************************************************************************/
	VideoDeviceAccessParam &operator =(const VideoDeviceAccessParam& p_objVideoDeviceAccessParam);

private:

	char			m_szDeviceID[CONST_MAXLENGTH_DEVICEID + 1];			//设备ID

	char			m_szDeviceName[CONST_MAXLENGTH_DEVICENAME + 1];		//设备名称

	int				m_nDeviceType;										//设备类型


	char			m_szDeviceIP[CONST_MAXLENGTH_IP + 1];				//设备IP地址
	unsigned short	m_nDevicePort;										//设备端口
	int				m_nIPProtoVer;										//IP协议类型
	
	char			m_szUserID[CONST_MAXLENGTH_USERID + 1];				//登陆设备的用户ID

	char			m_szPassword[CONST_MAXLENGTH_PASSWORD + 1];			//登陆设备的密码
	
	
	bool			m_bRouterMappingEnableFlag;							//路由器映射标志
	char			m_szRouterAddr[CONST_MAXLENGTH_IP + 1];				//路由器地址，IP地址或域名
	unsigned short	m_nRouterMappingControlPort;						//控制映射端口
	unsigned short	m_nRouterMappingTCPAVPort;							//TCP音视频映射端口
	unsigned short	m_nRouterMappingRTSPPort;							//RTSP映射端口
	unsigned short	m_nRouterMappingRTPPort;							//RTP映射端口
	unsigned short	m_nRouterMappingRTCPPort;							//RTCP映射端口
}_PACKED_1_;

/**********************************************************************/
#ifdef PRAGMA_PACK
 	#ifdef WIN32  
		#pragma pack(pop)
	#endif
 #endif
/**********************************************************************/

#endif //_VIDEODEVICEACCESSPARAM_H_
